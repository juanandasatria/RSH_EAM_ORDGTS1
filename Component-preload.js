/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "rsh/eam/ordergantts1/Component-preload",
	"modules": {
		"rsh/eam/ordergantts1/model/models.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"sap/ui/model/json/JSONModel\",\"sap/ui/Device\"],function(J,D){\"use strict\";return{createDeviceModel:function(){var m=new J(D);m.setDefaultBindingMode(\"OneWay\");return m;}};});",
		"rsh/eam/ordergantts1/Component.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"sap/ui/core/UIComponent\",\"sap/ui/Device\",\"rsh/eam/ordergantts1/model/models\",\"sap/rsh/eam/lib/common/utils/utils\",\"sap/rsh/eam/lib/common/utils/AppState\",\"sap/rsh/eam/lib/common/utils/AppPersContainer\"],function(U,D,m,u,A,a){\"use strict\";return U.extend(\"rsh.eam.ordergantts1.Component\",{metadata:{manifest:\"json\",config:{fullWidth:true}},init:function(){U.prototype.init.apply(this,arguments);this.setModel(m.createDeviceModel(),\"device\");this.getRouter().initialize();a.createInstance(this);u.setMondayFirstDayOfWeek();A.createInstance(this);this.getModel().setDeferredGroups(this.getModel().getDeferredGroups().concat([\"iDBatchOrderFilterRequest\"]));this.getModel().setChangeGroups({\"C_RSHOrdersAndOperationsType\":{groupId:\"iDBatchOrderFilterRequest\",changeSetId:\"iDBatchOrderFilterRequest\",single:false}});this.getModel().setRefreshAfterChange(false);},destroy:function(){U.prototype.destroy.apply(this,arguments);},getContentDensityClass:function(){if(this._sContentDensityClass===undefined){if(jQuery(document.body).hasClass(\"sapUiSizeCozy\")||jQuery(document.body).hasClass(\"sapUiSizeCompact\")){if(jQuery(document.body).hasClass(\"sapUiSizeCompact\")){this._sContentDensityAdditionalClass=\"sapUiSizeCondensed\";this._sContentDensityClass=\"\";}else{this._sContentDensityClass=\"\";}}else if(!D.support.touch){this._sContentDensityClass=\"sapUiSizeCompact\";}else{this._sContentDensityClass=\"sapUiSizeCozy\";}}return this._sContentDensityClass;},getContentDensityAdditionalClass:function(){if(this._sContentDensityAdditionalClass===undefined){if(jQuery(document.body).hasClass(\"sapUiSizeCompact\")){this._sContentDensityAdditionalClass=\"sapUiSizeCondensed\";}}return this._sContentDensityAdditionalClass;}});});",
		"rsh/eam/ordergantts1/controller/SchedulingBoard.controller.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"sap/rsh/eam/lib/common/controller/BaseController\",\"sap/ui/model/json/JSONModel\",\"sap/rsh/eam/lib/common/formatters/formatter\",\"sap/rsh/eam/lib/common/utils/utils\",\"sap/rsh/eam/lib/common/utils/GanttUtils\",\"sap/rsh/eam/lib/common/controller/OrderPopup\",\"sap/rsh/eam/lib/common/controller/OperationPopup\",\"sap/rsh/eam/lib/common/controller/FunctionalLocationPopup\",\"sap/rsh/eam/lib/common/controller/EquipmentPopup\",\"sap/rsh/eam/lib/common/utils/Constants\",\"sap/rsh/eam/lib/common/utils/StatusCommon\",\"sap/rsh/eam/lib/common/controller/AssignMyWorkCenters\",\"sap/rsh/eam/lib/common/controller/ChangeOperations\",\"sap/gantt/config/SettingItem\",\"sap/rsh/eam/lib/common/utils/AppState\",\"sap/rsh/eam/lib/common/utils/AppPersContainer\",\"sap/rsh/eam/lib/common/utils/ItemHashMap\",\"sap/gantt/def/cal/Calendar\",\"sap/gantt/def/cal/CalendarDefs\",\"sap/gantt/def/cal/TimeInterval\",\"sap/gantt/simple/GanttPrinting\",\"sap/ui/model/Filter\",\"sap/ui/model/FilterOperator\",\"sap/rsh/eam/lib/common/controller/GanttChartSettingsDialog\",\"sap/gantt/simple/Relationship\",\"sap/rsh/eam/lib/common/controller/RelationshipActionSheet\",\"sap/ui/core/Fragment\"],function(B,J,F,U,G,O,a,b,E,C,S,A,c,d,e,f,I,g,h,T,l,o,q,r,R,t,u){\"use strict\";return B.extend(\"rsh.eam.ordergantts1.controller.SchedulingBoard\",{formatter:F,ganttUtils:G,DISPATCHED:30,DUE:20,INPROCESS:40,_sOrderAllTechMandatoryFields:\"MaintenanceOrder,MaintenanceOrderDesc,MaintenanceOrderInternalID,OrderStartDateTime,OrderEndDateTime,ProcessingStatus,ProcessingStatusText,OrderOperationRowLevel,OrderOperationParentRowID,OrderOperationRowID,OrderOperationIsExpanded,MaintOrderRoutingNumber,LatestAcceptableCompletionDate,OrderType,SerialNumber,Material,Customer,OperationPersonRespName\",_sOrderAppStateFields:\"\",_sOrderAdditionalPopOverFields:\"FunctionalLocationName,FunctionalLocation,EquipmentName,Equipment,MaterialStatusKey,MaterialStatusText\",_sOperationAllTechMandatoryFields:\"MaintenanceOrder,MaintenanceOrderOperation,MaintenanceOrderSubOperation,MaintenanceOrderDesc,MainWorkCenter,MaintenanceOrderInternalID,MaintOrderOperationInternalID,OrderOperationStartDateTime,OrderOperationEndDateTime,ProcessingStatus,ProcessingStatusText,OrderOperationRowLevel,OrderOperationParentRowID,OrderOperationRowID,OrderOperationIsExpanded,WorkCenter,OperationHasLongText,HasError,OperationDescription,WorkCenterInternalID,HasCrossOrderRelationship,HasErrorDescription,ID,PlannedStartDate,PlannedStartTime,OperationPersonResponsible,OperationPersonRespName,MaintOrderRoutingNumber,MaintOrderOperationCounter,OpBscStartDateConstraintType,OrderOpStartConstraintDateTime,OpBscEndDateConstraintType,OrderOpEndConstraintDateTime,OrderType\",_sOperationAppStateFields:\"\",_afilterFieldGroups:[\"MaintenanceNotification\",\"WorkCenterInternalID\",\"WorkCenterTypeCode\",\"Plant\",\"OperationControlKey\",\"PlannedStartDate\",\"PlannedEndDate\",\"PlannedStartTime\",\"PlannedEndTime\",\"OperationDuration\",\"OperationPlannedWork\",\"NumberOfCapacities\",\"OperationHasLongText\",\"OperationPersonResponsible\",\"OperationPersonRespName\",\"HasError\",\"MaintOpExecutionStageName\",\"WorkCenter\",\"PlantSection\",\"MaintOpExecStageShortText\"],_aExpandFields:[\"to_OrderActiveStatus\",\"to_OrderDetails\"],_sSelectString:null,sSortOrderField:\"MaintenanceOrder\",sSortOperationField:\"MaintenanceOrderOperation\",sOrderSortOrder:\"Ascending\",sOperationSortOrder:null,statusCommon:null,_bFirstTriggerDone:false,_sAfterStatusChangesFinalizedSourceApp:C.sAfterStatusChangesFinalizedGanttApp,_bPagingRequestOfSubnodes:false,_bNewColumnAdded:false,_sExistingFilterString:null,_sPerformanceFilterOnExpand:null,_isIAppState:null,sOrderGanttChannel:\"rsh.eam.ordergantts\",sIndiviudalActionOnGanttChange:\"individualChangeOnGanttChange\",onInit:function(){this._oOwnerComponent=this.getOwnerComponent();this._oOwnerComponent.setModel(new J({\"rowCount\":0,\"showImpRel\":false,\"showExpRel\":false,\"showNonWorkingTimes\":false,\"showCriticalPath\":false,\"condensedModeActive\":false,\"showFinalDueDate\":false}),\"UIModel\");this._bAdjustToolbar=false;this._oDataModel=this.getOwnerComponent().getModel();this._oDataModel.attachBatchRequestSent(this._requestSent,this);this._oDataModel.attachBatchRequestCompleted(this._requestComplete,this);this._setTimeAxis();this.initMessagePopover();this.attachModelErrorHandler(\"readModel\");var i=this.getView().byId(\"idOrderTreeTable\");var j=this.getView().byId(\"idOrderGanttChartWithTable\");this._oAppStateData=f.getInstance().getFeatureModel(C.sGanttAppState).getData();if(this._oAppStateData.customData===undefined){this._oAppStateData={};this._oAppStateData.customData=G.oneTimeInitilzationOfAppState(i,j);}G.setGanttColumnPersonalization(this._oAppStateData,i,j,this);i.attachSort(this.onSortRequest,this);i.attachColumnResize(this._onPersChangeForColumns,this);i.attachColumnVisibility(this._onPersChangeForColumns,this);this.statusCommon=new S(this._sAfterStatusChangesFinalizedSourceApp);this._setupSettings();this.updateRelationshipsAndUtilizations();this._setCondensedMode();this._bActionInitiatedFromContextMenu=false;},_getCurrentTimePeriod:function(){var i;var j;if(this.getView().byId(\"idOrderGanttSmartFilterBar\").isInitialised()&&this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData()&&(this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.conditionTypeInfo.data.operation===\"DATERANGE\"||this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.conditionTypeInfo.data.operation===\"TODAYFROMTO\")){if(U.isMockRun()){i=this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.conditionTypeInfo.data.value1;}else{i=this.dateObjectCopy(this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.ranges[0].value1);}j=this.dateObjectCopy(this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.ranges[0].value2);j.setDate(j.getDate()+1);}else{i=new Date();j=new Date();var k=35-j.getDay();i.setDate(i.getDate()-7);j.setDate(j.getDate()+k);}i.setHours(0,0,0);j.setHours(0,0,0);this.oPeriodTypeDates={};this.oPeriodTypeDates.oStartDate=U.getAdjustedDate(i);this.oPeriodTypeDates.oEndDate=U.getAdjustedDate(j);var m={};m.sCalendarStartDate=i;m.sCalendarEndDate=j;m.sInitStartDate=this.getDatePerTimeAxisFormat(i);m.sInitEndDate=this.getDatePerTimeAxisFormat(j);return m;},_setTimeAxis:function(){var i=this._getCurrentTimePeriod();var z=new sap.gantt.axistime.ProportionZoomStrategy({totalHorizon:new sap.gantt.config.TimeHorizon({startTime:i.sInitStartDate,endTime:i.sInitEndDate}),visibleHorizon:new sap.gantt.config.TimeHorizon({startTime:i.sInitStartDate,endTime:i.sInitEndDate})});this.byId(\"idOrderGanttChartWithTable\").setAxisTimeStrategy(z);},formatOrderOpsLink:function(i,m,j,k,n,p){if(i===0){return m+\" \"+j;}else{if(p){return k+\" / \"+p+\" \"+n;}else{return k+\" \"+n;}}},formatWork:function(D,s){if(D&&s){return this.formatter.formatDuration(D)+\" \"+s;}else{return\"\";}},getTitle:function(s,i){if(s!==null&&i!==null){return this._formatToLocale(this.removeTimeZoneOffset(s))+\" - \"+this._formatToLocale(this.removeTimeZoneOffset(i));}return\"\";},removeTimeZoneOffset:function(i){if(i){return new Date(i.getTime()+i.getTimezoneOffset()*60*1000);}else{return undefined;}},getRectangleHight:function(i,j){if(i===1&&j){return 12;}else if(i===1&&j===false){return 20;}else{return 0;}},getShevronHight:function(i,j){if(i===0&&j){return 12;}else if(i===0&&j===false){return 20;}else{return 0;}},getShevronHeadWidth:function(i){if(i){return 6;}else{return 10;}},getShevronTailWidth:function(i){if(i){return 6;}else{return 10;}},getCriticalPathHight:function(i,j){if(i===1&&j){return 1;}else if(i===1&&j===false){return 2;}else{return 0;}},getCPyBiasValue:function(i,j){if(i===1&&j){return 8;}else if(i===1&&j===false){return 15;}else{return 0;}},constraintTimeFormatter:function(i,s){if(s===\"1\"){return this.removeTimeZoneOffset(i);}else{return null;}},getStartConstraintTypeText:function(s,i){var j=this.getView().getModel(\"i18n\").getResourceBundle();if(i){var k=sap.ui.core.format.DateFormat.getDateInstance().format(i,true);var m=sap.ui.core.format.DateFormat.getTimeInstance().format(i,true);}switch(s){case\"1\":return j.getText(\"bscStartDateConstraintType1Tooltip\",[k,m]);case\"2\":return j.getText(\"bscStartDateConstraintType2Tooltip\",[k,m]);case\"3\":return j.getText(\"bscStartDateConstraintType3Tooltip\",[k,m]);case\"4\":return j.getText(\"bscStartDateConstraintType4Tooltip\");default:return\"\";}},getFinishConstraintTypeText:function(s,i){var j=this.getView().getModel(\"i18n\").getResourceBundle();if(i){var k=sap.ui.core.format.DateFormat.getDateTimeInstance().format(i,true);var m=sap.ui.core.format.DateFormat.getTimeInstance().format(i,true);}switch(s){case\"1\":return j.getText(\"bscEndDateConstraintType1Tooltip\",[k,m]);case\"2\":return j.getText(\"bscEndDateConstraintType2Tooltip\",[k,m]);case\"3\":return j.getText(\"bscEndDateConstraintType3Tooltip\",[k,m]);case\"4\":return j.getText(\"bscEndDateConstraintType4Tooltip\");default:return\"\";}},getOpConstraintFill:function(s,i,j){switch(s){case\"1\":if(JSON.stringify(i)===JSON.stringify(j)){return\"@sapTextColor\";}else{return\"@sapNegativeColor\";}case\"2\":if(i<j){return\"@sapTextColor\";}else{return\"@sapNegativeColor\";}case\"3\":if(i>j){return\"@sapTextColor\";}else{return\"@sapNegativeColor\";}case\"4\":return\"@sapTextColor\";default:return\"@sapTextColor\";}},_formatToLocale:function(D){if(!this._oDateFormatter){this._oDateFormatter=sap.ui.core.format.DateFormat.getDateTimeInstance({locale:sap.ui.getCore().getConfiguration().getLocale()});}if(D){return this._oDateFormatter.format(D);}else{return D;}},getColor:function(p){switch(p){case this.DISPATCHED:return\"@sapPositiveColor\";case this.DUE:return\"@sapCriticalColor\";default:return\"@sapNeutralColor\";}},formatActivityType:function(i,j){if(i&&j){return j+\" (\"+i+\")\";}else{return undefined;}},isDNDPossible:function(s,p){if(s===\"\"&&p!==C.inProcessCode){return true;}else{return false;}},isConnectable:function(s,i,j,p){if((s||i)&&j===\"\"&&p!==C.inProcessCode){return true;}else{return false;}},onAfterRendering:function(){if(!this._bAdjustToolbar){var _=this.getView().byId(\"idOrderGanttContainer\");var i=this.byId(\"idCustomGanttSettingBtn\");var j=_.getToolbar();j.removeContent(i);j.insertContent(i,j.getContent().length);j.removeContent(j.oToolbarSpacer);j.oToolbarSpacer=null;this._bAdjustToolbar=true;}},_initBindingEventHandlers:function(){var i=this.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\");this.getView().byId(\"idOrderTreeTable\").attachToggleOpenState(this._onExpandRow,this);i.attachEvent(\"dataReceived\",function(j){var k=i.oLengths.null;var m=this.getOwnerComponent().getModel(\"UIModel\");m.setProperty(\"/rowCount\",k);var n=false;if(j.getParameters().data){var p=j.getParameters().data.results.length;var s=j.getParameters().data.__count;if(p<s){this._bPagingRequestOfSubnodes=true;}else{this._bPagingRequestOfSubnodes=false;if(j.getParameters().data&&j.getParameters().data.results.length){if(j.getParameters().data.results[0].OrderOperationRowLevel===1){this.setFinalSelectForOrderRequest(n);}}}}}.bind(this));i.attachChange(this._onChange,this);},_onExpandRow:function(i){if(i.getParameters().expanded===true){var m=i.getParameters().rowContext.getProperty().MaintenanceOrder;var M=[];M.push(m);this._addPerformanceFilterOnExpand(M);}},_addPerformanceFilterOnExpand:function(m){var j=this.getView().byId(\"idOrderTreeTable\");var k=j.getBinding(\"rows\");var M=null;this._sExistingFilterString=k.sFilterParams;if(this._sPerformanceFilterOnExpand){this._sExistingFilterString=this._sExistingFilterString.substr(this._sPerformanceFilterOnExpand.length);}for(var i=0;i<m.length;i++){if(m.length===1){M=\"MaintenanceOrder eq '\"+m[i]+\"' and \";M=encodeURIComponent(M);k.sFilterParams=M+this._sExistingFilterString;this._sPerformanceFilterOnExpand=M;}else if(i===0){M=\"(\"+\"MaintenanceOrder eq '\"+m[i]+\"' or \";}else if(i===(m.length-1)){M=M+\"MaintenanceOrder eq '\"+m[i]+\"')\";}else{M=M+\"MaintenanceOrder eq '\"+m[i]+\"' or \";}}if(m.length!==1){M=encodeURIComponent(M);k.sFilterParams=M+\"%20and%20\"+this._sExistingFilterString;this._sPerformanceFilterOnExpand=M+\"%20and%20\";}},_determineVisibleColumnsFromAppState:function(n,p,M){var s=null;var v=[];var w=this.getView().byId(\"idOrderTreeTable\");if(p){s=this._oAppStateData.customData;v=s.aVisibleColumns;}else{var x=w.getColumns();for(var m=0;m<x.length;m++){if(x[m].getVisible()){v.push({\"pos\":m,\"width\":x[m].getWidth(),\"columnBindingName\":x[m].getSortProperty()});}}}var y;var z=false;for(var k=0;k<v.length;k++){if(v[k].columnBindingName===M){z=true;break;}}if(M&&!z){y={pos:25,width:\"20%\",columnBindingName:M};v[v.length]=y;}if(n){this._sOrderAppStateFields=\"\";for(var i=0;i<v.length;i++){switch(v[i].columnBindingName){case\"MaintenanceOrder\":break;case\"MaintPriority\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"MaintPriorityDesc\";break;case\"MaintenanceActivityType\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"MaintenanceActivityTypeName\";break;case\"FunctionalLocationName\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"FunctionalLocation\";break;case\"EquipmentName\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"Equipment\";break;case\"TechnicalObjectDescription\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"TechnicalObjectLabel\";if(this._sOrderAppStateFields.indexOf(\"TechObjIsEquipOrFuncnlLoc\")===-1){this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+\"TechObjIsEquipOrFuncnlLocDesc,TechObjIsEquipOrFuncnlLoc\";}break;case\"TechObjIsEquipOrFuncnlLocDesc\":if(this._sOrderAppStateFields.indexOf(\"TechObjIsEquipOrFuncnlLoc\")===-1){this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"TechObjIsEquipOrFuncnlLoc\";}break;case\"MaterialStatusText\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"MaterialStatus\";break;case\"OperationDuration\":break;case\"OperationPlannedWork\":break;case\"OperationControlKey\":break;case\"PlannedStartDate\":break;case\"PlannedEndDate\":break;case\"PlannedStartTime\":break;case\"PlannedEndTime\":break;case\"MaintOpExecutionStageName\":break;case\"MaintOpExecStageShortText\":break;case\"OperationPersonResponsible\":break;case\"OperationPersonRespName\":break;case\"NumberOfCapacities\":break;case\"MaintOrdProcessPhaseCode\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"MaintOrdProcessPhaseDesc\";break;case\"MaintOrdProcessSubPhaseCode\":this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName+\",\"+\"MaintOrdProcessSubPhaseDesc\";break;case\"ProcessingStatus\":break;case\"OperationHasLongText\":break;case\"HasError\":break;default:this._sOrderAppStateFields=this._sOrderAppStateFields+\",\"+v[i].columnBindingName;break;}if(this._sOrderAppStateFields.startsWith(\",\",0)){this._sOrderAppStateFields=this._sOrderAppStateFields.substring(1);}}}else{this._sOperationAppStateFields=\"\";for(var j=0;j<v.length;j++){switch(v[j].columnBindingName){case\"MainWorkCenter\":break;case\"MaintOrdProcessPhaseCode\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+\"MaintOrdOpProcessPhaseCode\"+\",\"+\"MaintOrdOpProcessPhaseDesc\";break;case\"MaintOrdProcessSubPhaseCode\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+\"MaintOrdOpProcessSubPhaseCode\"+\",\"+\"MaintOrdOpProcessSubPhaseDesc\";break;case\"MaintenanceOrder\":break;case\"ProcessingStatus\":break;case\"MaintPriority\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"MaintPriorityDesc\";break;case\"OrderSystemConditionText\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"OperationSystemCondition,OperationSystemConditionText\";break;case\"MaintenanceActivityType\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"MaintenanceActivityTypeName\";break;case\"FunctionalLocationName\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"FunctionalLocation,OperationFunctionalLocation,OpFunctionalLocationName\";break;case\"EquipmentName\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"Equipment,OperationEquipment,OperationEquipmentName\";break;case\"TechnicalObjectDescription\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"TechnicalObjectLabel,OperationTechnicalObjectLabel,OperationTechnicalObjectDesc\";if(this._sOperationAppStateFields.indexOf(\"OpTechObjEquipOrFuncnlLoc\")===-1){this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+\"TechObjIsEquipOrFuncnlLoc,TechObjIsEquipOrFuncnlLocDesc,OpTechObjEquipOrFuncnlLoc,OpTechObjEquipOrFuncnlLocDesc\";}break;case\"TechObjIsEquipOrFuncnlLocDesc\":if(this._sOperationAppStateFields.indexOf(\"OpTechObjEquipOrFuncnlLoc\")===-1){this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"TechObjIsEquipOrFuncnlLoc,OpTechObjEquipOrFuncnlLoc,OpTechObjEquipOrFuncnlLocDesc\";}break;case\"OperationDuration\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"OperationDurationUnit\";break;case\"OperationPlannedWork\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"OperationPlannedWorkUnit\";break;case\"MaterialStatusText\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"MaterialStatus\";break;case\"MaintOrdBasicStartDate\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"OrderStartDateTime\";break;case\"MaintOrdBasicEndDate\":this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName+\",\"+\"OrderEndDateTime\";break;default:this._sOperationAppStateFields=this._sOperationAppStateFields+\",\"+v[j].columnBindingName;break;}}}},setFinalSelectForOperationRequest:function(){var i=false;var j=this._oOwnerComponent.getModel(\"UIModel\");var k=this.getView().byId(\"idOrderTreeTable\");var m=k.getBinding(\"rows\");var n=false;var s=\"\";var p=\"\";this._determineVisibleColumnsFromAppState(i,n);this._sSelectString=\"$select=\"+this._sOperationAllTechMandatoryFields+this._sOperationAppStateFields;if(j.getProperty(\"/showImpRel\")||j.getProperty(\"/showExpRel\")){s=\"to_Relationships\";p=\"&$expand=to_Relationships\";}if(j.getProperty(\"/showUtilizationIndicator\")){s=s?s+\",\"+\"to_UtilIndicator\":\"to_UtilIndicator\";p=p?p+\",\"+\"to_UtilIndicator\":\"&$expand=to_UtilIndicator\";}m.sCustomParams=s?this._sSelectString+\",\"+s+p:this._sSelectString;},setFinalSelectForOrderRequest:function(i,m){var j=true;var k=this._oOwnerComponent.getModel(\"UIModel\");var n=this.getView().byId(\"idOrderTreeTable\");var p=n.getBinding(\"rows\");var s=\"\";var v=\"\";this._determineVisibleColumnsFromAppState(j,i,m);if(this._sOrderAppStateFields){this._sSelectString=\"$select=\"+this._sOrderAllTechMandatoryFields+\",\"+this._sOrderAppStateFields;}else{this._sSelectString=\"$select=\"+this._sOrderAllTechMandatoryFields;}if(k.getProperty(\"/showImpRel\")||k.getProperty(\"/showExpRel\")){s=\"to_Relationships\";v=\"&$expand=to_Relationships\";}if(k.getProperty(\"/showUtilizationIndicator\")){s=s?s+\",\"+\"to_UtilIndicator\":\"to_UtilIndicator\";v=v?v+\",\"+\"to_UtilIndicator\":\"&$expand=to_UtilIndicator\";}p.sCustomParams=s?this._sSelectString+\",\"+s+v:this._sSelectString;if(p.aSorters&&p.aSorters.length>=1&&p.aSorters[0].sPath===this.sSortOperationField){p.aSorters[0].sPath=this.sSortOrderField;p.aSorters[0].bDescending=this.sOrderSortOrder===\"Descending\"?true:false;}},_onChange:function(i){var j=i.getParameters();var k=this.getView().byId(\"idOrderTreeTable\");var m=k.getBinding(\"rows\");if(j&&j.reason===\"expand\"){this.setFinalSelectForOperationRequest();this._bPagingRequestOfSubnodes=true;if(k.getSortedColumns().length!==0){if(this._afilterFieldGroups.indexOf(k.getSortedColumns()[0].getSortProperty())!==-1||k.getSortedColumns()[0].getSortProperty()===\"MainWorkCenter\"||k.getSortedColumns()[0].getSortProperty()===\"MaintOrdProcessPhaseCode\"||k.getSortedColumns()[0].getSortProperty()===\"MaintOrdProcessSubPhaseCode\"||k.getSortedColumns()[0].getSortProperty()===\"MaintenanceOrder\"){m.aSorters[0].sPath=this.sSortOperationField;m.aSorters[0].bDescending=this.sOperationSortOrder===\"Descending\"?true:false;}}else if(m.aSorters.length!==0){if(m.aSorters[0].sPath===\"MainWorkCenter\"||m.aSorters[0].sPath===\"MaintOrdProcessPhaseCode\"||m.aSorters[0].sPath===\"MaintOrdProcessSubPhaseCode\"||m.aSorters[0].sPath===\"MaintenanceOrder\"){m.aSorters[0].sPath=this.sSortOperationField;m.aSorters[0].bDescending=this.sOperationSortOrder===\"Descending\"?true:false;}}}else if(j&&j.reason===\"sort\"){if(this._afilterFieldGroups.indexOf(this.sSortOperationField)!==-1||this.sSortOperationField===\"WorkCenter\"||this.sSortOperationField===\"MaintenanceOrderOperation\"||this.sSortOperationField===\"OpFunctionalLocationName\"||this.sSortOperationField===\"OperationEquipmentName\"||this.sSortOperationField===\"OperationTechnicalObjectDesc\"||this.sSortOperationField===\"OperationSystemConditionText\"||this.sSortOperationField===\"MaintOrdOpProcessPhaseCode\"||this.sSortOperationField===\"MaintOrdOpProcessSubPhaseCode\"){m.aSorters[0].sPath=this.sSortOperationField;m.aSorters[0].bDescending=this.sOperationSortOrder===\"Descending\";}this.setFinalSelectForOperationRequest();}sap.ui.getCore().getEventBus().publish(this.sOrderGanttChannel,this.sIndiviudalActionOnGanttChange,this);if(this._bActionInitiatedFromContextMenu===true){this.updateToolbarButtonsFromSelectedRows();this._bActionInitiatedFromContextMenu=false;}},setNavParamstoFilterBar:function(){var s=this._oOwnerComponent.getComponentData().startupParameters;var j={};var i=this.getView().byId(\"idOrderGanttSmartFilterBar\");if(s){j=this.getGlobalFilter(s,j);}Object.keys(s).forEach(function(k,m){if(i.getControlByKey(k)){i.addFieldToAdvancedArea(k);}});i.setFilterData(j);i.getVariantManagement().currentVariantSetModified(true);},getGlobalFilter:function(s,j){var i=[];var p={};var k={};var w={};if(s.MaintPriority){p.key=s.MaintPriority[0];if(s.MaintPriorityDesc){p.text=s.MaintPriorityDesc[0];}else{p.text=p.key;}i.push(p);if(!j.MaintPriority){j.MaintPriority={};}j.MaintPriority.items=i;}i=[];if(s.ProcessingStatus){k.key=s.ProcessingStatus[0];i.push(k);if(!j.ProcessingStatus){j.ProcessingStatus={};}j.ProcessingStatus.items=i;}i=[];if(s.WorkCenter){w.key=s.WorkCenter[0];w.text=s.WorkCenter[0];i.push(w);if(!j.WorkCenter){j.WorkCenter={};}j.WorkCenter.items=i;}if(s.MaintenanceOrder){if(!j.MaintenanceOrder){j.MaintenanceOrder={};}j.MaintenanceOrder.items=[];var m=decodeURIComponent(s.MaintenanceOrder);var M=m.split(\",\");M.forEach(function x(v){j.MaintenanceOrder.items.push({\"key\":v,\"text\":v});});}if(s.PeriodType){var n=this.getPeriodTypeData(s,j);}return n;},getPeriodTypeData:function(s,j){var i={};var k={};k.data={};var m=new Date();var n=new Date();var p=new Date();var v=new Date();var w=[];v.setDate(v.getDate()-1);n.setDate(n.getDate()+28);n.setDate(n.getDate()-(n.getDay()+7)%7);p.setMonth(p.getMonth()-6);if(s.PeriodType){k.name=\"custom.oDateRange\";k.data.calendarType=\"Gregorian\";k.data.key=\"PeriodType\";if(s.PeriodType[0]===\"FUTURE\"){k.data.operation=\"FISCALPERIOD0\";i.Operations=\"BT\";i.value1=m;i.value2=n;}else if(s.PeriodType[0]===\"PAST\"){k.data.operation=\"DATERANGE\";k.data.value1=p;k.data.value2=v;i.Operations=\"BT\";i.value1=p;i.value2=v;}else if(s.PeriodType[0]===\"CUSTOM\"){this._getCustomPeriodDate(s,m,n,k,i,\"DATERANGE\");}else if(s.PeriodType[0]===\"CUSTOM_TODAYFROMTO\"){this._getCustomPeriodDate(s,m,n,k,i,\"TODAYFROMTO\");}w.push(i);if(!j.PeriodType){j.PeriodType={};}j.PeriodType.ranges=w;j.PeriodType.conditionTypeInfo=k;}return j;},_getCustomPeriodDate:function(s,i,j,k,m,n){if(s.PeriodStartDate&&s.PeriodEndDate){if(n===\"DATERANGE\"){i=this.getValidDate(decodeURIComponent(s.PeriodStartDate[0]));j=this.getValidDate(decodeURIComponent(s.PeriodEndDate[0]));if(i&&j){k.data.operation=n;k.data.value1=i;k.data.value2=j;m.Operation=\"BT\";m.value1=i;m.value2=j;m.exclude=false;m.keyField=\"PeriodType\";}}else{k.data.operation=n;k.data.value1=s.PeriodStartDate[0];k.data.value2=s.PeriodEndDate[0];m.Operation=\"BT\";m.value1=s.PeriodStartDate[0];m.value2=s.PeriodEndDate[0];m.exclude=false;m.keyField=\"PeriodType\";}}},getValidDate:function(i){var D=new Date(i);if(D instanceof Date&&!isNaN(D)){return U.convertDateToGatewayString(D);}else{return null;}},_initTreeTableBinding:function(){var i=this.getView().byId(\"idOrderTreeTable\");i.bindRows({path:\"/C_RSHOrdersAndOperations\",parameters:{treeAnnotationProperties:{hierarchyLevelFor:\"OrderOperationRowLevel\",hierarchyNodeFor:\"OrderOperationRowID\",hierarchyParentNodeFor:\"OrderOperationParentRowID\",hierarchyDrillStateFor:\"OrderOperationIsExpanded\"},gantt:{rowIdName:\"OrderOperationRowID\"},groupId:\"iDBatchOrderFilterRequest\"}});var j=true;this.setFinalSelectForOrderRequest(j);},formatStartTime:function(i){if(i){var D=this.removeTimeZoneOffset(i);D.setHours(0,0,0,0);return D;}return\"\";},getUtilizationColor:function(w){if(w>=0&&w<75){return\"@sapUiShellPositiveColor\";}if(w>=75&&w<=100){return\"@sapUiShellCriticalColor\";}if(w>100){return\"@sapUiShellNegativeColor\";}return\"\";},getTooltipForUtilization:function(w,W,s){return this.getView().getModel(\"i18n\").getResourceBundle().getText(\"UtilizationTooltip\",[Math.round(w),Math.round(parseFloat(W)),Math.round(parseFloat(s))]);},onInitSmartFilter:function(i){this._initTreeTableBinding();this._initBindingEventHandlers();var j=this.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\");j.refresh();this.setNavParamstoFilterBar();},getAdditionalDateRangeFilterBlock:function(i){var j={};var p={};if(U.isMockRun()){return[];}var k=this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData();if(!k||(k&&!k.PeriodType)){p={oStartDate:new Date(),oEndDate:new Date()};p.oEndDate.setDate(p.oEndDate.getDate()+28);p.oEndDate.setDate(p.oEndDate.getDate()-(p.oEndDate.getDay()+7)%7);}else{p={oStartDate:this.dateObjectCopy(k.PeriodType.ranges[0].value1),oEndDate:this.dateObjectCopy(k.PeriodType.ranges[0].value2)};}if(i){return p;}var m=new sap.ui.model.Filter({path:\"OpErlstSchedldExecStrtDte\",value1:U.getAdjustedDate(p.oEndDate),operator:\"LE\"});var n=new sap.ui.model.Filter({path:\"OpErlstSchedldExecEndDte\",value1:U.getAdjustedDate(p.oStartDate),operator:\"GE\"});var L=new sap.ui.model.Filter({path:\"OpLtstSchedldExecStrtDte\",value1:U.getAdjustedDate(p.oEndDate),operator:\"LE\"});var s=new sap.ui.model.Filter({path:\"OpLtstSchedldExecEndDte\",value1:U.getAdjustedDate(p.oStartDate),operator:\"GE\"});var v=new sap.ui.model.Filter({path:\"SchedulingIsPerformedBackward\",value1:\"X\",operator:\"EQ\"});var w=new sap.ui.model.Filter({path:\"SchedulingIsPerformedBackward\",value1:\" \",operator:\"EQ\"});var x=new sap.ui.model.Filter({path:\"OpErlstSchedldExecEndDte\",value1:U.getAdjustedDate(p.oEndDate),operator:\"LE\"});var y=new sap.ui.model.Filter({path:\"OpLtstSchedldExecEndDte\",value1:U.getAdjustedDate(p.oEndDate),operator:\"LE\"});var z=new sap.ui.model.Filter({filters:[m,n,w],and:true});var D=new sap.ui.model.Filter({filters:[L,s,v],and:true});var H=new sap.ui.model.Filter({filters:[x,n,w],and:true});var K=new sap.ui.model.Filter({filters:[y,s,v],and:true});if(!k||(k&&!k.PeriodType)){j=new sap.ui.model.Filter({filters:[z,D],and:false});}else{var M=k.PeriodType.conditionTypeInfo.data.operation;if(M===\"FISCALPERIOD1\"){j=new sap.ui.model.Filter({filters:[H,K],and:false});}else{j=new sap.ui.model.Filter({filters:[z,D],and:false});}}return j;},_setThresholdForModelData:function(){var i=this._getCurrentTimePeriod();var D=Math.abs(i.sCalendarEndDate-i.sCalendarStartDate);var j=Math.ceil(D/(1000*60*60*24));if(j>100){this._oOwnerComponent.getModel().setSizeLimit(j);}else if(this._oOwnerComponent.getModel().iSizeLimit>100){this._oOwnerComponent.getModel().setSizeLimit(100);}},onFilter:function(i){sap.ui.getCore().getMessageManager().removeAllMessages();this._setTimeAxis();if(U.isMockRun()){this.onInitSmartFilter();this._submitDelayedRequests();return;}if(!this._bFirstTriggerDone){if(i.getParameters()&&i.getParameters().hasOwnProperty(\"finalTrigger\")){this.applyAndTriggerFinalFilter(i);}else{return;}}else{this.applyAndTriggerFinalFilter(i);}},applyAndTriggerFinalFilter:function(i){var s=this.getView().byId(\"idOrderGanttSmartFilterBar\");var j=this.getView().byId(\"idOrderTreeTable\");var k=j.getBinding(\"rows\");var m=s.getFilters();var n={};n=this.getAdditionalDateRangeFilterBlock();var p=this._oOwnerComponent.getModel(\"UIModel\");if(p.getProperty(\"/showUtilizationIndicator\")||p.getProperty(\"/showNonWorkingTimes\")){this._setThresholdForModelData();}if(k.aSorters.length>0){if(j.getSortedColumns().length!==0){if(this._afilterFieldGroups.indexOf(j.getSortedColumns()[0].getSortProperty())!==-1||j.getSortedColumns()[0].getSortProperty()===\"WorkCenter\"||j.getSortedColumns()[0].getSortProperty()===\"MaintenanceOrderOperation\"){this.sSortOperationField=j.getSortedColumns()[0].getSortProperty();this.sOperationSortOrder=j.getSortedColumns()[0].getSortOrder();}}k.aSorters[0].sPath=this.sSortOrderField;k.aSorters[0].bDescending=this.sOrderSortOrder===\"Descending\";}if(m&&m.length===1){var M=new sap.ui.model.Filter({filters:[m[0],n],and:true});var v=M.aFilters[0].aFilters;var w=0;for(;w<v.length;w++){if((v[w].sPath&&v[w].sPath===\"PeriodType\")||(v[w].aFilters&&v[w].aFilters[0].sPath===\"PeriodType\")){v.splice(w,1);break;}}if(v.length===0){M.aFilters.splice(0,1);}k.filter(M,sap.ui.model.FilterType.Application);}else{k.filter(n,sap.ui.model.FilterType.Application);}var x=false;this.setFinalSelectForOrderRequest(x);k.refresh();this.bindCalendarDefHelper();if(!this._bSubmitofDeferredRequestsDone){this._submitDelayedRequests();}this._sPerformanceFilterOnExpand=null;this.disableButtons();},onAssignedFiltersChanged:function(i){var s=this.getView().byId(\"idOrderGanttSmartFilterBar\");var p=s.getControlByKey(\"PeriodType\");if(p&&p.getValueState()===sap.ui.core.ValueState.Error){p.setValueStateText(this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(\"timePeriodFilterError\"));}var j=this.getView().byId(\"statusText\");var k=i.getSource();if(j&&k){var m=k.retrieveFiltersWithValuesAsText();j.setText(m);}},onAfterVariantLoad:function(i){var s=i.getSource();var j=i.getParameters().context;if(j===\"INIT\"&&sap.ui.core.routing.HashChanger.getInstance().getCurrentNavigationState().oldHash.indexOf(\"WorkCenterUtilization-display\")!==-1){s.clear();this.setNavParamstoFilterBar();var p={finalTrigger:true};if(s.isCurrentVariantExecuteOnSelectEnabled()===true){s.fireSearch(p);}}if((!j&&s.getControlByKey(\"PeriodType\").getValue()===\"\")||(j===\"RESET\"&&s.isCurrentVariantStandard())){this.setDefaultDateRange();}},onSmartFilterInitialized:function(i){var s=i.getSource();if(s.getCurrentVariantId()===\"\"&&s.getControlByKey(\"PeriodType\").getValue()===\"\"){this.setDefaultDateRange();}this._oAppStateInstance=e.getInstance();this._oAppStateInstance.retrieveAppState().then(function(j,k,n){if(n===sap.ui.generic.app.navigation.service.NavType.iAppState){this._isIAppState=true;this.setAppState(j);this._bIsAppStateApplied=true;this._delayedTriggerSearch();}else{this._isIAppState=false;this.setAppState(this._oAppStateData);this._bIsAppStateApplied=true;this._delayedTriggerSearch();}}.bind(this)).fail(function(){this._bIsAppStateApplied=true;this._delayedTriggerSearch();}.bind(this));},setDefaultDateRange:function(){var j={};var s=this.getView().byId(\"idOrderGanttSmartFilterBar\");var p=s.getControlByKey(\"PeriodType\");var i=new Date();var k=U.getEndDateNext();var m=i;var n=k;var v={};v.data={};j.PeriodType={};v.name=\"custom.oDateRange\";v.data.calendarType=\"Gregorian\";v.data.key=\"PeriodType\";v.data.value1=m;v.data.value2=n;if(U.isMockRun()&&p.getSelectedKey()===\"DATERANGE\"){v.data.operation=\"DATERANGE\";}else{v.data.operation=\"FISCALPERIOD0\";}j.PeriodType.conditionTypeInfo=v;s.setFilterData(j);},dateObjectCopy:function(D){return new Date(JSON.parse(JSON.stringify(D)));},getDatePerTimeAxisFormat:function(D){var y=D.getFullYear().toString();var M=this.pad(D.getMonth()+1,2);var i=this.pad(D.getDate(),2);var j=this.pad(D.getHours(),2);var m=this.pad(D.getMinutes(),2);var s=this.pad(D.getSeconds(),2);return y+M+i+j+m+s;},pad:function(n,i){var s=\"\"+n;while(s.length<i){s=\"0\"+s;}return s;},onSortRequest:function(i,s){var j=this.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\");var k=null;var m=null;var n=null;var _,p;if(s){k=this.getView().byId(s.id);m=s.sortProperty;n=s.sortOrder;}else{k=i.getParameters(\"bindingParams\").column;m=k.getSortProperty();n=i.getParameters(\"bindingParams\").sortOrder;this._onPersChangeForColumns(i);}if(this._afilterFieldGroups.indexOf(m)>=0){if(i){i.preventDefault();}this.sSortOperationField=m;this.sOperationSortOrder=n;_=new sap.ui.model.Sorter(this.sSortOrderField,this.sOrderSortOrder===\"Descending\");p=[_];this.updateColumnSortStatus(k,n);j.sort(p);}else{this.sSortOrderField=m;this.sOrderSortOrder=n;if(m===\"MaintenanceOrder\"){this.sSortOperationField=\"MaintenanceOrderOperation\";this.sOperationSortOrder=n;}if(m===\"ProcessingStatus\"){this.sSortOperationField=this.sSortOrderField=m;this.sOperationSortOrder=this.sOrderSortOrder=n;}if(m===\"FunctionalLocationName\"){this.sSortOperationField=\"OpFunctionalLocationName\";this.sSortOrderField=m;this.sOperationSortOrder=this.sOrderSortOrder=n;}if(m===\"EquipmentName\"){this.sSortOperationField=\"OperationEquipmentName\";this.sSortOrderField=m;this.sOperationSortOrder=this.sOrderSortOrder=n;}if(m===\"TechnicalObjectDescription\"){this.sSortOperationField=\"OperationTechnicalObjectDesc\";this.sSortOrderField=m;this.sOperationSortOrder=this.sOrderSortOrder=n;}if(m===\"OrderSystemConditionText\"){this.sSortOperationField=\"OperationSystemConditionText\";this.sSortOrderField=m;this.sOperationSortOrder=this.sOrderSortOrder=n;}if(m===\"MainWorkCenter\"){this.sSortOperationField=\"WorkCenter\";this.sOperationSortOrder=n;}if(m===\"MaintOrdProcessPhaseCode\"){this.sSortOperationField=\"MaintOrdOpProcessPhaseCode\";this.sOperationSortOrder=n;}if(m===\"MaintOrdProcessSubPhaseCode\"){this.sSortOperationField=\"MaintOrdOpProcessSubPhaseCode\";this.sOperationSortOrder=n;}}var v=false;if(j.sCustomParams!==this._sSelectString){this.setFinalSelectForOrderRequest(v);}if(s){_=new sap.ui.model.Sorter(this.sSortOrderField,this.sOrderSortOrder===\"Descending\");p=[_];this.updateColumnSortStatus(k,n);j.sort(p);}this._sPerformanceFilterOnExpand=null;},updateColumnSortStatus:function(s,i){var j=this.getView().byId(\"idOrderTreeTable\").getColumns();j.forEach(function(k){if(k.getSorted){k.setSorted(false);k._updateIcons();}});s.setSorted(true);s.setSortOrder(i);s._updateIcons();},expandSelected:function(j){var k=this.getView().byId(\"idOrderTreeTable\");var s=k.getSelectedIndices();var m=[];var n=this._getSelectedRowBindingContext(k);for(var i=0;i<n.length;i++){m.push(n[i].getProperty().MaintenanceOrder);}this._addPerformanceFilterOnExpand(m);k.expand(s);},collapseSelected:function(i){var j=this.getView().byId(\"idOrderTreeTable\");var s=j.getSelectedIndices();j.collapse(s);},onColumnSelect:function(i){var j=i.getParameters().column;var k=j.getMenu();k.attachItemSelect(k,this._onItemInColumnMenuSelected,this);},_onItemInColumnMenuSelected:function(j,k){var s=j.getParameters().item.getText();var m;var n=j.getParameters().item.getIcon();var p=this.getView().byId(\"idOrderTreeTable\");var v=p.getColumns();if(!n&&!j.getParameters().item.getSubmenu()){for(var i=0;i<v.length;i++){if(v[i].getLabel().getText()===s&&v[i].getVisible()){m=v[i].getSortProperty();break;}}var w=false;this.setFinalSelectForOrderRequest(w,m);this._bNewColumnAdded=true;this._sPerformanceFilterOnExpand=null;this._refreshBinding(true);}},onColumnVisibilityChanged:function(i){var s=i.getParameters().column;if(s.getIndex()===0){i.preventDefault();U.addMessage(this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(\"CannotHideOrderColumn\"),sap.ui.core.MessageType.Warning,C.sDisplayTypeMessageBox);}else if(s.getVisible()&&s.getSorted()){s.setSorted(false);var j=this.getView().byId(\"idOrderTreeTable\").getBinding();j.aSorters=[];this.initSortOrderAndSortOperationFields();}},handleLinkPress:function(i){var j=i.getSource().getBindingContext().getProperty(\"OrderOperationRowLevel\");if(j===0){this._oOrderPopupDelegate=new O();this.getView().getModel().setUseBatch(true);sap.ui.getCore().getMessageManager().registerObject(this._oOrderPopupDelegate.getFragment(),true);if(this._sOrderAppStateFields){this._oOrderPopupDelegate.setContentToFragment(i,this._oOwnerComponent,this._oOwnerComponent.getModel(\"readModel\"),this._sOrderAllTechMandatoryFields+\",\"+this._sOrderAppStateFields+\",\"+this._sOrderAdditionalPopOverFields+\",\"+this._aExpandFields.toString());}else{this._oOrderPopupDelegate.setContentToFragment(i,this._oOwnerComponent,this._oOwnerComponent.getModel(\"readModel\"),this._sOrderAllTechMandatoryFields+\",\"+this._sOrderAdditionalPopOverFields+\",\"+this._aExpandFields.toString());}}else{this._oOperationPopupDelegate=new a();this.getView().getModel().setUseBatch(true);sap.ui.getCore().getMessageManager().registerObject(this._oOperationPopupDelegate.getFragment(),true);this._oOperationPopupDelegate.setContentToFragment(i,this._oOwnerComponent,this._oOwnerComponent.getModel(\"readModel\"));}},handleFuncLocLinkPress:function(i,j){this._oInnerAppState={customData:this._getCurrentAppState()};this._oFunctionalLocationPopupDelegate=new b();this.getView().getModel().setUseBatch(true);sap.ui.getCore().getMessageManager().registerObject(this._oFunctionalLocationPopupDelegate.getFragment(),true);this._oFunctionalLocationPopupDelegate.setContentToFragment(i,this._oOwnerComponent,this._oOwnerComponent.getModel(\"readModel\"),this._oInnerAppState,j);},handleEquipmentLinkPress:function(i,j){this._oInnerAppState={customData:this._getCurrentAppState()};this._oEquipmentPopupDelegate=new E();this.getView().getModel().setUseBatch(true);sap.ui.getCore().getMessageManager().registerObject(this._oEquipmentPopupDelegate.getFragment(),true);this._oEquipmentPopupDelegate.setContentToFragment(i,this._oOwnerComponent,this._oOwnerComponent.getModel(\"readModel\"),this._oInnerAppState,j);},handleTechnicalObjectLinkPress:function(i){var s=i.getSource().getBindingContext().getProperty(\"TechObjIsEquipOrFuncnlLoc\");var j=true;if(s===\"EAMS_EQUI\"){this.handleEquipmentLinkPress(i,j);}else{this.handleFuncLocLinkPress(i,j);}},openFilter:function(){this._oDelegate=new A();var i=this.getView().getModel(\"i18n\");this._oDelegate.getFragment().setModel(i,\"i18n\");this.getView().getModel().setUseBatch(true);sap.ui.getCore().getMessageManager().registerObject(this._oDelegate.getFragment(),true);this._oDelegate.getFragment().setModel(this.getView().getModel());this.getView().getModel().setRefreshAfterChange(false);this._oDelegate.getFragment().setContentWidth(\"41%\");this._oDelegate.getFragment().setBusy(true);this._oDelegate.getFragment().open();if(this._oMessageHandlerResponseModel){var m=this._oMessageHandlerResponseModel;m.setProperty(\"/bIsDialogOpen\",true);this._oDelegate.getFragment().attachAfterClose(function(){m.setProperty(\"/bIsDialogOpen\",false);});}},selectTableRows:function(j){var k=this.getView().byId(\"idOrderTreeTable\");var m=j.getParameter(\"rowIndices\");for(var i=0;i<m.length;i++){var p=decodeURIComponent(k.getContextByIndex(m[i]).sPath);if(p){var s=p;if(p.substring(0,1)===\"/\"){s=p.substring(1);}var M=this._getMessagesFromTarget(s);sap.ui.getCore().getMessageManager().removeMessages(M);}}this.updateToolbarButtonsFromSelectedRows();},updateToolbarButtonsFromSelectedRows:function(){var D=this.getView().byId(\"idButtonDispatch\");var j=this.getView().byId(\"idButtonCancDispatch\");var k=this.getView().byId(\"idButtonChange\");var m=this.getView().byId(\"idRemoveConstraints\");var s=this.getView().byId(\"idScheduleOrder\");var n=this.getView().byId(\"idOrderTreeTable\");var p=n.getSelectedIndices();if(!p||p.length===0||p[0].length===0){D.setEnabled(false);j.setEnabled(false);k.setEnabled(false);m.setEnabled(false);s.setEnabled(false);return;}var v=this._getSelectedRowBindingContext(n);var w=false;var x=false;var y=false;var z=false;var H=false;for(var i=0;i<v.length;i++){var K=v[i].getObject();if(K.OrderOperationRowLevel===0){x=true;}else if(U.checkIfOperationIsWithinTimePeriod(K,this.oPeriodTypeDates)){continue;}else{if(K.HasError){this.operationValidation(K);}else{z=true;switch(K.ProcessingStatus){case C.dispatchedStatusCode:y=true;break;case C.dueStatusCode:H=true;break;}if(K.OpBscStartDateConstraintType&&K.OrderOperationStartDateTime){w=true;}}}}if(x&&!z){D.setEnabled(false);j.setEnabled(false);k.setEnabled(false);m.setEnabled(false);s.setEnabled(true);}else{k.setEnabled(z);j.setEnabled(y);D.setEnabled(H);m.setEnabled(w);s.setEnabled(x);}},_getMessagesFromTarget:function(s){var m=sap.ui.getCore().getMessageManager().getMessageModel().getProperty(\"/\");var M=[];m.forEach(function(i){if(i.target===s){M.push(i);}});return M;},operationValidation:function(i){var j=i.HasError;var s=i.ProcessingStatus;var m=i.MaintenanceOrder;var k=i.MaintenanceOrderOperation;var n=i.MaintenanceOrderSubOperation;var p=\"C_RSHOrdersAndOperations\"+\"(\"+\"'\"+i.ID+\"'\"+\")\";var v=this.getView().getModel(\"i18n\").getResourceBundle();if(j&&s===C.inProcessCode){if(n){U.addMessage(v.getText(\"ErrorMessageInProcessStatusSubOper\",[m,k,n]),sap.ui.core.MessageType.Information,C.sDisplayTypeMessagePopover,p,true);}else{U.addMessage(v.getText(\"ErrorMessageInProcessStatusOper\",[m,k,null]),sap.ui.core.MessageType.Information,C.sDisplayTypeMessagePopover,p,true);}}},pressScheduleOrderButton:function(){var j=sap.ui.getCore().getEventBus();j.subscribeOnce(C.sLibraryChannel,C.sServerMessageToUpdateEntity,this.prepareTargetForRefreshGantt,this);var k=this.getView().byId(\"idOrderGanttContainer\");var m=this.getView().byId(\"idOrderTreeTable\");var s=this._getSelectedRowBindingContext(m);var n=this.getView().getModel(\"i18n\").getResourceBundle();var p=false;var v;for(var i=0;i<s.length;i++){var w=s[i].getObject();if(w.OrderOperationRowLevel===0){if(p===true){U.addMessage(n.getText(\"SelectOnlyOneOrder\"),sap.ui.core.MessageType.Error,C.sDisplayTypeMessageBox);return;}else{p=true;v=w;}}}if(v.OrderOperationRowLevel!==0||v.ProcessingStatus===C.inProcessCode){U.addMessage(n.getText(\"InProcessOrderSch\"),sap.ui.core.MessageType.Error,C.sDisplayTypeMessageBox);return;}k.setBusy(true);var x=\"/ScheduleMaintenanceOrder\";var y=this.getView().getModel(\"relationshipModel\");var z={MaintenanceOrder:v.MaintenanceOrder};var D=this;y.callFunction(x,{method:\"POST\",urlParameters:z,success:function(H){D.onScheduleSuccess(v);},error:function(H){D.onScheduleFailed(v);}});},onScheduleSuccess:function(D){var i={};i.itemHashMapContainer=[];i.itemHashMapContainer.push(D.MaintenanceOrder);i.parameters={};i.parameters.bRefreshOfSourceAppRequired=true;var j=this.getView().getModel(\"i18n\").getResourceBundle();U.addMessage(j.getText(\"ScheduleSuccess\"),sap.ui.core.MessageType.Success,C.sDisplayTypeMessageToast);this.prepareTargetForRefreshGantt(\"\",\"\",i);this.getView().byId(\"idOrderGanttContainer\").setBusy(false);},onScheduleFailed:function(i){var j=this.getView().getModel(\"i18n\").getResourceBundle();U.addMessage(j.getText(\"ScheduleError\"),sap.ui.core.MessageType.Error,C.sDisplayTypeMessagePopover);this.getView().byId(\"idOrderGanttContainer\").setBusy(false);},pressDispatchButton:function(j){var k=sap.ui.getCore().getEventBus();k.subscribeOnce(C.sLibraryChannel,C.sServerMessageToUpdateEntity,this.prepareTargetForRefreshGantt,this);var m=this.getView().byId(\"idOrderGanttContainer\");var v=this.getView().getModel();var n=this.getView().byId(\"idOrderTreeTable\");var s=this._getSelectedRowBindingContext(n);m.setBusy(true);var p=null;var w=false;if(j.getSource().getId().includes(\"idButtonDispatchAction\")){this._bActionInitiatedFromContextMenu=true;var x=this._oShapeForOpContextMenu.getBindingContext().getPath();var y=this.getModel().getData(x);p=y;if(!p.HasError){sap.ui.getCore().getMessageManager().removeAllMessages();this.statusCommon.setOperationDispatchStatus(p,v,w);}else{this.operationValidation(p);}}else{for(var i=0;i<s.length;i++){p=s[i].getObject();if(p.OrderOperationRowLevel===0||p.ProcessingStatus===C.dispatchedStatusCode){continue;}if(U.checkIfOperationIsWithinTimePeriod(p,this.oPeriodTypeDates)){continue;}if(!p.HasError){sap.ui.getCore().getMessageManager().removeAllMessages();this.statusCommon.setOperationDispatchStatus(p,v,w);}else{this.operationValidation(p);}}}this.statusCommon.triggerBackendCall();},pressCancDispatchButton:function(j){var k=sap.ui.getCore().getEventBus();k.subscribeOnce(C.sLibraryChannel,C.sServerMessageToUpdateEntity,this.prepareTargetForRefreshGantt,this);var v=this.getView().getModel();var m=this.getView().byId(\"idOrderGanttContainer\");var n=this.getView().byId(\"idOrderTreeTable\");var s=this._getSelectedRowBindingContext(n);m.setBusy(true);var p=null;var w=false;if(j.getSource().getId().includes(\"idButtonCancDispatchAction\")){this._bActionInitiatedFromContextMenu=true;var x=this._oShapeForOpContextMenu.getBindingContext().getPath();var y=this.getModel().getData(x);p=y;if(!p.HasError){sap.ui.getCore().getMessageManager().removeAllMessages();this.statusCommon.cancelOperationDispatchStatus(p,v,w);}else{this.operationValidation(p);}}else{for(var i=0;i<s.length;i++){p=s[i].getObject();if(p.OrderOperationRowLevel===0||p.ProcessingStatus===C.dueStatusCode){continue;}if(U.checkIfOperationIsWithinTimePeriod(p,this.oPeriodTypeDates)){continue;}if(!p.HasError){sap.ui.getCore().getMessageManager().removeAllMessages();this.statusCommon.cancelOperationDispatchStatus(p,v,w);}else{this.operationValidation(p);}}}this.statusCommon.triggerBackendCall();},pressChangeOperationsButton:function(i){var j=sap.ui.getCore().getEventBus();if(i.getSource().getId().includes(\"idButtonChangeAction\")){this._bActionInitiatedFromContextMenu=true;}j.subscribeOnce(C.sLibraryChannel,C.sServerMessageToUpdateEntity,this.prepareTargetForRefreshGantt,this);this._oChangeOperationsDelegate=new c();this.getView().getModel().setUseBatch(true);sap.ui.getCore().getMessageManager().registerObject(this._oChangeOperationsDelegate.getFragment(),true);this._oChangeOperationsDelegate.setContentToFragment(i,this._oOwnerComponent,this.getView(),this.statusCommon,this.oPeriodTypeDates,this._oShapeForOpContextMenu);},pressRemoveConstraintsButton:function(j){var k=sap.ui.getCore().getEventBus();k.subscribeOnce(C.sLibraryChannel,C.sServerMessageToUpdateEntity,this.prepareTargetForRefreshGantt,this);var v=this.getView().getModel();var m=this.getView().byId(\"idOrderGanttContainer\");var n=this.getView().byId(\"idOrderTreeTable\");var s=this._getSelectedRowBindingContext(n);m.setBusy(true);var p=null;if(j.getSource().getId().includes(\"idButtonRemoveConstraintsAction\")){this._bActionInitiatedFromContextMenu=true;var w=this._oShapeForOpContextMenu.getBindingContext().getPath();var x=this.getModel().getData(w);p=x;if(!p.HasError){sap.ui.getCore().getMessageManager().removeAllMessages();this.statusCommon.removeOperationConstraints(p,v);}else{this.operationValidation(p);}}else{for(var i=0;i<s.length;i++){p=s[i].getObject();if(U.checkIfOperationIsWithinTimePeriod(p,this.oPeriodTypeDates)){continue;}if(!p.HasError){sap.ui.getCore().getMessageManager().removeAllMessages();this.statusCommon.removeOperationConstraints(p,v);}else{this.operationValidation(p);}}}this.statusCommon.triggerBackendCall();},_getSelectedRowBindingContext:function(j){var s=[];var k=j.getSelectedIndices();var m=j.getBinding(\"rows\");for(var i=0;i<k.length;i++){if(m.getContextByIndex(k[i])){s.push(m.getContextByIndex(k[i]));}}return s;},_requestSent:function(i){this.requestProcessingHandler(this.onBeforeRequestCompleted,this.getView().byId(\"idOrderGanttContainer\"),i);},_requestComplete:function(i){if(i.getParameter(\"requests\")){var j=i.getParameter(\"requests\")[0];if(j.url.indexOf(\"C_RSHEAMUserVariant\")!==-1&&j.method!==\"GET\"){var k=this.getView().byId(\"idOrderTreeTable\");var m=k.getBinding(\"rows\");if(m.aSorters.length!==0){m.aSorters[0].sPath=this.sSortOrderField;m.aSorters[0].bDescending=this.sOrderSortOrder===\"Descending\";}}else if(j.url.indexOf(\"C_RSHOrdersAndOperations\")!==-1&&j.method===\"GET\"){var n=this.getView().getModel(\"i18n\").getResourceBundle();if(this._bNewColumnAdded){U.addMessage(n.getText(\"FullRefreshAfterColumnAdded\"),sap.ui.core.MessageType.Information,C.sDisplayTypeMessageToast);this._bNewColumnAdded=false;}}}if(i.getParameter(\"requests\")&&(j.url.indexOf(\"I_MaintOrderOperationTP\")===-1&&j.method!==\"POST\")){this.requestProcessingHandler(this.onAfterRequestCompleted,this.getView().byId(\"idOrderGanttContainer\"),i);if(this.onAfterDataRecievedFn){this.onAfterDataRecievedFn();this.onAfterDataRecievedFn=null;}}},onBeforeRequestCompleted:function(i){i.setBusy(true);},onAfterRequestCompleted:function(i){i.setBusy(false);},requestProcessingHandler:function(H,j,k){if(j){var m=k.getParameter(\"requests\");var p=false;for(var i=0;m&&i<m.length;i++){p=m[i].url.indexOf(\"C_RSHOrdersAndOperations\")!==-1;if(p){H(j);return;}}}},_onAfterActionsCompleted:function(i){if(i&&i.bRefreshOfSourceAppRequired){if(this._bActionInitiatedFromContextMenu){this.onAfterDataRecievedFn=i.onAfterTableBindFn;}else{this.disableButtons();this.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\").clearSelection();this.onAfterDataRecievedFn=i.onAfterTableBindFn;}}else{this.getView().byId(\"idOrderGanttContainer\").setBusy(false);if(i&&i.onAfterTableBindFn){i.onAfterTableBindFn();}}},disableButtons:function(){var D=this.getView().byId(\"idButtonDispatch\");var i=this.getView().byId(\"idButtonCancDispatch\");var j=this.getView().byId(\"idButtonChange\");var s=this.getView().byId(\"idScheduleOrder\");var k=this.getView().byId(\"idRemoveConstraints\");D.setEnabled(false);i.setEnabled(false);j.setEnabled(false);s.setEnabled(false);k.setEnabled(false);},getShapeId:function(p,s,n){return p+\"\"+s+\"\"+n;},getStrokeFill:function(s,v){if(v===\"X\"){return\"@sapNegativeColor\";}else if(s===\"X\"){return\"@sapTextColor\";}else{return\"@sapNeutralColor\";}},getRelationToolTip:function(n,p,P,s,i,j){var k=this.getView().getModel(\"i18n\").getResourceBundle();if(j===\"X\"){switch(n){case sap.gantt.simple.RelationshipType.StartToStart:return k.getText(\"violatedS2SRelTooltip\",[p,P,s,i]);case sap.gantt.simple.RelationshipType.StartToFinish:return k.getText(\"violatedS2FRelTooltip\",[p,P,s,i]);case sap.gantt.simple.RelationshipType.FinishToStart:return k.getText(\"violatedF2SRelTooltip\",[p,P,s,i]);case sap.gantt.simple.RelationshipType.FinishToFinish:return k.getText(\"violatedF2FRelTooltip\",[p,P,s,i]);default:return\"\";}}else{switch(n){case sap.gantt.simple.RelationshipType.StartToStart:return k.getText(\"normalS2SRelTooltip\",[p,P,s,i]);case sap.gantt.simple.RelationshipType.StartToFinish:return k.getText(\"normalS2FRelTooltip\",[p,P,s,i]);case sap.gantt.simple.RelationshipType.FinishToStart:return k.getText(\"normalF2SRelTooltip\",[p,P,s,i]);case sap.gantt.simple.RelationshipType.FinishToFinish:return k.getText(\"normalF2FRelTooltip\",[p,P,s,i]);default:return\"\";}}},_addPaddingAtStart:function(L,s){if(s.length===L){return s;}else{return this._addPaddingAtStart(L,\"0\"+s);}},_getInternalRelationshipType:function(s){switch(s){case\"FinishToStart\":return\"NF\";case\"StartToStart\":return\"AF\";case\"FinishToFinish\":return\"EF\";case\"StartToFinish\":return\"SF\";default:return\" \";}},createRelationship:function(i){var p=sap.gantt.misc.Utility.parseUid;var m=this.getView().getModel();var s=i.getParameter(\"fromShapeUid\");var P=p(s);var j=m.getObject(P.shapeDataName);var k=i.getParameter(\"toShapeUid\");P=p(k);var n=m.getObject(P.shapeDataName);var v=i.getParameter(\"type\");var w=this._getInternalRelationshipType(v);var x={\"MaintenanceOrder\":j.MaintenanceOrder,\"MaintenanceOrderOperation\":j.MaintenanceOrderOperation,\"MaintenanceOrderSubOperation\":\"\",\"MaintOrdOperationIsSuccessor\":false,\"RelatedMaintenanceOrder\":n.MaintenanceOrder,\"RelatedMaintOrderOperation\":n.MaintenanceOrderOperation,\"OrderOpRelationshipIntType\":w};var y=this.getView().getModel(\"relationshipModel\");var z=this;var D=z.getOwnerComponent().getModel(\"i18n\").getResourceBundle();var H={success:function(K){var L={};L.itemHashMapContainer=[];L.itemHashMapContainer.push(j.MaintenanceOrder);L.itemHashMapContainer.push(n.MaintenanceOrder);L.parameters={};L.parameters.bRefreshOfSourceAppRequired=true;U.addMessage(D.getText(\"RelationshipCreationSuccess\"),sap.ui.core.MessageType.Success,C.sDisplayTypeMessageToast);z.prepareTargetForRefreshGantt(\"\",\"\",L);},error:function(K){z.getView().byId(\"idOrderGanttContainer\").setBusy(false);}};this.getView().byId(\"idOrderGanttContainer\").setBusy(true);y.create(\"/C_RSHMaintenanceOrdOperationTP(MaintenanceOrder='\"+this._addPaddingAtStart(12,j.MaintenanceOrder)+\"',MaintenanceOrderOperation='\"+j.MaintenanceOrderOperation+\"',MaintenanceOrderSubOperation='\"+encodeURIComponent(\" \")+\"')/to_MaintOrderOpRelationship\",x,H);},onFirstVisibleRowChanged:function(i){this._refreshBinding(false);if(i.getSource().getBinding(\"rows\")){if(this._sPerformanceFilterOnExpand){i.getSource().getBinding(\"rows\").sFilterParams=this._sExistingFilterString;this._sPerformanceFilterOnExpand=null;}this.setFinalSelectForOrderRequest();}this._closeContextMenus();},onVisibleHorizonUpdate:function(){this._closeContextMenus();},_closeContextMenus:function(){if(this._oShapeContextMenu&&this._oShapeContextMenu.isOpen()){this._oShapeContextMenu.close();}if(this.oRelationshipActionSheet&&this.oRelationshipActionSheet.isPopoverOpen()){this.oRelationshipActionSheet.closePopover();}},_onGanttSettingDialogChange:function(L,s,i){var j=this._oOwnerComponent.getModel(\"UIModel\");var p;Object.keys(i).forEach(function(v){if(v!==\"enableNowLine\"||v!==\"enableCursorLine\"||v!==\"enableVerticalLine\"||v!==\"enableStatusBar\"){p=\"/\"+v;j.setProperty(p,i[v]);}});if(j.getProperty(\"/showUtilizationIndicator\")||j.getProperty(\"/showNonWorkingTimes\")){this._setThresholdForModelData();}this.updateRelationshipsAndUtilizations();this.bindCalendarDefHelper();var k=false;if(!(i.condensedModeActive===undefined)){this._activateCondensedMode(k);k=true;}if(i.enableNowLine!==undefined||i.enableCursorLine!==undefined||i.enableVerticalLine!==undefined||i.enableStatusBar!==undefined){var m=this.getView().byId(\"idOrderGanttContainer\");var n={enableNowLine:i.enableNowLine!==undefined?i.enableNowLine:m.getEnableNowLine(),enableCursorLine:i.enableCursorLine!==undefined?i.enableCursorLine:m.getEnableCursorLine(),enableVerticalLine:i.enableVerticalLine!==undefined?i.enableVerticalLine:m.getEnableVerticalLine(),enableStatusBar:i.enableStatusBar!==undefined?i.enableStatusBar:m.getEnableStatusBar()};m.applySettings(n);k=false;}if(k){this.getView().byId(\"idOrderGanttContainer\").rerender();}else{sap.ui.getCore().getEventBus().subscribeOnce(this.sOrderGanttChannel,this.sIndiviudalActionOnGanttChange,this.updateToolbarButtonsFromSelectedRows,this);}this.persistSettingsP13n();},onCustomGanttSettingPress:function(i){var v=this.getView();var j=sap.ui.getCore().getEventBus();var s=this.getOwnerComponent().getModel(\"GanttSettingConfiguration\");var k=this._getGanttSettingValues();var m=new r(s.getData(),k,v);j.subscribeOnce(C.sLibraryChannel,C.sGanttSettingsChanged,this._onGanttSettingDialogChange,this);m.openDialog();},_getGanttSettingValues:function(){var s={};var i=this.getView().byId(\"idOrderGanttContainer\");var j=this._oOwnerComponent.getModel(\"UIModel\");s.enableNowLine=i.getEnableNowLine();s.enableCursorLine=i.getEnableCursorLine();s.enableVerticalLine=i.getEnableVerticalLine();s.enableStatusBar=i.getEnableStatusBar();s.bCondensedModeActive=j.getProperty(\"/condensedModeActive\");s.bShowNonWorkingTimes=j.getProperty(\"/showNonWorkingTimes\");s.bShowUtilizationIndicator=j.getProperty(\"/showUtilizationIndicator\");s.bShowFinalDueDate=j.getProperty(\"/showFinalDueDate\");s.bShowImpRel=j.getProperty(\"/showImpRel\");s.bShowExpRel=j.getProperty(\"/showExpRel\");s.bShowRestrictions=j.getProperty(\"/showRestrictions\");return s;},_activateCondensedMode:function(i){var j=this._oOwnerComponent.getModel(\"UIModel\");if(j.getProperty(\"/condensedModeActive\")){this.getView().addStyleClass(this.getOwnerComponent().getContentDensityAdditionalClass());}else{this.getView().removeStyleClass(this.getOwnerComponent().getContentDensityAdditionalClass());}if(i){this.getView().byId(\"idOrderGanttContainer\").rerender();}},updateRelationshipsAndUtilizations:function(){var i=this._oOwnerComponent.getModel(\"UIModel\");var j=this.byId(\"OrderGntRowStgID\");var k=this.byId(\"idOrderTreeTable\");if(!i.getProperty(\"/showImpRel\")&&!i.getProperty(\"/showExpRel\")){if(j.getBindingInfo(\"relationships\")){this._previousRelationshipBinding=j.getBindingInfo(\"relationships\");j.unbindAggregation(\"relationships\");k.setRowSettingsTemplate(null);k.setRowSettingsTemplate(j);}}else{if(!j.getBindingInfo(\"relationships\")){var m=false;this._sPerformanceFilterOnExpand=null;this.setFinalSelectForOrderRequest(m);k.getBinding(\"rows\").refresh();j.bindAggregation(\"relationships\",this._previousRelationshipBinding);k.setRowSettingsTemplate(null);k.setRowSettingsTemplate(j);}}if(!i.getProperty(\"/showUtilizationIndicator\")){if(j.getBindingInfo(\"shapes4\")){this._previousUtilizationBinding=j.getBindingInfo(\"shapes4\");j.unbindAggregation(\"shapes4\");k.setRowSettingsTemplate(null);k.setRowSettingsTemplate(j);}}else{if(!j.getBindingInfo(\"shapes4\")){m=false;this._sPerformanceFilterOnExpand=null;this.setFinalSelectForOrderRequest(m);k.getBinding(\"rows\").refresh();j.bindAggregation(\"shapes4\",this._previousUtilizationBinding);k.setRowSettingsTemplate(null);k.setRowSettingsTemplate(j);}}},persistSettingsP13n:function(){var i=this._oOwnerComponent.getModel(\"UIModel\");var j=this.byId(\"idOrderGanttContainer\");var s={};s.bShowImpRel=i.getProperty(\"/showImpRel\");s.bShowExpRel=i.getProperty(\"/showExpRel\");s.bShowNonWorkingTimes=i.getProperty(\"/showNonWorkingTimes\");s.bShowCriticalPath=i.getProperty(\"/showCriticalPath\");s.bCondensedModeActive=i.getProperty(\"/condensedModeActive\");s.enableNowLine=j.getEnableNowLine();s.enableCursorLine=j.getEnableCursorLine();s.enableVerticalLine=j.getEnableVerticalLine();s.enableStatusBar=j.getEnableStatusBar();s.bShowFinalDueDate=i.getProperty(\"/showFinalDueDate\");s.bShowRestrictions=i.getProperty(\"/showRestrictions\");s.bShowUtilizationIndicator=i.getProperty(\"/showUtilizationIndicator\");f.getInstance().getFeatureModel(C.sGanttP13nSettings).setProperty(\"/\",s);f.getInstance().saveContainer();},_refreshBinding:function(i){var j=this.getView().byId(\"idOrderTreeTable\");var k=j.getBinding(\"rows\");if(k){if(k.aSorters&&k.aSorters.length>0){k.aSorters[0].sPath=this.sSortOrderField;k.aSorters[0].bDescending=this.sOrderSortOrder===\"Descending\"?true:false;}if(i){k.refresh(true);}}},_setCondensedMode:function(){var i=this._oOwnerComponent.getModel(\"UIModel\");if(i.getProperty(\"/condensedModeActive\")){this.getView().addStyleClass(this.getOwnerComponent().getContentDensityAdditionalClass());this.getView().byId(\"idOrderGanttContainer\").rerender();}},_updateUiModelFromGanttSettings:function(i,s){if(s&&s.bShowImpRel!==null&&s.bShowImpRel!==undefined){i.setProperty(\"/showImpRel\",s.bShowImpRel);i.setProperty(\"/showExpRel\",s.bShowExpRel);i.setProperty(\"/showCriticalPath\",false);i.setProperty(\"/showNonWorkingTimes\",s.bShowNonWorkingTimes);i.setProperty(\"/condensedModeActive\",s.bCondensedModeActive);i.setProperty(\"/showFinalDueDate\",s.bShowFinalDueDate);i.setProperty(\"/showRestrictions\",s.bShowRestrictions);i.setProperty(\"/showUtilizationIndicator\",s.bShowUtilizationIndicator);}else{i.setProperty(\"/showImpRel\",false);i.setProperty(\"/showExpRel\",false);i.setProperty(\"/showCriticalPath\",false);i.setProperty(\"/showNonWorkingTimes\",false);i.setProperty(\"/condensedModeActive\",false);i.setProperty(\"/showFinalDueDate\",false);i.setProperty(\"/showRestrictions\",false);i.setProperty(\"/showUtilizationIndicator\",false);}},_setupSettings:function(){var i=this._oOwnerComponent.getModel(\"UIModel\");var s=f.getInstance().getFeatureModel(C.sGanttP13nSettings).getProperty(\"/\",\"oSettings\");this._updateUiModelFromGanttSettings(i,s);if(s.enableNowLine!==undefined||s.enableCursorLine!==undefined||s.enableVerticalLine!==undefined){var j=this.getView().byId(\"idOrderGanttContainer\");var m={enableNowLine:s.enableNowLine!==undefined?s.enableNowLine:j.getEnableNowLine(),enableCursorLine:s.enableCursorLine!==undefined?s.enableCursorLine:j.getEnableCursorLine(),enableVerticalLine:s.enableVerticalLine!==undefined?s.enableVerticalLine:j.getEnableVerticalLine(),enableStatusBar:s.enableStatusBar!==undefined?s.enableStatusBar:j.getEnableStatusBar()};j.applySettings(m);}},getRelVisibility:function(s,i,j){if(s===\"X\"){return j?1:0;}else{return i?1:0;}},_getCurrentAppState:function(){var s=this.byId(\"idOrderGanttSmartFilterBar\");var i=this.getView().byId(\"idOrderGanttChartWithTable\");var j={};this._oAppStateData.customData.selectionPanelSize=i.getSelectionPanelSize();j=this._oAppStateData.customData;var v=s.getVariantManagement();j.sCurrentVariantKey=v.getCurrentVariantId()===\"\"?v.getStandardVariantKey():v.getCurrentVariantId();j.oFilterData=this._getCurrentFilterState(s,this._oStartDate,this._oEndDate);return j;},_getCurrentFilterState:function(s){var v=[];var H=[];s.getAllFilterItems(true).forEach(function(i){v.push(i.getName());if(i.getProperty(\"visibleInFilterBar\")===false){H.push(i.getName());}});return{aFilters:s.getFilterData(),aVisibleFields:v,aHiddenFields:H};},_delayedTriggerSearch:function(){var s=this.getView().byId(\"idOrderGanttSmartFilterBar\");if(s.isInitialised()&&this._bIsAppStateApplied&&!s.isCurrentVariantExecuteOnSelectEnabled()){var p={finalTrigger:true};s.fireSearch(p);}this._bFirstTriggerDone=true;},_submitDelayedRequests:function(){this.getView().getModel().attachBatchRequestCompleted(this._requestComplete,this);this.getView().getModel().submitChanges({groupId:\"iDBatchOrderFilterRequest\"});var i=this.getView().getModel().getDeferredBatchGroups();var j=i.indexOf(\"iDBatchOrderFilterRequest\");i.splice(j,1);this.getView().getModel().setDeferredGroups(i);this._bSubmitofDeferredRequestsDone=true;},setAppState:function(s){var i=this.byId(\"idOrderGanttSmartFilterBar\");if(s&&s.customData&&Object.keys(s.customData).length!==0){var v=i.getVariantManagement().getVariantContent(i,s.customData.sCurrentVariantKey);if(this._isIAppState&&s.customData.oFilterData){if(v){i.setCurrentVariantId(s.customData.sCurrentVariantKey);}if(s.customData.oFilterData.aVisibleFields){s.customData.oFilterData.aVisibleFields.forEach(function(k){if(k){i.addFieldToAdvancedArea(k);}});if(i.getControlConfiguration().length!==s.customData.oFilterData.aVisibleFields.length){i._oVariantManagement.currentVariantSetModified(true);}}if(s.customData.oFilterData.aHiddenFields){s.customData.oFilterData.aHiddenFields.forEach(function(k){if(k){var j=i._getFilterItemByName(k);j.setVisibleInAdvancedArea(false);}});}i.setFilterData(s.customData.oFilterData.aFilters,true);}if(s.customData.aSortColumn&&s.customData.aSortColumn.hasOwnProperty(\"id\")){if(this.getView().byId(s.customData.aSortColumn.id)){this.onSortRequest(\"\",s.customData.aSortColumn);}}}},getOnCriticalVisibility:function(i,s){if(i===\"X\"&&s){return true;}else{return false;}},_onPersChangeForColumns:function(i){var j=this.getView().byId(\"idOrderTreeTable\");var k=this.getView().byId(\"idOrderGanttChartWithTable\");this._oAppStateData={customData:G.getGanttColumnPersonalization(j,k,i,this._oAppStateData)};},getFFDMilestoneTitle:function(i){var s=\"\";if(i){var j=sap.ui.core.format.DateFormat.getDateInstance().format(i,true);s=this.getView().getModel(\"i18n\").getResourceBundle().getText(\"FinalDueDateTooltip\",[j]);}return s;},MoveOperationBasedOnDateChange:function(i){var j=sap.ui.getCore().getEventBus();j.subscribeOnce(C.sLibraryChannel,C.sServerMessageToUpdateEntity,this.prepareTargetForRefreshGantt,this);var m=this.getView().getModel();var s=i.getParameter(\"cursorDateTime\");var k=new Date();if(s<k){U.addMessage(this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(\"ErrorMessageDragAndDroptoPastDates\"),sap.ui.core.MessageType.Error,C.sDisplayTypeMessageBox);}else{var n=U.getAdjustedDate(s);var p=i.getParameter(\"targetRow\");var v=i.getParameter(\"targetShape\");var w;this.getView().byId(\"idOrderGanttContainer\").setBusy(true);if(p&&p.getBindingContext()){w=m.getObject(p.getBindingContext().getPath());}else if(v&&v.getParent()&&v.getParent().getBindingContext()){w=m.getObject(v.getParent().getBindingContext().getPath());}var x=sap.ui.core.format.DateFormat.getDateInstance({pattern:\"PTHH'H'mm'M'ss'S'\"});var y=U.roundDateToNearestDnDGranularity(s);var z=x.format(y);this._itemHashMap=new I();this._oChangeOperationsDelegate=new c();this._oChangeOperationsDelegate.scheduleOperationBasedOnDateChange(n,z,w,m,this._itemHashMap);var D=\"massChange\";this._itemHashMap.triggerBackendCall(D,C.sAfterDragAndDropFinalizedGanttApp);}},bindCalendarDefHelper:function(){var i=this._getCurrentTimePeriod();var j=encodeURIComponent(i.sCalendarStartDate.toISOString().substring(0,19));var k=encodeURIComponent(i.sCalendarEndDate.toISOString().substring(0,19));var m=this._oOwnerComponent.getModel(\"UIModel\");if(m.getProperty(\"/showNonWorkingTimes\")){if(this.oFromDate===j&&this.oToDate===k&&this.byId(\"idCalDef\").getDefs().length){return;}this.oFromDate=j;this.oToDate=k;this.byId(\"idCalDef\").bindAggregation(\"defs\",{path:\"/C_RSHOrderGanttCalendar(P_StartDate=datetime'\"+j+\"',P_EndDate=datetime'\"+k+\"')/Set\",parameters:{expand:\"to_Intervals\",groupId:\"GetCalendars\"},template:new g({key:\"{WorkCenterInternalID}\",backgroundColor:\"sapShell_Background\",timeIntervals:{path:\"to_Intervals\",templateShareable:true,template:new T({startTime:{path:\"WorkCenterNonAvailStrtDteTme\",formatter:this.removeTimeZoneOffset},endTime:{path:\"WorkCenterNonAvailEndDteTme\",formatter:this.removeTimeZoneOffset}})}})});}else if(!m.getProperty(\"/showNonWorkingTimes\")){this.byId(\"idCalDef\").unbindDefs();}},_getCorrespondingChangedOperations:function(j,s){var k=[];for(var i=0;i<j.length;i++){if(j[i].Order===s){k.push(j[i].Operation);}}return k;},_getDataFromModel:function(m,p,P){return m.getProperty(p+\"/\"+P);},_createAdditionalOrderOpFilterForUtilizationUpdate:function(m,k,w,n){var p=[],s={};for(var i=0;w.length&&i<n.length;i++){var v=k.oKeys[n[i].substring(1)];for(var j=0;w.length&&j<v.length;j++){var x=this._getDataFromModel(m,\"/\"+v[j],\"MainWorkCenter\");var y=w.indexOf(x);if(y!==-1){w.splice(y,1);s=new o({filters:[new o(\"MaintenanceOrder\",q.EQ,this._getDataFromModel(m,\"/\"+v[j],\"MaintenanceOrder\")),new o(\"MaintenanceOrderOperation\",q.EQ,this._getDataFromModel(m,\"/\"+v[j],\"MaintenanceOrderOperation\"))],and:true});p.push(new o(s,false));}}}return p;},_findOperationsForUtilizationUpdate:function(k){var m=this.byId(\"idOrderTreeTable\").getBinding(\"rows\"),n=m.getRootContexts(),p=[],s=[],i,j;for(i=0;i<k.length;i++){for(j=0;j<n.length;j++){var P=n[j].sPath;if(!m.oKeys[P.substring(1)]){continue;}if(i===0){p.push(P);}if(P.indexOf(k[i].Order)!==-1){var v=p.indexOf(P);if(v!==-1){p.splice(v,1);}s.push(P);}}}var w=[],x=[],M=m.getModel();for(i=0;i<s.length;i++){var y=m.oKeys[s[i].substring(1)];var z=this._getDataFromModel(M,s[i],\"MaintenanceOrder\");var D=this._getCorrespondingChangedOperations(k,z);for(j=0;j<y.length;j++){var W=this._getDataFromModel(M,\"/\"+y[j],\"MainWorkCenter\");if(D.indexOf(this._getDataFromModel(M,\"/\"+y[j],\"MaintenanceOrderOperation\"))!==-1){if(x.indexOf(W)===-1){x.push(W);}}else{if(w.indexOf(W)===-1){w.push(W);}}}}var H=[],K=[];for(i=0;i<x.length;i++){if(w.indexOf(x[i])===-1){H.push(x[i]);}}if(H.length){K=this._createAdditionalOrderOpFilterForUtilizationUpdate(M,m,H,p);}return K;},prepareTargetForRefreshGantt:function(s,i,j){var m=this.byId(\"idOrderTreeTable\").getModel();var p=\"/C_RSHOrdersAndOperations\";var k=this.getModel(\"UIModel\");var n={};var v=[],w,x=[],y=[],z=[];var D=j.itemHashMapContainer;if(!j.parameters.bRefreshOfSourceAppRequired){this._onAfterActionsCompleted(j.parameters);return;}var N=0;var H=[];if(s!==\"\"&&i!==C.sOnRelationshipDelete){for(var K in D){if(D.hasOwnProperty(K)){var L=K.split(\",\");if(N===0){N=(L[2]===C.workcenterAction||L[2]===C.reassignWorkCenterAction||L[2]===C.schedulingOperationAction||L[2]===C.removeConstraintsAction)?1:0;}if(L[2]===C.workcenterAction){var M={Order:L[0],Operation:L[1]};H.push(M);}w=new o({filters:[new o(\"MaintenanceOrder\",q.EQ,L[0]),new o(\"MaintenanceOrderOperation\",q.EQ,L[1])],and:true});x.push(new o(w,false));if(!y.includes(L[0])){y.push(L[0]);z.push(new o(\"MaintenanceOrder\",q.EQ,L[0]));}}}}else{D.forEach(function(Y){N=1;if(y.indexOf(Y)===-1){y.push(Y);z.push(new o(\"MaintenanceOrder\",q.EQ,Y));}});}if(H.length&&k.getProperty(\"/showUtilizationIndicator\")){var P=this._findOperationsForUtilizationUpdate(H);}var Q=z.slice();v=this._adjustFiltersForOpQuery(N,Q,P,x,k.getProperty(\"/showUtilizationIndicator\"));var _=this._sOperationAppStateFields?this._sOperationAllTechMandatoryFields+this._sOperationAppStateFields:this._sOperationAllTechMandatoryFields;n=this._getUrlParametersForDeltaRefresh(k.getProperty(\"/showImpRel\"),k.getProperty(\"/showExpRel\"),k.getProperty(\"/showUtilizationIndicator\"),_);var V=this._performDeltaReadQuery(m,p,v,n);v=[];v.push(new o(z,false));v.push(new o({filters:[new o(\"OrderOperationRowLevel\",q.EQ,0)],and:true}));var W=this._sOrderAppStateFields?this._sOrderAllTechMandatoryFields+\",\"+this._sOrderAppStateFields:this._sOrderAllTechMandatoryFields;n=this._getUrlParametersForDeltaRefresh(k.getProperty(\"/showImpRel\"),k.getProperty(\"/showExpRel\"),false,W);var X=this._performDeltaReadQuery(m,p,v,n);Promise.all([V,X]).then(this._onAfterActionsCompleted(j.parameters));},_adjustFiltersForOpQuery:function(n,i,j,k,s){var m=[];if(n===1){if(j&&j.length){m.push(new o(i,false));m[0].aFilters.push(new o(j,false));}else{m.push(new o(i,false));}if(U.isMockRun()){m.push(new o(\"OrderOperationRowLevel\",q.EQ,1));}}else{m.push(new o(k,false));}if(s){var p=this._getCurrentTimePeriod();var D=new o({filters:[new o(\"StartDate\",q.EQ,p.sCalendarStartDate),new o(\"EndDate\",q.EQ,p.sCalendarEndDate)],and:true});m[0].aFilters.push(new o(D,false));}return m;},_performDeltaReadQuery:function(m,p,i,j){return new Promise(function(k,n){m.read(p,{filters:i,urlParameters:j,success:function(D){k();},error:function(){k();}});});},_getUrlParametersForDeltaRefresh:function(s,i,j,k){var m=\"\",n=k;var p={};if(s||i){m=\"to_Relationships\";n=n+\",\"+\"to_Relationships\";}if(j){m=m?m+\",\"+\"to_UtilIndicator\":\"to_UtilIndicator\";n=n+\",\"+\"to_UtilIndicator\";}if(m){p={\"$expand\":m,\"$select\":n};}else{p={\"$select\":n};}return p;},initSortOrderAndSortOperationFields:function(){this.sSortOrderField=\"MaintenanceOrder\";this.sSortOperationField=\"MaintenanceOrderOperation\";this.sOrderSortOrder=\"Ascending\";this.sOperationSortOrder=null;},onPrint:function(){var i=this;var j=new l({ganttChart:i.getView().byId(\"idOrderGanttChartWithTable\")});j.open();},onShapeContextMenu:function(i){var s=i.getParameter(\"shape\");var v=this.getView();if(s instanceof R){var p=s.getBindingContext().getPath();var D=s.getModel().getData(p);if(D.RelationshipIsExplicit===\"X\"){s.setSelectedStroke(\"@sapUiInformative\");var j=sap.ui.getCore().getEventBus();j.subscribe(C.sLibraryChannel,C.sRelationshipDeleteInGantt,this.onDeleteRelationship,this);j.subscribeOnce(C.sLibraryChannel,C.sRelationshipDeleteContextMenuClose,this.onDeleteRelationshipContextMenuClose,this);if(!this.oRelationshipActionSheet){this.oRelationshipActionSheet=new t();}this.oRelationshipActionSheet.onOpen(i,v,s);}}else if(s.getMetadata().getName()===\"sap.gantt.simple.BaseGroup\"){this._oShapeForOpContextMenu=s;var _=i.getParameter(\"pageX\");var k=i.getParameter(\"pageY\");var m=s.getBindingContext().getPath();var n=this.getModel().getData(m);if(n.ProcessingStatusText===\"In Process\"){var w=this.getView().getModel(\"i18n\").getResourceBundle();U.addMessage(w.getText(\"InfoMessageOperationInProcessStatus\"),sap.ui.core.MessageType.Information,C.sDisplayTypeMessageToast);}else{if(!this._oShapeContextMenu){u.load({id:v.getId(),name:\"rsh.eam.ordergantts1.view.OperationActionSheet\",type:\"XML\",controller:this}).then(function(x){this._oShapeContextMenu=x;v.addDependent(x);this._setupOperationShapeContextMenu(n.ProcessingStatusText,n.OpBscStartDateConstraintType);this.openOperationShapeContextMenu(_,k);}.bind(this));}else{this._setupOperationShapeContextMenu(n.ProcessingStatusText,n.OpBscStartDateConstraintType);this.openOperationShapeContextMenu(_,k);}}}},onDeleteRelationship:function(s,i,j){this.getView().byId(\"idOrderGanttContainer\").setBusy(true);var m=this.getView().getModel(\"relationshipModel\");var p=j.getBindingContext().getPath();var k=j.getModel().getData(p);var n=k.PredecessorOrderOperation;var v=k.SuccessorOrderOperation;var w=k.PredecessorOrder;var x=k.SuccessorOrder;var y=j.getProperty(\"type\");var z=this._getInternalRelationshipType(y);var D=sap.ui.getCore().getLibraryResourceBundle(\"sap.rsh.eam.lib.common\");var H=this;m.remove(\"/C_RSHMaintenanceOrdOpRelshpTP(MaintenanceOrder='\"+this._addPaddingAtStart(12,k.PredecessorOrder)+\"',MaintenanceOrderOperation='\"+n+\"',MaintenanceOrderSubOperation='\"+encodeURIComponent(\" \")+\"',MaintOrdOperationIsSuccessor=\"+false+\",RelatedMaintenanceOrder='\"+this._addPaddingAtStart(12,k.SuccessorOrder)+\"',RelatedMaintOrderOperation='\"+v+\"',OrderOpRelationshipIntType='\"+z+\"')\",{success:function(K){var L={};L.itemHashMapContainer=[];L.itemHashMapContainer.push(w);L.itemHashMapContainer.push(x);L.parameters={};L.parameters.bRefreshOfSourceAppRequired=true;U.addMessage(D.getText(\"RelationshipDeletionSuccess\"),sap.ui.core.MessageType.Success,C.sDisplayTypeMessageToast);H.prepareTargetForRefreshGantt(\"\",\"\",L);},error:function(K){U.addMessage(D.getText(\"RelationshipDeletionError\"),sap.ui.core.MessageType.Success,C.sDisplayTypeMessageToast);H.getView().byId(\"idOrderGanttContainer\").setBusy(false);}});},onDeleteRelationshipContextMenuClose:function(s,i,j){var k=sap.ui.getCore().getEventBus();k.unsubscribe(C.sLibraryChannel,C.sRelationshipDeleteInGantt,this.onDeleteRelationship,this);if(j){j.setSelectedStroke(null);j.setSelected(false);}},openOperationShapeContextMenu:function(p,P){var i=new sap.m.Label();var j=new sap.ui.core.Popup(i,false,true,false);var k=sap.ui.core.Popup.Dock;var s=(p+1)+\" \"+(P-15);j.open(0,k.BeginTop,k.LeftTop,null,s);this._oShapeContextMenu.openBy(i);},_setupOperationShapeContextMenu:function(s,i){if(s===\"Due\"){this.byId(\"idButtonChangeAction\").setProperty(\"visible\",true);this.byId(\"idButtonDispatchAction\").setProperty(\"visible\",true);this.byId(\"idButtonCancDispatchAction\").setProperty(\"visible\",false);}else if(s===\"Dispatched\"){this.byId(\"idButtonChangeAction\").setProperty(\"visible\",true);this.byId(\"idButtonDispatchAction\").setProperty(\"visible\",false);this.byId(\"idButtonCancDispatchAction\").setProperty(\"visible\",true);}if(i===\"1\"){this.byId(\"idButtonRemoveConstraintsAction\").setProperty(\"visible\",true);}else{this.byId(\"idButtonRemoveConstraintsAction\").setProperty(\"visible\",false);}},onExit:function(){this._oInnerAppState={customData:this._getCurrentAppState()};f.getInstance().getFeatureModel(C.sGanttAppState).setProperty(\"/\",this._oInnerAppState);f.getInstance().saveContainer();}});});",
		"rsh/eam/ordergantts1/controller/App-dbg.controller.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\r\n\t\t\"sap/rsh/eam/lib/common/controller/BaseController\",\r\n\t\t\"sap/ui/model/json/JSONModel\"\r\n\t], function (BaseController, JSONModel) {\r\n\t\t\"use strict\";\r\n\r\n\t\treturn BaseController.extend(\"rsh.eam.ordergantts1.controller.App\", {\r\n\r\n\t\t\tonInit : function () {\r\n\t\t\t\tvar oViewModel,\r\n\t\t\t\t\tfnSetAppNotBusy,\r\n\t\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\r\n\r\n\t\t\t\toViewModel = new JSONModel({\r\n\t\t\t\t\tbusy : true,\r\n\t\t\t\t\tdelay : 0\r\n\t\t\t\t});\r\n\t\t\t\tthis.setModel(oViewModel, \"appView\");\r\n\r\n\t\t\t\tfnSetAppNotBusy = function() {\r\n\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\r\n\t\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().\r\n\t\t\t\t\tthen(fnSetAppNotBusy);\r\n\r\n\t\t\t\t// apply content density mode to root view\r\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n);",
		"rsh/eam/ordergantts1/controller/SchedulingBoard-dbg.controller.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\r\n\t\"sap/rsh/eam/lib/common/controller/BaseController\",\r\n\t\"sap/ui/model/json/JSONModel\",\r\n\t\"sap/rsh/eam/lib/common/formatters/formatter\",\r\n\t\"sap/rsh/eam/lib/common/utils/utils\",\r\n\t\"sap/rsh/eam/lib/common/utils/GanttUtils\",\r\n\t\"sap/rsh/eam/lib/common/controller/OrderPopup\",\r\n\t\"sap/rsh/eam/lib/common/controller/OperationPopup\",\r\n\t\"sap/rsh/eam/lib/common/controller/FunctionalLocationPopup\",\r\n\t\"sap/rsh/eam/lib/common/controller/EquipmentPopup\",\r\n\t\"sap/rsh/eam/lib/common/utils/Constants\",\r\n\t\"sap/rsh/eam/lib/common/utils/StatusCommon\",\r\n\t\"sap/rsh/eam/lib/common/controller/AssignMyWorkCenters\",\r\n\t\"sap/rsh/eam/lib/common/controller/ChangeOperations\",\r\n\t\"sap/gantt/config/SettingItem\",\r\n\t\"sap/rsh/eam/lib/common/utils/AppState\",\r\n\t\"sap/rsh/eam/lib/common/utils/AppPersContainer\",\r\n\t\"sap/rsh/eam/lib/common/utils/ItemHashMap\",\r\n\t\"sap/gantt/def/cal/Calendar\",\r\n\t\"sap/gantt/def/cal/CalendarDefs\",\r\n\t\"sap/gantt/def/cal/TimeInterval\",\r\n\t\"sap/gantt/simple/GanttPrinting\",\r\n\t\"sap/ui/model/Filter\",\r\n\t\"sap/ui/model/FilterOperator\",\r\n\t\"sap/rsh/eam/lib/common/controller/GanttChartSettingsDialog\",\r\n\t\"sap/gantt/simple/Relationship\",\r\n\t\"sap/rsh/eam/lib/common/controller/RelationshipActionSheet\",\r\n\t\"sap/ui/core/Fragment\"\r\n], function (BaseController, JSONModel, Formatter, Utils, GanttUtils, OrderPopup, OperationPopup, FunctionalLocationPopup, EquipmentPopup,\r\n\tConstants,\r\n\tStatusCommon, AssignMyWorkCenters, ChangeOperations, SettingItem, AppState, AppPersContainer, ItemHashMap, Calendar, CalendarDefs,\r\n\tTimeInterval, GanttPrinting, Filter, FilterOperator, GanttChartSettingsDialog, Relationship, RelationshipActionSheet, Fragment) {\r\n\t\"use strict\";\r\n\r\n\treturn BaseController.extend(\"rsh.eam.ordergantts1.controller.SchedulingBoard\", {\r\n\t\tformatter: Formatter,\r\n\t\tganttUtils: GanttUtils,\r\n\t\tDISPATCHED: 30,\r\n\t\tDUE: 20,\r\n\t\tINPROCESS: 40,\r\n\t\t_sOrderAllTechMandatoryFields: \"MaintenanceOrder,MaintenanceOrderDesc,MaintenanceOrderInternalID,OrderStartDateTime,OrderEndDateTime,ProcessingStatus,ProcessingStatusText,OrderOperationRowLevel,OrderOperationParentRowID,OrderOperationRowID,OrderOperationIsExpanded,MaintOrderRoutingNumber,LatestAcceptableCompletionDate,OrderType\",\r\n\t\t_sOrderAppStateFields: \"\",\r\n\t\t_sOrderAdditionalPopOverFields: \"FunctionalLocationName,FunctionalLocation,EquipmentName,Equipment,MaterialStatusKey,MaterialStatusText\",\r\n\t\t_sOperationAllTechMandatoryFields: \"MaintenanceOrder,MaintenanceOrderOperation,MaintenanceOrderSubOperation,MaintenanceOrderDesc,MainWorkCenter,MaintenanceOrderInternalID,MaintOrderOperationInternalID,OrderOperationStartDateTime,OrderOperationEndDateTime,ProcessingStatus,ProcessingStatusText,OrderOperationRowLevel,OrderOperationParentRowID,OrderOperationRowID,OrderOperationIsExpanded,WorkCenter,OperationHasLongText,HasError,OperationDescription,WorkCenterInternalID,HasCrossOrderRelationship,HasErrorDescription,ID,PlannedStartDate,PlannedStartTime,OperationPersonResponsible,OperationPersonRespName,MaintOrderRoutingNumber,MaintOrderOperationCounter,OpBscStartDateConstraintType,OrderOpStartConstraintDateTime,OpBscEndDateConstraintType,OrderOpEndConstraintDateTime,OrderType\",\r\n\t\t_sOperationAppStateFields: \"\",\r\n\t\t_afilterFieldGroups:\r\n\t\t// Operation Field Filters\r\n\t\t\t[\"MaintenanceNotification\", \"WorkCenterInternalID\", \"WorkCenterTypeCode\",\r\n\t\t\t\"Plant\", \"OperationControlKey\", \"PlannedStartDate\", \"PlannedEndDate\", \"PlannedStartTime\", \"PlannedEndTime\",\r\n\t\t\t\"OperationDuration\", \"OperationPlannedWork\", \"NumberOfCapacities\", \"OperationHasLongText\", \"OperationPersonResponsible\",\r\n\t\t\t\"OperationPersonRespName\", \"HasError\", \"MaintOpExecutionStageName\", \"WorkCenter\", \"PlantSection\", \"MaintOpExecStageShortText\"\r\n\t\t],\r\n\t\t_aExpandFields: [\"to_OrderActiveStatus\", \"to_OrderDetails\"],\r\n\t\t_sSelectString: null,\r\n\t\tsSortOrderField: \"MaintenanceOrder\",\r\n\t\tsSortOperationField: \"MaintenanceOrderOperation\",\r\n\t\tsOrderSortOrder: \"Ascending\",\r\n\t\tsOperationSortOrder: null,\r\n\t\tstatusCommon: null,\r\n\t\t_bFirstTriggerDone: false,\r\n\t\t_sAfterStatusChangesFinalizedSourceApp: Constants.sAfterStatusChangesFinalizedGanttApp,\r\n\t\t_bPagingRequestOfSubnodes: false,\r\n\t\t_bNewColumnAdded: false,\r\n\t\t_sExistingFilterString: null,\r\n\t\t_sPerformanceFilterOnExpand: null,\r\n\t\t_isIAppState: null,\r\n\t\tsOrderGanttChannel: \"rsh.eam.ordergantts\",\r\n\t\tsIndiviudalActionOnGanttChange: \"individualChangeOnGanttChange\",\r\n\r\n\t\tonInit: function () {\r\n\t\t\tthis._oOwnerComponent = this.getOwnerComponent();\r\n\t\t\tthis._oOwnerComponent.setModel(new JSONModel({\r\n\t\t\t\t\"rowCount\": 0,\r\n\t\t\t\t//by default relationships should be hidden\r\n\t\t\t\t\"showImpRel\": false,\r\n\t\t\t\t\"showExpRel\": false,\r\n\t\t\t\t\"showNonWorkingTimes\": false,\r\n\t\t\t\t\"showCriticalPath\": false,\r\n\t\t\t\t\"condensedModeActive\": false,\r\n\t\t\t\t\"showFinalDueDate\": false\r\n\t\t\t}), \"UIModel\");\r\n\t\t\tthis._bAdjustToolbar = false;\r\n\t\t\tthis._oDataModel = this.getOwnerComponent().getModel();\r\n\t\t\tthis._oDataModel.attachBatchRequestSent(this._requestSent, this);\r\n\t\t\tthis._oDataModel.attachBatchRequestCompleted(this._requestComplete, this);\r\n\t\t\tthis._setTimeAxis();\r\n\t\t\tthis.initMessagePopover();\r\n\t\t\tthis.attachModelErrorHandler(\"readModel\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oGanttChartWithTable = this.getView().byId(\"idOrderGanttChartWithTable\");\r\n\t\t\t//Read app state.\r\n\t\t\tthis._oAppStateData = AppPersContainer.getInstance().getFeatureModel(Constants.sGanttAppState).getData();\r\n\t\t\t//Required only once for fresh app state\r\n\t\t\tif (this._oAppStateData.customData === undefined) {\r\n\t\t\t\tthis._oAppStateData = {};\r\n\t\t\t\tthis._oAppStateData.customData = GanttUtils.oneTimeInitilzationOfAppState(oTreeTable, oGanttChartWithTable);\r\n\t\t\t}\r\n\t\t\tGanttUtils.setGanttColumnPersonalization(this._oAppStateData, oTreeTable, oGanttChartWithTable, this);\r\n\t\t\toTreeTable.attachSort(this.onSortRequest, this);\r\n\t\t\toTreeTable.attachColumnResize(this._onPersChangeForColumns, this);\r\n\t\t\toTreeTable.attachColumnVisibility(this._onPersChangeForColumns, this);\r\n\t\t\tthis.statusCommon = new StatusCommon(this._sAfterStatusChangesFinalizedSourceApp);\r\n\t\t\tthis._setupSettings();\r\n\t\t\tthis.updateRelationshipsAndUtilizations();\r\n\t\t\tthis._setCondensedMode();\r\n\t\t\tthis._bActionInitiatedFromContextMenu = false;\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Returns the current Time Period set in Filter bar or, \r\n\t\t * default Time Period when Filter bar is not yet initialized\r\n\t\t * @returns {object} with start and end date to be set in filterbar\r\n\t\t */\r\n\t\t_getCurrentTimePeriod: function () {\r\n\r\n\t\t\tvar oInitStartDate;\r\n\t\t\tvar oInitEndDate;\r\n\r\n\t\t\tif (this.getView().byId(\"idOrderGanttSmartFilterBar\").isInitialised() &&\r\n\t\t\t\tthis.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData() &&\r\n\t\t\t\t(this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.conditionTypeInfo.data.operation === \"DATERANGE\" ||\r\n\t\t\t\t\tthis.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.conditionTypeInfo.data.operation === \"TODAYFROMTO\")) {\r\n\t\t\t\tif (Utils.isMockRun()) {\r\n\t\t\t\t\toInitStartDate = this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.conditionTypeInfo.data.value1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//added date object copy to prevent contamination of the original date object\r\n\t\t\t\t\t//this will prevent the date to keep increasing whent he go button is pressed again and again\r\n\t\t\t\t\toInitStartDate = this.dateObjectCopy(this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.ranges[0].value1);\r\n\t\t\t\t}\r\n\t\t\t\toInitEndDate = this.dateObjectCopy(this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData().PeriodType.ranges[0].value2);\r\n\t\t\t\toInitEndDate.setDate(oInitEndDate.getDate() + 1);\r\n\t\t\t} else {\r\n\t\t\t\toInitStartDate = new Date();\r\n\t\t\t\toInitEndDate = new Date();\r\n\t\t\t\t//To get the correct ending date of one week after selection date, increment needs to be dynamical \r\n\t\t\t\tvar iIncrementEndDate = 35 - oInitEndDate.getDay();\r\n\t\t\t\t// Set the horizon from -1 week from current date to next 5 weeks \r\n\t\t\t\toInitStartDate.setDate(oInitStartDate.getDate() - 7);\r\n\t\t\t\toInitEndDate.setDate(oInitEndDate.getDate() + iIncrementEndDate);\r\n\t\t\t}\r\n\t\t\toInitStartDate.setHours(0, 0, 0);\r\n\t\t\toInitEndDate.setHours(0, 0, 0);\r\n\t\t\tthis.oPeriodTypeDates = {};\r\n\r\n\t\t\tthis.oPeriodTypeDates.oStartDate = Utils.getAdjustedDate(oInitStartDate);\r\n\t\t\tthis.oPeriodTypeDates.oEndDate = Utils.getAdjustedDate(oInitEndDate);\r\n\r\n\t\t\tvar returnObj = {};\r\n\t\t\treturnObj.sCalendarStartDate = oInitStartDate;\r\n\t\t\treturnObj.sCalendarEndDate = oInitEndDate;\r\n\t\t\treturnObj.sInitStartDate = this.getDatePerTimeAxisFormat(oInitStartDate);\r\n\t\t\treturnObj.sInitEndDate = this.getDatePerTimeAxisFormat(oInitEndDate);\r\n\t\t\treturn returnObj;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set time axis for the Gantt dynamically with a new strategy each time\r\n\t\t * (Suggestes best practise from Gantt Team)\r\n\t\t */\r\n\t\t_setTimeAxis: function () {\r\n\t\t\tvar oCurrenttimePeriod = this._getCurrentTimePeriod();\r\n\t\t\tvar oZoomStrategy = new sap.gantt.axistime.ProportionZoomStrategy({\r\n\t\t\t\ttotalHorizon: new sap.gantt.config.TimeHorizon({\r\n\t\t\t\t\tstartTime: oCurrenttimePeriod.sInitStartDate,\r\n\t\t\t\t\tendTime: oCurrenttimePeriod.sInitEndDate\r\n\t\t\t\t}),\r\n\t\t\t\tvisibleHorizon: new sap.gantt.config.TimeHorizon({\r\n\t\t\t\t\tstartTime: oCurrenttimePeriod.sInitStartDate,\r\n\t\t\t\t\tendTime: oCurrenttimePeriod.sInitEndDate\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tthis.byId(\"idOrderGanttChartWithTable\").setAxisTimeStrategy(oZoomStrategy);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Formatter method for Order/Operation column in Gantt Tree\r\n\t\t * @public\r\n\t\t * @param {int} [orderOperationRowLevel] Row Level showing if order or operation\r\n\t\t * @param {String} [maintenanceOrder]  Order ID\r\n\t\t * @param {String} [maintenanceOrderDesc] Order Description\r\n\t\t * @param {String} [maintenanceOrderOperation] Operation ID\r\n\t\t * @param {String} [operationDescription] Operation Description\r\n\t\t * @param {String} [maintenanceOrderSubOperation] Sub Operation ID\r\n\t\t * @returns {String} Text to be displayed in the Order/Operation column for the specific column\r\n\t\t */\r\n\t\tformatOrderOpsLink: function (orderOperationRowLevel, maintenanceOrder, maintenanceOrderDesc, maintenanceOrderOperation,\r\n\t\t\toperationDescription, maintenanceOrderSubOperation) {\r\n\r\n\t\t\tif (orderOperationRowLevel === 0) {\r\n\t\t\t\treturn maintenanceOrder + \" \" + maintenanceOrderDesc;\r\n\t\t\t} else {\r\n\t\t\t\tif (maintenanceOrderSubOperation) {\r\n\t\t\t\t\treturn maintenanceOrderOperation + \" / \" + maintenanceOrderSubOperation + \" \" + operationDescription;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn maintenanceOrderOperation + \" \" + operationDescription;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter for Concatinating Duration and its Unit\r\n\t\t * @public\r\n\t\t * @param {String} [sDuration] Duration\r\n\t\t * @param {String} [sUnit] Unit\r\n\t\t * @return {String} Concatenated Duration and its Unit\r\n\t\t **/\r\n\t\tformatWork: function (sDuration, sUnit) {\r\n\t\t\tif (sDuration && sUnit) {\r\n\t\t\t\treturn this.formatter.formatDuration(sDuration) + \" \" + sUnit;\r\n\t\t\t} else {\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetTitle: function (dStartDateTime, dEndDatetime) {\r\n\t\t\tif (dStartDateTime !== null && dEndDatetime !== null) {\r\n\t\t\t\treturn this._formatToLocale(this.removeTimeZoneOffset(dStartDateTime)) + \" - \" + this._formatToLocale(this.removeTimeZoneOffset(\r\n\t\t\t\t\tdEndDatetime));\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t},\r\n\r\n\t\tremoveTimeZoneOffset: function (dTime) {\r\n\t\t\tif (dTime) {\r\n\t\t\t\treturn new Date(dTime.getTime() + dTime.getTimezoneOffset() * 60 * 1000);\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter to determine the rectangle shape hight\r\n\t\t * depending on condensed mode is on/off\r\n\t\t * @public\r\n\t\t * @param {Integer} [iOrderOperationRowLevel] Order Operation Row Level\r\n\t\t * @param {Boolean} [bCondensedModeActive] Condensed Mode Active\r\n\t\t * @return {Integer} Rectangle Hight\r\n\t\t **/\r\n\t\tgetRectangleHight: function (iOrderOperationRowLevel, bCondensedModeActive) {\r\n\t\t\tif (iOrderOperationRowLevel === 1 && bCondensedModeActive) {\r\n\t\t\t\treturn 12;\r\n\t\t\t} else if (iOrderOperationRowLevel === 1 && bCondensedModeActive === false) {\r\n\t\t\t\treturn 20;\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter to determine the shevron shape hight\r\n\t\t * depending on condensed mode is on/off\r\n\t\t * @public\r\n\t\t * @param {Integer} [iOrderOperationRowLevel] Order Operation Row Level\r\n\t\t * @param {Boolean} [bCondensedModeActive] Condensed Mode Active\r\n\t\t * @return {Integer} Shevron Hight\r\n\t\t **/\r\n\t\tgetShevronHight: function (iOrderOperationRowLevel, bCondensedModeActive) {\r\n\t\t\tif (iOrderOperationRowLevel === 0 && bCondensedModeActive) {\r\n\t\t\t\treturn 12;\r\n\t\t\t} else if (iOrderOperationRowLevel === 0 && bCondensedModeActive === false) {\r\n\t\t\t\treturn 20;\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter to determine the shevron shape head width\r\n\t\t * depending on condensed mode is on/off\r\n\t\t * @public\r\n\t\t * @param {Boolean} [bCondensedModeActive] Condensed Mode Active\r\n\t\t * @return {Integer} Shevron head width\r\n\t\t **/\r\n\t\tgetShevronHeadWidth: function (bCondensedModeActive) {\r\n\t\t\tif (bCondensedModeActive) {\r\n\t\t\t\treturn 6;\r\n\t\t\t} else {\r\n\t\t\t\treturn 10;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter to determine the shevron shape head width\r\n\t\t * depending on condensed mode is on/off\r\n\t\t * @public\r\n\t\t * @param {Boolean} [bCondensedModeActive] Condensed Mode Active\r\n\t\t * @return {Integer} Shevron head width\r\n\t\t **/\r\n\t\tgetShevronTailWidth: function (bCondensedModeActive) {\r\n\t\t\tif (bCondensedModeActive) {\r\n\t\t\t\treturn 6;\r\n\t\t\t} else {\r\n\t\t\t\treturn 10;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter to determine the critical path shape hight\r\n\t\t * depending on condensed mode is on/off\r\n\t\t * @public\r\n\t\t * @param {Integer} [iOrderOperationRowLevel] Order Operation Row Level\r\n\t\t * @param {Boolean} [bCondensedModeActive] Condensed Mode Active\r\n\t\t * @return {Integer} Critical Path Hight\r\n\t\t **/\r\n\t\tgetCriticalPathHight: function (iOrderOperationRowLevel, bCondensedModeActive) {\r\n\t\t\tif (iOrderOperationRowLevel === 1 && bCondensedModeActive) {\r\n\t\t\t\treturn 1;\r\n\t\t\t} else if (iOrderOperationRowLevel === 1 && bCondensedModeActive === false) {\r\n\t\t\t\treturn 2;\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter to determine the critical path yBias Value\r\n\t\t * depending on condensed mode is on/off\r\n\t\t * @public\r\n\t\t * @param {Integer} [iOrderOperationRowLevel] Order Operation Row Level\r\n\t\t * @param {Boolean} [bCondensedModeActive] Condensed Mode Active\r\n\t\t * @return {Integer} Critical Path yBias value\r\n\t\t **/\r\n\t\tgetCPyBiasValue: function (iOrderOperationRowLevel, bCondensedModeActive) {\r\n\t\t\tif (iOrderOperationRowLevel === 1 && bCondensedModeActive) {\r\n\t\t\t\treturn 8;\r\n\t\t\t} else if (iOrderOperationRowLevel === 1 && bCondensedModeActive === false) {\r\n\t\t\t\treturn 15;\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* Takes constraint-time and constraint-type as input and returns formatted constraint-time if a constraint type exists\r\n\t\t * @public\r\n\t\t * @param {Date} [dTime] Constraint start or end time \r\n\t\t * @param {String} [sOpConstraintType] Start/End Constraint Type\r\n\t\t * @returns {Date} If Contraint-type exists\r\n\t\t */\r\n\t\tconstraintTimeFormatter: function (dTime, sOpConstraintType) {\r\n\t\t\tif (sOpConstraintType === \"1\") {\r\n\t\t\t\treturn this.removeTimeZoneOffset(dTime);\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* Formatter for Tooltip text of Start Constraint of Operation\r\n\t\t * @public\r\n\t\t * @param {String} sStartConstraintType Constraint type for Start Constraint\r\n\t\t * @param {Date} dOpStartConstraintDateTime Timestamp of Start Constraint\r\n\t\t * @returns {String} Formatted Tooltip\r\n\t\t */\r\n\t\tgetStartConstraintTypeText: function (sStartConstraintType, dOpStartConstraintDateTime) {\r\n\r\n\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\t\t\tif (dOpStartConstraintDateTime) {\r\n\t\t\t\tvar sOpStartConstraintDate = sap.ui.core.format.DateFormat.getDateInstance().format(dOpStartConstraintDateTime,\r\n\t\t\t\t\ttrue);\r\n\t\t\t\tvar sOpStartConstraintTime = sap.ui.core.format.DateFormat.getTimeInstance().format(dOpStartConstraintDateTime,\r\n\t\t\t\t\ttrue);\r\n\t\t\t}\r\n\t\t\tswitch (sStartConstraintType) {\r\n\t\t\tcase \"1\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscStartDateConstraintType1Tooltip\", [sOpStartConstraintDate, sOpStartConstraintTime]);\r\n\t\t\tcase \"2\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscStartDateConstraintType2Tooltip\", [sOpStartConstraintDate, sOpStartConstraintTime]);\r\n\t\t\tcase \"3\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscStartDateConstraintType3Tooltip\", [sOpStartConstraintDate, sOpStartConstraintTime]);\r\n\t\t\tcase \"4\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscStartDateConstraintType4Tooltip\");\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Formatter for Tooltip text of End Constraint of Operation\r\n\t\t * @public\r\n\t\t * @param {String} sEndConstraintType Constraint type for Finish Constraint\r\n\t\t * @param {Date} dOpEndConstraintDateTime Timestamp of Finish Constraint\r\n\t\t * @returns {String} Formatted Tooltip\r\n\t\t */\r\n\t\tgetFinishConstraintTypeText: function (sEndConstraintType, dOpEndConstraintDateTime) {\r\n\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\t\t\tif (dOpEndConstraintDateTime) {\r\n\t\t\t\tvar sOpEndConstraintDate = sap.ui.core.format.DateFormat.getDateTimeInstance().format(dOpEndConstraintDateTime, true);\r\n\t\t\t\tvar sOpEndConstraintTime = sap.ui.core.format.DateFormat.getTimeInstance().format(dOpEndConstraintDateTime,\r\n\t\t\t\t\ttrue);\r\n\t\t\t}\r\n\t\t\tswitch (sEndConstraintType) {\r\n\t\t\tcase \"1\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscEndDateConstraintType1Tooltip\", [sOpEndConstraintDate, sOpEndConstraintTime]);\r\n\t\t\tcase \"2\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscEndDateConstraintType2Tooltip\", [sOpEndConstraintDate, sOpEndConstraintTime]);\r\n\t\t\tcase \"3\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscEndDateConstraintType3Tooltip\", [sOpEndConstraintDate, sOpEndConstraintTime]);\r\n\t\t\tcase \"4\":\r\n\t\t\t\treturn oResourceBundle.getText(\"bscEndDateConstraintType4Tooltip\");\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/* Formatter for constant for 'fill' of Constraint shape, Used for Both Start Constraint and End Constraint\r\n\t\t * @public\r\n\t\t * @param {String} sConstraintType Constraint type for Start Constraint\r\n\t\t * @param {Date} dOpConstraintDateTime Timestamp of Start or Finish Constraint\r\n\t\t * @param {Date} dOpStarOrEndtDateTime Timestamp of Order Start or Finish\r\n\t\t * @returns {String} Fill Constant\r\n\t\t */\r\n\t\tgetOpConstraintFill: function (sConstraintType, dOpConstraintDateTime, dOpStarOrEndtDateTime) {\r\n\t\t\tswitch (sConstraintType) {\r\n\t\t\tcase \"1\":\r\n\t\t\t\t//\"Must start on\" or \"Must finish on\"\r\n\t\t\t\tif (JSON.stringify(dOpConstraintDateTime) === JSON.stringify(dOpStarOrEndtDateTime)) {\r\n\t\t\t\t\treturn \"@sapTextColor\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"@sapNegativeColor\";\r\n\t\t\t\t}\r\n\t\t\tcase \"2\":\r\n\t\t\t\t//\"Cannot start before\" or \"Cannot finish before\"\r\n\t\t\t\tif (dOpConstraintDateTime < dOpStarOrEndtDateTime) {\r\n\t\t\t\t\treturn \"@sapTextColor\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"@sapNegativeColor\";\r\n\t\t\t\t}\r\n\t\t\tcase \"3\":\r\n\t\t\t\t//\"Cannot start later\" or \"Finish not later\"\r\n\t\t\t\tif (dOpConstraintDateTime > dOpStarOrEndtDateTime) {\r\n\t\t\t\t\treturn \"@sapTextColor\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"@sapNegativeColor\";\r\n\t\t\t\t}\r\n\t\t\tcase \"4\":\r\n\t\t\t\treturn \"@sapTextColor\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \"@sapTextColor\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_formatToLocale: function (dDateTime) {\r\n\t\t\tif (!this._oDateFormatter) {\r\n\t\t\t\tthis._oDateFormatter = sap.ui.core.format.DateFormat.getDateTimeInstance({\r\n\t\t\t\t\tlocale: sap.ui.getCore().getConfiguration().getLocale()\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (dDateTime) {\r\n\t\t\t\treturn this._oDateFormatter.format(dDateTime);\r\n\t\t\t} else {\r\n\t\t\t\treturn dDateTime;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * returns the color code by processing status\r\n\t\t * @param {string} sProcessingStatus processing status\r\n\t\t * @returns {color} color code\r\n\t\t */\r\n\t\tgetColor: function (sProcessingStatus) {\r\n\t\t\tswitch (sProcessingStatus) {\r\n\t\t\tcase this.DISPATCHED:\r\n\t\t\t\t//green color\r\n\t\t\t\treturn \"@sapPositiveColor\";\r\n\t\t\tcase this.DUE:\r\n\t\t\t\t//yellow color\r\n\t\t\t\treturn \"@sapCriticalColor\";\r\n\t\t\tdefault:\r\n\t\t\t\t//gray color\r\n\t\t\t\treturn \"@sapNeutralColor\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Clicked the Cancel Dispatch button\r\n\t\t * @param {formatActivityType,activityTypeName} The concatenated display for activity type column in operation table.\r\n\t\t */\r\n\t\tformatActivityType: function (formatActivityType, activityTypeName) {\r\n\t\t\tif (formatActivityType && activityTypeName) {\r\n\t\t\t\treturn activityTypeName + \" (\" + formatActivityType + \")\";\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Enable/Disable DND for SubOperation &  In process\r\n\t\t * @param {sSubOperation,sProcessingStatus} \r\n\t\t */\r\n\t\tisDNDPossible: function (sSubOperation, sProcessingStatus) {\r\n\t\t\tif (sSubOperation === \"\" && sProcessingStatus !== Constants.inProcessCode) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** Enable/Disable Connector Points for Operations \r\n\t\t * depending on the setting is on/off\r\n\t\t * @public\r\n\t\t * @param {Boolean} [bShowImpRel] Show Implicit Relationship\r\n\t\t * @param {Boolean} [bShowExpRel] Show Explicit Relationship\r\n\t\t * @param {String} [sSubOperation] Sub Operation\r\n\t\t * @param {String} [sProcessingStatus] Processing Status\r\n\t\t * @return {Boolean} Flag for connector point\r\n\t\t **/\r\n\t\tisConnectable: function (bShowImpRel, bShowExpRel, sSubOperation, sProcessingStatus) {\r\n\t\t\tif ((bShowImpRel || bShowExpRel) && sSubOperation === \"\" && sProcessingStatus !== Constants.inProcessCode) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\r\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\r\n\t\t * @memberOf rsh.eam.ordergantts1.view.SchedulingBoard\r\n\t\t */\r\n\t\t//\tonBeforeRendering: function() {\r\n\t\t//\r\n\t\t//\t},\r\n\r\n\t\t/**\r\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\r\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\r\n\t\t * @memberOf rsh.eam.ordergantts1.view.SchedulingBoard\r\n\t\t */\r\n\t\tonAfterRendering: function () {\r\n\t\t\tif (!this._bAdjustToolbar) { //manipulating the gantt toolbar to have the settings button at the standard place\r\n\t\t\t\tvar _oGanttChartContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\t\tvar _oBtnSettings = this.byId(\"idCustomGanttSettingBtn\");\r\n\t\t\t\tvar _oToolbar = _oGanttChartContainer.getToolbar();\r\n\t\t\t\t_oToolbar.removeContent(_oBtnSettings);\r\n\t\t\t\t_oToolbar.insertContent(_oBtnSettings, _oToolbar.getContent().length);\r\n\t\t\t\t_oToolbar.removeContent(_oToolbar.oToolbarSpacer);\r\n\t\t\t\t_oToolbar.oToolbarSpacer = null;\r\n\t\t\t\tthis._bAdjustToolbar = true;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_initBindingEventHandlers: function () {\r\n\t\t\tvar oBinding = this.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\");\r\n\t\t\tthis.getView().byId(\"idOrderTreeTable\").attachToggleOpenState(this._onExpandRow, this);\r\n\t\t\toBinding.attachEvent(\"dataReceived\", function (oEvent) {\r\n\t\t\t\tvar count = oBinding.oLengths.null;\r\n\t\t\t\t//Updating the order count when filtered.\r\n\t\t\t\tvar oUIModel = this.getOwnerComponent().getModel(\"UIModel\");\r\n\t\t\t\toUIModel.setProperty(\"/rowCount\", count);\r\n\t\t\t\tvar bCalledDuringInitialization = false;\r\n\t\t\t\t//check whether it is a paging request\r\n\t\t\t\t//e.g. if an order has 250 operations and an expand of it is done, we need\r\n\t\t\t\t//to ensure for each batch of paging requestst to select all 250 operations \r\n\t\t\t\t// we don't send Select fields for the order header\r\n\t\t\t\tif (oEvent.getParameters().data) {\r\n\t\t\t\t\tvar iReceivedNumberOfSubnodes = oEvent.getParameters().data.results.length;\r\n\t\t\t\t\tvar iCountOfTotalSubnodes = oEvent.getParameters().data.__count;\r\n\t\t\t\t\tif (iReceivedNumberOfSubnodes < iCountOfTotalSubnodes) {\r\n\t\t\t\t\t\tthis._bPagingRequestOfSubnodes = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._bPagingRequestOfSubnodes = false;\r\n\t\t\t\t\t\t//if no further pagiging requests of operations are expected,\r\n\t\t\t\t\t\t// we need to set $select params for orders again in oBinding.sCustomParams as the next request will be for order lavel \r\n\t\t\t\t\t\tif (oEvent.getParameters().data && oEvent.getParameters().data.results.length) {\r\n\t\t\t\t\t\t\tif (oEvent.getParameters().data.results[0].OrderOperationRowLevel === 1) {\r\n\t\t\t\t\t\t\t\tthis.setFinalSelectForOrderRequest(bCalledDuringInitialization);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}.bind(this));\r\n\r\n\t\t\toBinding.attachChange(this._onChange, this);\r\n\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Expanding a row in Gantt attach MaintenanceOrderFilter on to improve performance\r\n\t\t * as the annotation key OrderOperationParentRowID is a calculated key and takes long within DB select\r\n\t\t * @public\r\n\t\t * @param {object} [oEvent] expand event\r\n\t\t */\r\n\t\t_onExpandRow: function (oEvent) {\r\n\t\t\t//continue only if expand is done and not collapse\r\n\t\t\tif (oEvent.getParameters().expanded === true) {\r\n\t\t\t\tvar sMaintenanceOrderID = oEvent.getParameters().rowContext.getProperty().MaintenanceOrder;\r\n\r\n\t\t\t\tvar aMaintenanceOrderIDs = [];\r\n\t\t\t\taMaintenanceOrderIDs.push(sMaintenanceOrderID);\r\n\t\t\t\tthis._addPerformanceFilterOnExpand(aMaintenanceOrderIDs);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Attach MaintenanceOrderFilter on expanding a row in Gantt to improve performance\r\n\t\t * as the annotation key OrderOperationParentRowID is a calculated key and takes long within DB select\r\n\t\t * called if user expands a single raw and if multi expand vie expand + button is done\r\n\t\t * @public\r\n\t\t * @param {array} [aMaintenanceOrderIDs] Maintenance Order IDs\r\n\t\t */\r\n\t\t_addPerformanceFilterOnExpand: function (aMaintenanceOrderIDs) {\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oBinding = oTreeTable.getBinding(\"rows\");\r\n\t\t\tvar sMaintenanceOrderFilter = null;\r\n\r\n\t\t\t//always get the current filter from the binding as the filters may be changed by the user any time\r\n\t\t\tthis._sExistingFilterString = oBinding.sFilterParams;\r\n\t\t\t//in case a previous expand was done, remove the previous expand filter before building new\r\n\t\t\tif (this._sPerformanceFilterOnExpand) {\r\n\t\t\t\tthis._sExistingFilterString = this._sExistingFilterString.substr(this._sPerformanceFilterOnExpand.length);\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i = 0; i < aMaintenanceOrderIDs.length; i++) {\r\n\t\t\t\tif (aMaintenanceOrderIDs.length === 1) {\r\n\t\t\t\t\tsMaintenanceOrderFilter = \"MaintenanceOrder eq '\" + aMaintenanceOrderIDs[i] + \"' and \";\r\n\t\t\t\t\tsMaintenanceOrderFilter = encodeURIComponent(sMaintenanceOrderFilter);\r\n\t\t\t\t\toBinding.sFilterParams = sMaintenanceOrderFilter + this._sExistingFilterString;\r\n\t\t\t\t\tthis._sPerformanceFilterOnExpand = sMaintenanceOrderFilter;\r\n\t\t\t\t\t// add a bracket before the first entry\t\r\n\t\t\t\t} else if (i === 0) {\r\n\t\t\t\t\tsMaintenanceOrderFilter = \"(\" + \"MaintenanceOrder eq '\" + aMaintenanceOrderIDs[i] + \"' or \";\r\n\t\t\t\t\t// add a bracket after the last entry\t\t\r\n\t\t\t\t} else if (i === (aMaintenanceOrderIDs.length - 1)) {\r\n\t\t\t\t\tsMaintenanceOrderFilter = sMaintenanceOrderFilter + \"MaintenanceOrder eq '\" + aMaintenanceOrderIDs[i] + \"')\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsMaintenanceOrderFilter = sMaintenanceOrderFilter + \"MaintenanceOrder eq '\" + aMaintenanceOrderIDs[i] + \"' or \";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (aMaintenanceOrderIDs.length !== 1) {\r\n\t\t\t\tsMaintenanceOrderFilter = encodeURIComponent(sMaintenanceOrderFilter);\r\n\t\t\t\toBinding.sFilterParams = sMaintenanceOrderFilter + \"%20and%20\" + this._sExistingFilterString;\r\n\t\t\t\tthis._sPerformanceFilterOnExpand = sMaintenanceOrderFilter + \"%20and%20\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Determines visible columns from app state to be used in $select query to request orders & operations\r\n\t\t * @public\r\n\t\t * @param {boolean} [bGetForOrders] get fields for order request, otherwise for operations\r\n\t\t */\r\n\t\t_determineVisibleColumnsFromAppState: function (bGetForOrders, bCalledDuringInitialization, sManualAddedColumnName) {\r\n\t\t\tvar oAppState = null;\r\n\t\t\tvar aVisibleColumnsFinal = [];\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\t//to save some performance get the visible columns only from app state during initialization\r\n\t\t\tif (bCalledDuringInitialization) {\r\n\t\t\t\toAppState = this._oAppStateData.customData;\r\n\t\t\t\taVisibleColumnsFinal = oAppState.aVisibleColumns;\r\n\t\t\t\t// in all other cases just get it from the Gantt table\t\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar oColumns = oTreeTable.getColumns();\r\n\t\t\t\tfor (var m = 0; m < oColumns.length; m++) {\r\n\t\t\t\t\tif (oColumns[m].getVisible()) {\r\n\t\t\t\t\t\taVisibleColumnsFinal.push({\r\n\t\t\t\t\t\t\t\"pos\": m,\r\n\t\t\t\t\t\t\t\"width\": oColumns[m].getWidth(),\r\n\t\t\t\t\t\t\t\"columnBindingName\": oColumns[m].getSortProperty()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar oManuallyAddedColumn;\r\n\t\t\tvar bColumnDoesExist = false;\r\n\r\n\t\t\t//check whether the column does exist in the app state columns or not\r\n\t\t\tfor (var k = 0; k < aVisibleColumnsFinal.length; k++) {\r\n\t\t\t\tif (aVisibleColumnsFinal[k].columnBindingName === sManualAddedColumnName) {\r\n\t\t\t\t\tbColumnDoesExist = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//if column does not exist yet, add it\r\n\t\t\tif (sManualAddedColumnName && !bColumnDoesExist) {\r\n\t\t\t\toManuallyAddedColumn = {\r\n\t\t\t\t\tpos: 25,\r\n\t\t\t\t\twidth: \"20%\",\r\n\t\t\t\t\tcolumnBindingName: sManualAddedColumnName\r\n\t\t\t\t};\r\n\t\t\t\taVisibleColumnsFinal[aVisibleColumnsFinal.length] = oManuallyAddedColumn;\r\n\t\t\t}\r\n\r\n\t\t\tif (bGetForOrders) {\r\n\t\t\t\tthis._sOrderAppStateFields = \"\";\r\n\t\t\t\tfor (var i = 0; i < aVisibleColumnsFinal.length; i++) {\r\n\t\t\t\t\t//some fields have multiple inputs e.g. duration and duration unit\r\n\t\t\t\t\t//therefore ensure both fields are part of $select\r\n\t\t\t\t\tswitch (aVisibleColumnsFinal[i].columnBindingName) {\r\n\t\t\t\t\tcase \"MaintenanceOrder\":\r\n\t\t\t\t\t\t//As maintenance order column is a mandatory once and cannot be removed, \r\n\t\t\t\t\t\t//it is part of technical mandatory fields and doesn't need to be added here\t\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintPriority\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaintPriorityDesc\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintenanceActivityType\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaintenanceActivityTypeName\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"FunctionalLocationName\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"FunctionalLocation\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"EquipmentName\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"Equipment\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"TechnicalObjectDescription\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"TechnicalObjectLabel\";\r\n\t\t\t\t\t\t// Adding technical object type fields as those will be required to display correct data in the popover\r\n\t\t\t\t\t\tif (this._sOrderAppStateFields.indexOf(\"TechObjIsEquipOrFuncnlLoc\") === -1) {\r\n\t\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" +\r\n\t\t\t\t\t\t\t\t\"TechObjIsEquipOrFuncnlLocDesc,TechObjIsEquipOrFuncnlLoc\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"TechObjIsEquipOrFuncnlLocDesc\":\r\n\t\t\t\t\t\t//Check if the technical object type fields is already added\r\n\t\t\t\t\t\tif (this._sOrderAppStateFields.indexOf(\"TechObjIsEquipOrFuncnlLoc\") === -1) {\r\n\t\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\t\"TechObjIsEquipOrFuncnlLoc\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaterialStatusText\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaterialStatus\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationDuration\":\r\n\t\t\t\t\t\t//don't add operation duration field as it is an operation field and shall be empty for order row\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationPlannedWork\":\r\n\t\t\t\t\t\t//don't add planned work field as it is an operation field and shall be empty for order row\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationControlKey\":\r\n\t\t\t\t\t\t//don't add control key field as it is an operation field and shall be empty for order row\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"PlannedStartDate\":\r\n\t\t\t\t\t\t//don't add planned start date field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"PlannedEndDate\":\r\n\t\t\t\t\t\t//don't add planned end date field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"PlannedStartTime\":\r\n\t\t\t\t\t\t//don't add planned start time field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"PlannedEndTime\":\r\n\t\t\t\t\t\t//don't add planned end time field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOpExecutionStageName\":\r\n\t\t\t\t\t\t//don't add execution stage name field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOpExecStageShortText\":\r\n\t\t\t\t\t\t//don't add execution stage description field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationPersonResponsible\":\r\n\t\t\t\t\t\t//don't add person responsible field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationPersonRespName\":\r\n\t\t\t\t\t\t//don't add person responsible field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"NumberOfCapacities\":\r\n\t\t\t\t\t\t//don't add number of capacities field as it is an operation field and shall be empty for order row \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOrdProcessPhaseCode\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaintOrdProcessPhaseDesc\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOrdProcessSubPhaseCode\":\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaintOrdProcessSubPhaseDesc\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"ProcessingStatus\":\r\n\t\t\t\t\t\t//don't add processing status field as it is part of technially mandatory field list already\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationHasLongText\":\r\n\t\t\t\t\t\t//don't add operation long text as it is an operation field only\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"HasError\":\r\n\t\t\t\t\t\t//don't add has error as it is an operation field only\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields + \",\" + aVisibleColumnsFinal[i].columnBindingName;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this._sOrderAppStateFields.startsWith(\",\", 0)) {\r\n\t\t\t\t\t\tthis._sOrderAppStateFields = this._sOrderAppStateFields.substring(1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//because some operation fields have different names but are filled into order fields in Gantt\r\n\t\t\t\t//filed name translation is required in some cases for &select operation requests\r\n\t\t\t\t//furthermore some fields have multiple inputs e.g. duration and duration unit\r\n\t\t\t\t//therefore ensure both fields are part of $select\r\n\t\t\t} else {\r\n\t\t\t\tthis._sOperationAppStateFields = \"\";\r\n\t\t\t\tfor (var j = 0; j < aVisibleColumnsFinal.length; j++) {\r\n\t\t\t\t\tswitch (aVisibleColumnsFinal[j].columnBindingName) {\r\n\t\t\t\t\tcase \"MainWorkCenter\":\r\n\t\t\t\t\t\t//don't add work center field as it is part of technially mandatory field list already\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOrdProcessPhaseCode\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" +\r\n\t\t\t\t\t\t\t\"MaintOrdOpProcessPhaseCode\" + \",\" + \"MaintOrdOpProcessPhaseDesc\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOrdProcessSubPhaseCode\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" +\r\n\t\t\t\t\t\t\t\"MaintOrdOpProcessSubPhaseCode\" + \",\" + \"MaintOrdOpProcessSubPhaseDesc\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintenanceOrder\":\r\n\t\t\t\t\t\t//don't add processing status field as it is part of technially mandatory field list already (needed as there for implicit sorting by key)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"ProcessingStatus\":\r\n\t\t\t\t\t\t//don't add processing status field as it is part of technially mandatory field list already\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintPriority\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaintPriorityDesc\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OrderSystemConditionText\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"OperationSystemCondition,OperationSystemConditionText\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintenanceActivityType\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaintenanceActivityTypeName\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"FunctionalLocationName\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"FunctionalLocation,OperationFunctionalLocation,OpFunctionalLocationName\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"EquipmentName\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"Equipment,OperationEquipment,OperationEquipmentName\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"TechnicalObjectDescription\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"TechnicalObjectLabel,OperationTechnicalObjectLabel,OperationTechnicalObjectDesc\";\r\n\t\t\t\t\t\t// Adding technical object type fields as it will be required to do show correct data in the popover \r\n\t\t\t\t\t\tif (this._sOperationAppStateFields.indexOf(\"OpTechObjEquipOrFuncnlLoc\") === -1) {\r\n\t\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" +\r\n\t\t\t\t\t\t\t\t\"TechObjIsEquipOrFuncnlLoc,TechObjIsEquipOrFuncnlLocDesc,OpTechObjEquipOrFuncnlLoc,OpTechObjEquipOrFuncnlLocDesc\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"TechObjIsEquipOrFuncnlLocDesc\":\r\n\t\t\t\t\t\t//Check if the technical object type fields is already added\r\n\t\t\t\t\t\tif (this._sOperationAppStateFields.indexOf(\"OpTechObjEquipOrFuncnlLoc\") === -1) {\r\n\t\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\t\"TechObjIsEquipOrFuncnlLoc,OpTechObjEquipOrFuncnlLoc,OpTechObjEquipOrFuncnlLocDesc\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationDuration\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"OperationDurationUnit\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"OperationPlannedWork\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"OperationPlannedWorkUnit\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaterialStatusText\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"MaterialStatus\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOrdBasicStartDate\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"OrderStartDateTime\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"MaintOrdBasicEndDate\":\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName + \",\" +\r\n\t\t\t\t\t\t\t\"OrderEndDateTime\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis._sOperationAppStateFields = this._sOperationAppStateFields + \",\" + aVisibleColumnsFinal[j].columnBindingName;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * creates final $select for operations query and sets it into sCustomParams of the rows binding\r\n\t\t * @public\r\n\t\t */\r\n\t\tsetFinalSelectForOperationRequest: function () {\r\n\t\t\tvar bGetForOrders = false;\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oBinding = oTreeTable.getBinding(\"rows\");\r\n\t\t\tvar bCalledDuringInitialization = false;\r\n\t\t\tvar sSelectSubString = \"\";\r\n\t\t\tvar sExpandSubString = \"\";\r\n\r\n\t\t\tthis._determineVisibleColumnsFromAppState(bGetForOrders, bCalledDuringInitialization);\r\n\t\t\tthis._sSelectString = \"$select=\" + this._sOperationAllTechMandatoryFields + this._sOperationAppStateFields;\r\n\t\t\t//add to_Relationships association only if relationships user setting is active to save some performance reading relationships\r\n\t\t\tif (oUIModel.getProperty(\"/showImpRel\") || oUIModel.getProperty(\"/showExpRel\")) {\r\n\t\t\t\tsSelectSubString = \"to_Relationships\";\r\n\t\t\t\tsExpandSubString = \"&$expand=to_Relationships\";\r\n\t\t\t}\r\n\t\t\tif (oUIModel.getProperty(\"/showUtilizationIndicator\")) {\r\n\t\t\t\tsSelectSubString = sSelectSubString ? sSelectSubString + \",\" + \"to_UtilIndicator\" : \"to_UtilIndicator\";\r\n\t\t\t\tsExpandSubString = sExpandSubString ? sExpandSubString + \",\" + \"to_UtilIndicator\" : \"&$expand=to_UtilIndicator\";\r\n\t\t\t}\r\n\t\t\toBinding.sCustomParams = sSelectSubString ? this._sSelectString + \",\" + sSelectSubString + sExpandSubString : this._sSelectString;\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * creates final $select for order query and sets it into sCustomParams of the rows binding\r\n\t\t * @public\r\n\t\t */\r\n\t\tsetFinalSelectForOrderRequest: function (bCalledDuringInitialization, sManualAddedColumnName) {\r\n\t\t\tvar bGetForOrders = true;\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oBinding = oTreeTable.getBinding(\"rows\");\r\n\t\t\tvar sSelectSubString = \"\";\r\n\t\t\tvar sExpandSubString = \"\";\r\n\r\n\t\t\tthis._determineVisibleColumnsFromAppState(bGetForOrders, bCalledDuringInitialization, sManualAddedColumnName);\r\n\r\n\t\t\t//sting from the app state can be empty in case all columns are hidden except Maintenance Order column\r\n\t\t\tif (this._sOrderAppStateFields) {\r\n\t\t\t\tthis._sSelectString = \"$select=\" + this._sOrderAllTechMandatoryFields + \",\" + this._sOrderAppStateFields;\r\n\t\t\t} else {\r\n\t\t\t\tthis._sSelectString = \"$select=\" + this._sOrderAllTechMandatoryFields;\r\n\t\t\t}\r\n\r\n\t\t\t//add to_Relationships association only if relationships user setting is active to save some performance reading relationships\r\n\t\t\tif (oUIModel.getProperty(\"/showImpRel\") || oUIModel.getProperty(\"/showExpRel\")) {\r\n\t\t\t\tsSelectSubString = \"to_Relationships\";\r\n\t\t\t\tsExpandSubString = \"&$expand=to_Relationships\";\r\n\t\t\t}\r\n\t\t\tif (oUIModel.getProperty(\"/showUtilizationIndicator\")) {\r\n\t\t\t\tsSelectSubString = sSelectSubString ? sSelectSubString + \",\" + \"to_UtilIndicator\" : \"to_UtilIndicator\";\r\n\t\t\t\tsExpandSubString = sExpandSubString ? sExpandSubString + \",\" + \"to_UtilIndicator\" : \"&$expand=to_UtilIndicator\";\r\n\t\t\t}\r\n\t\t\toBinding.sCustomParams = sSelectSubString ? this._sSelectString + \",\" + sSelectSubString + sExpandSubString : this._sSelectString;\r\n\r\n\t\t\t//set back the sorter for treetable to sorting of order fields to make sure to correct order by is in the request\r\n\t\t\tif (oBinding.aSorters && oBinding.aSorters.length >= 1 && oBinding.aSorters[0].sPath === this.sSortOperationField) {\r\n\t\t\t\toBinding.aSorters[0].sPath = this.sSortOrderField;\r\n\t\t\t\toBinding.aSorters[0].bDescending = this.sOrderSortOrder === \"Descending\" ? true : false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * called each time binding of Gantt rows is changed\r\n\t\t * @public\r\n\t\t */\r\n\t\t_onChange: function (oEvent) {\r\n\t\t\tvar eventParam = oEvent.getParameters();\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oBinding = oTreeTable.getBinding(\"rows\");\r\n\r\n\t\t\t//If expand is pressed, then the next batch request will be for the operations.\r\n\t\t\t//Hence $select order header specific fields shall not be part of the batch request\r\n\t\t\t//This is due to analytical CDS view logic applied on smart filter based on operation fields\r\n\t\t\t//instead pass $selec fields for operation request\r\n\t\t\tif (eventParam && eventParam.reason === \"expand\") {\r\n\r\n\t\t\t\tthis.setFinalSelectForOperationRequest();\r\n\r\n\t\t\t\t//Because dataReceived event of the first paging request is raised after the _onChange of the second page is called,\r\n\t\t\t\t//we need to assume as default that there will be more than one paging request\r\n\t\t\t\t//If this is not the case, it will be re-validated in the function handler of dataReceived event\r\n\t\t\t\t//see above in _initBindingEventHandlers\r\n\t\t\t\tthis._bPagingRequestOfSubnodes = true;\r\n\r\n\t\t\t\t//consider operation sort while expanding as well\r\n\t\t\t\t//this condition is for when the filter go is pressed and the sorting is reset\r\n\t\t\t\t//table column sorting order is set with  RowLevel = 0 field values\r\n\t\t\t\tif (oTreeTable.getSortedColumns().length !== 0) {\r\n\t\t\t\t\tif (this._afilterFieldGroups.indexOf(oTreeTable.getSortedColumns()[0].getSortProperty()) !== -1 ||\r\n\t\t\t\t\t\toTreeTable.getSortedColumns()[0].getSortProperty() === \"MainWorkCenter\" || oTreeTable.getSortedColumns()[0].getSortProperty() ===\r\n\t\t\t\t\t\t\"MaintOrdProcessPhaseCode\" ||\r\n\t\t\t\t\t\toTreeTable.getSortedColumns()[0].getSortProperty() === \"MaintOrdProcessSubPhaseCode\" ||\r\n\t\t\t\t\t\toTreeTable.getSortedColumns()[0].getSortProperty() === \"MaintenanceOrder\") {\r\n\t\t\t\t\t\toBinding.aSorters[0].sPath = this.sSortOperationField;\r\n\t\t\t\t\t\toBinding.aSorters[0].bDescending = this.sOperationSortOrder === \"Descending\" ? true : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//in case sorting was done befor expand, oTreeTable.getSortedColumns() is empty,\r\n\t\t\t\t\t//hence oBinding.aSorters needs to be checked in addition\r\n\t\t\t\t} else if (oBinding.aSorters.length !== 0) {\r\n\t\t\t\t\tif (oBinding.aSorters[0].sPath === \"MainWorkCenter\" ||\r\n\t\t\t\t\t\toBinding.aSorters[0].sPath === \"MaintOrdProcessPhaseCode\" ||\r\n\t\t\t\t\t\toBinding.aSorters[0].sPath === \"MaintOrdProcessSubPhaseCode\" ||\r\n\t\t\t\t\t\toBinding.aSorters[0].sPath === \"MaintenanceOrder\") {\r\n\t\t\t\t\t\toBinding.aSorters[0].sPath = this.sSortOperationField;\r\n\t\t\t\t\t\toBinding.aSorters[0].bDescending = this.sOperationSortOrder === \"Descending\" ? true : false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (eventParam && eventParam.reason === \"sort\") {\r\n\t\t\t\t// For RowLevel = 0, onChange method is triggered but no need to change anything.\r\n\t\t\t\t// For RowLevel = 1, sort binding path is changed only for the operation columns.\r\n\t\t\t\tif (this._afilterFieldGroups.indexOf(this.sSortOperationField) !== -1 || this.sSortOperationField === \"WorkCenter\" ||\r\n\t\t\t\t\tthis.sSortOperationField === \"MaintenanceOrderOperation\" || this.sSortOperationField === \"OpFunctionalLocationName\" ||\r\n\t\t\t\t\tthis.sSortOperationField === \"OperationEquipmentName\" || this.sSortOperationField === \"OperationTechnicalObjectDesc\" ||\r\n\t\t\t\t\tthis.sSortOperationField === \"OperationSystemConditionText\" || this.sSortOperationField === \"MaintOrdOpProcessPhaseCode\" || this.sSortOperationField ===\r\n\t\t\t\t\t\"MaintOrdOpProcessSubPhaseCode\") {\r\n\t\t\t\t\toBinding.aSorters[0].sPath = this.sSortOperationField;\r\n\t\t\t\t\toBinding.aSorters[0].bDescending = this.sOperationSortOrder === \"Descending\";\r\n\t\t\t\t}\r\n\t\t\t\t//set $select for operation request\r\n\t\t\t\tthis.setFinalSelectForOperationRequest();\r\n\t\t\t}\r\n\t\t\t//Raise an event to which other functions can subscribe if an individual action is needed at this point of time \r\n\t\t\t//but should not always be done when _onChange is executed or cannot be identified properly with other values\r\n\t\t\tsap.ui.getCore().getEventBus().publish(this.sOrderGanttChannel, this.sIndiviudalActionOnGanttChange, this);\r\n\t\t\t\r\n\t\t\tif (this._bActionInitiatedFromContextMenu === true) {\r\n\t\t\t\tthis.updateToolbarButtonsFromSelectedRows();\r\n\t\t\t\tthis._bActionInitiatedFromContextMenu = false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Common method to set the FilterBar with filter values from navigation params\r\n\t\t * @public\r\n\t\t */\r\n\t\tsetNavParamstoFilterBar: function () {\r\n\t\t\tvar oStartupParameters = this._oOwnerComponent.getComponentData().startupParameters;\r\n\t\t\tvar oJSONData = {};\r\n\t\t\tvar oSmartFilter = this.getView().byId(\"idOrderGanttSmartFilterBar\");\r\n\r\n\t\t\t/* Commenting this part as it is not needed presently but might be needed in future implementations as suggested by Kritika\r\n\t\t\t// if (this._oOwnerComponent.oGlobalFilter) {\r\n\t\t\t// \tif (this._oOwnerComponent.oGlobalFilter.selectionVariantOptions &&\r\n\t\t\t// \t\tthis._oOwnerComponent.oGlobalFilter.selectionVariantOptions.length > 0) {\r\n\t\t\t// \t\tvar navSelectionVariant = new sap.ui.comp.state.UIState();\r\n\t\t\t// \t\tnavSelectionVariant.setSelectionVariant({\r\n\t\t\t// \t\t\t\"SelectionVariantID\": \"\",\r\n\t\t\t// \t\t\t\"SelectOptions\": this._oOwnerComponent.oGlobalFilter.selectionVariantOptions\r\n\t\t\t// \t\t});\r\n\t\t\t// \t\tthis._oOwnerComponent.oGlobalFilter.selectionVariantOptions.forEach(function (oSelOption) {\r\n\t\t\t// \t\t\tif (oSmartFilter.getControlByKey(oSelOption.PropertyName)) {\r\n\t\t\t// \t\t\t\toSmartFilter.addFieldToAdvancedArea(oSelOption.PropertyName);\r\n\t\t\t// \t\t\t}\r\n\t\t\t// \t\t});\r\n\t\t\t// \t\toSmartFilter.setUiState(navSelectionVariant, {\r\n\t\t\t// \t\t\treplace: true,\r\n\t\t\t// \t\t\tstrictMode: false\r\n\t\t\t// \t\t});\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\t\t\t*/\r\n\r\n\t\t\tif (oStartupParameters) {\r\n\t\t\t\toJSONData = this.getGlobalFilter(oStartupParameters, oJSONData);\r\n\t\t\t}\r\n\r\n\t\t\tObject.keys(oStartupParameters).forEach(function (key, index) {\r\n\t\t\t\tif (oSmartFilter.getControlByKey(key)) {\r\n\t\t\t\t\toSmartFilter.addFieldToAdvancedArea(key);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\toSmartFilter.setFilterData(oJSONData);\r\n\t\t\toSmartFilter.getVariantManagement().currentVariantSetModified(true);\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Get filters to be set in FilterBar from startup parameters\r\n\t\t * @param {Json} oStartupParameters startup parameters\r\n\t\t * @param {Json} oJSONData filter data\r\n\t\t * @returns {Json} oFinJSONData final filter data\r\n\t\t */\r\n\t\tgetGlobalFilter: function (oStartupParameters, oJSONData) {\r\n\t\t\tvar aItems = [];\r\n\t\t\tvar oPriorityValue = {};\r\n\t\t\tvar oStatusValue = {};\r\n\t\t\tvar oWorkCenterValue = {};\r\n\r\n\t\t\t// Pick Priority parameter from Startup Parameters\r\n\t\t\tif (oStartupParameters.MaintPriority) {\r\n\t\t\t\toPriorityValue.key = oStartupParameters.MaintPriority[0];\r\n\r\n\t\t\t\tif (oStartupParameters.MaintPriorityDesc) {\r\n\t\t\t\t\toPriorityValue.text = oStartupParameters.MaintPriorityDesc[0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\toPriorityValue.text = oPriorityValue.key;\r\n\t\t\t\t}\r\n\t\t\t\taItems.push(oPriorityValue);\r\n\t\t\t\tif (!oJSONData.MaintPriority) {\r\n\t\t\t\t\toJSONData.MaintPriority = {};\r\n\t\t\t\t}\r\n\t\t\t\toJSONData.MaintPriority.items = aItems;\r\n\t\t\t}\r\n\t\t\taItems = [];\r\n\t\t\t// Pick Processing Status from Startup Parameters\r\n\t\t\tif (oStartupParameters.ProcessingStatus) {\r\n\t\t\t\toStatusValue.key = oStartupParameters.ProcessingStatus[0];\r\n\t\t\t\taItems.push(oStatusValue);\r\n\t\t\t\tif (!oJSONData.ProcessingStatus) {\r\n\t\t\t\t\toJSONData.ProcessingStatus = {};\r\n\t\t\t\t}\r\n\t\t\t\toJSONData.ProcessingStatus.items = aItems;\r\n\t\t\t}\r\n\t\t\taItems = [];\r\n\t\t\t// Pick WorkCenter from Startup Parameters\r\n\t\t\tif (oStartupParameters.WorkCenter) {\r\n\t\t\t\toWorkCenterValue.key = oStartupParameters.WorkCenter[0];\r\n\t\t\t\toWorkCenterValue.text = oStartupParameters.WorkCenter[0];\r\n\t\t\t\taItems.push(oWorkCenterValue);\r\n\t\t\t\tif (!oJSONData.WorkCenter) {\r\n\t\t\t\t\toJSONData.WorkCenter = {};\r\n\t\t\t\t}\r\n\t\t\t\toJSONData.WorkCenter.items = aItems;\r\n\t\t\t}\r\n\r\n\t\t\t// While navigating into this app with Maintenance Order (e.g. from Order tab of Details App)\r\n\t\t\tif (oStartupParameters.MaintenanceOrder) {\r\n\t\t\t\tif (!oJSONData.MaintenanceOrder) {\r\n\t\t\t\t\toJSONData.MaintenanceOrder = {};\r\n\t\t\t\t}\r\n\t\t\t\toJSONData.MaintenanceOrder.items = [];\r\n\t\t\t\tvar sMaintenanceOrders = decodeURIComponent(oStartupParameters.MaintenanceOrder);\r\n\t\t\t\tvar aMaintenanceOrders = sMaintenanceOrders.split(\",\");\r\n\t\t\t\taMaintenanceOrders.forEach(function pushOrder(item) {\r\n\t\t\t\t\toJSONData.MaintenanceOrder.items.push({\r\n\t\t\t\t\t\t\"key\": item,\r\n\t\t\t\t\t\t\"text\": item\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Pick PeriodType from Startup Parameters\r\n\t\t\tif (oStartupParameters.PeriodType) {\r\n\t\t\t\tvar oFinJSONData = this.getPeriodTypeData(oStartupParameters, oJSONData);\r\n\t\t\t}\r\n\r\n\t\t\treturn oFinJSONData;\r\n\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Returns the Date range for given startup parameters and current filter data\r\n\t\t * @param {Object} oStartupParameters  Startup paramters\r\n\t\t * @param {Object} oJSONData  Current filter data\r\n\t\t * @returns {Object} updated date range filter data based on startup paramters\r\n\t\t */\r\n\t\tgetPeriodTypeData: function (oStartupParameters, oJSONData) {\r\n\t\t\tvar oRanges = {};\r\n\t\t\tvar conditionTypeInfo = {};\r\n\t\t\tconditionTypeInfo.data = {};\r\n\t\t\tvar oStartDateNext = new Date();\r\n\t\t\tvar oEndDateNext = new Date();\r\n\t\t\tvar oStartDatePast = new Date();\r\n\t\t\tvar oEndDatePast = new Date();\r\n\t\t\tvar aItems = [];\r\n\t\t\toEndDatePast.setDate(oEndDatePast.getDate() - 1);\r\n\t\t\t// Set the date to today + 4 weeks\r\n\t\t\t// Then set it to the previous Sunday\r\n\t\t\toEndDateNext.setDate(oEndDateNext.getDate() + 28);\r\n\t\t\toEndDateNext.setDate(oEndDateNext.getDate() - (oEndDateNext.getDay() + 7) % 7);\r\n\t\t\toStartDatePast.setMonth(oStartDatePast.getMonth() - 6);\r\n\r\n\t\t\tif (oStartupParameters.PeriodType) {\r\n\t\t\t\tconditionTypeInfo.name = \"custom.oDateRange\";\r\n\t\t\t\tconditionTypeInfo.data.calendarType = \"Gregorian\";\r\n\t\t\t\tconditionTypeInfo.data.key = \"PeriodType\";\r\n\r\n\t\t\t\tif (oStartupParameters.PeriodType[0] === \"FUTURE\") { // next 4 week\r\n\t\t\t\t\tconditionTypeInfo.data.operation = \"FISCALPERIOD0\";\r\n\t\t\t\t\toRanges.Operations = \"BT\";\r\n\t\t\t\t\toRanges.value1 = oStartDateNext;\r\n\t\t\t\t\toRanges.value2 = oEndDateNext;\r\n\t\t\t\t} else if (oStartupParameters.PeriodType[0] === \"PAST\") { // past 6 months\r\n\t\t\t\t\tconditionTypeInfo.data.operation = \"DATERANGE\";\r\n\t\t\t\t\tconditionTypeInfo.data.value1 = oStartDatePast;\r\n\t\t\t\t\tconditionTypeInfo.data.value2 = oEndDatePast;\r\n\t\t\t\t\toRanges.Operations = \"BT\";\r\n\t\t\t\t\toRanges.value1 = oStartDatePast;\r\n\t\t\t\t\toRanges.value2 = oEndDatePast;\r\n\t\t\t\t} else if (oStartupParameters.PeriodType[0] === \"CUSTOM\") { // custom\r\n\t\t\t\t\tthis._getCustomPeriodDate(oStartupParameters, oStartDateNext, oEndDateNext, conditionTypeInfo, oRanges, \"DATERANGE\");\r\n\t\t\t\t} else if (oStartupParameters.PeriodType[0] === \"CUSTOM_TODAYFROMTO\") {\r\n\t\t\t\t\tthis._getCustomPeriodDate(oStartupParameters, oStartDateNext, oEndDateNext, conditionTypeInfo, oRanges, \"TODAYFROMTO\");\r\n\t\t\t\t}\r\n\t\t\t\taItems.push(oRanges);\r\n\t\t\t\tif (!oJSONData.PeriodType) {\r\n\t\t\t\t\toJSONData.PeriodType = {};\r\n\t\t\t\t}\r\n\t\t\t\toJSONData.PeriodType.ranges = aItems;\r\n\t\t\t\toJSONData.PeriodType.conditionTypeInfo = conditionTypeInfo;\r\n\t\t\t}\r\n\t\t\treturn oJSONData;\r\n\r\n\t\t},\r\n\t\t_getCustomPeriodDate: function (oStartupParameters, oStartDateNext, oEndDateNext, conditionTypeInfo, oRanges, sOperation) {\r\n\t\t\tif (oStartupParameters.PeriodStartDate && oStartupParameters.PeriodEndDate) {\r\n\t\t\t\tif (sOperation === \"DATERANGE\") {\r\n\t\t\t\t\toStartDateNext = this.getValidDate(decodeURIComponent(oStartupParameters.PeriodStartDate[0]));\r\n\t\t\t\t\toEndDateNext = this.getValidDate(decodeURIComponent(oStartupParameters.PeriodEndDate[0]));\r\n\t\t\t\t\tif (oStartDateNext && oEndDateNext) {\r\n\t\t\t\t\t\t// we got everything - CUSTOM Period with start and end date. Set the filter accordingly\r\n\t\t\t\t\t\tconditionTypeInfo.data.operation = sOperation;\r\n\t\t\t\t\t\tconditionTypeInfo.data.value1 = oStartDateNext;\r\n\t\t\t\t\t\tconditionTypeInfo.data.value2 = oEndDateNext;\r\n\t\t\t\t\t\toRanges.Operation = \"BT\";\r\n\t\t\t\t\t\toRanges.value1 = oStartDateNext;\r\n\t\t\t\t\t\toRanges.value2 = oEndDateNext;\r\n\t\t\t\t\t\toRanges.exclude = false;\r\n\t\t\t\t\t\toRanges.keyField = \"PeriodType\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconditionTypeInfo.data.operation = sOperation;\r\n\t\t\t\t\tconditionTypeInfo.data.value1 = oStartupParameters.PeriodStartDate[0];\r\n\t\t\t\t\tconditionTypeInfo.data.value2 = oStartupParameters.PeriodEndDate[0];\r\n\t\t\t\t\toRanges.Operation = \"BT\";\r\n\t\t\t\t\toRanges.value1 = oStartupParameters.PeriodStartDate[0];\r\n\t\t\t\t\toRanges.value2 = oStartupParameters.PeriodEndDate[0];\r\n\t\t\t\t\toRanges.exclude = false;\r\n\t\t\t\t\toRanges.keyField = \"PeriodType\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Converts Date String strigified from date object which is passed as arguement to YYYYMMDD format and returns it\r\n\t\t * @param {string} dateString String date that needs to be converted to date object in YYYYMMDD format\r\n\t\t * @returns {string} Parsed Date object in Gateway oData format (best for filter conditions)\r\n\t\t */\r\n\t\tgetValidDate: function (dateString) {\r\n\t\t\tvar dDateObject = new Date(dateString);\r\n\t\t\tif (dDateObject instanceof Date && !isNaN(dDateObject)) {\r\n\t\t\t\treturn Utils.convertDateToGatewayString(dDateObject);\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_initTreeTableBinding: function () {\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\toTreeTable.bindRows({\r\n\t\t\t\tpath: \"/C_RSHOrdersAndOperations\",\r\n\t\t\t\tparameters: {\r\n\t\t\t\t\ttreeAnnotationProperties: {\r\n\t\t\t\t\t\thierarchyLevelFor: \"OrderOperationRowLevel\",\r\n\t\t\t\t\t\thierarchyNodeFor: \"OrderOperationRowID\",\r\n\t\t\t\t\t\thierarchyParentNodeFor: \"OrderOperationParentRowID\",\r\n\t\t\t\t\t\thierarchyDrillStateFor: \"OrderOperationIsExpanded\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tgantt: {\r\n\t\t\t\t\t\trowIdName: \"OrderOperationRowID\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tgroupId: \"iDBatchOrderFilterRequest\"\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tvar bCalledDuringInitialization = true;\r\n\t\t\tthis.setFinalSelectForOrderRequest(bCalledDuringInitialization);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Formatter method for adding initial time to calendar date\r\n\t\t * @public\r\n\t\t * @param {Date} [dCalendarDate] Calendar Date\r\n\t\t * @returns {Date} formatted date\r\n\t\t */\r\n\t\tformatStartTime: function (dCalendarDate) {\r\n\t\t\tif (dCalendarDate) {\r\n\t\t\t\tvar oDate = this.removeTimeZoneOffset(dCalendarDate);\r\n\t\t\t\toDate.setHours(0, 0, 0, 0);\r\n\t\t\t\treturn oDate;\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Colour formatter for utilization shapes based on values of utilization\r\n\t\t * @public\r\n\t\t * @param {Float} [fWorkCenterUtilization] Utilization percentage\r\n\t\t * @returns {String} semantic colour for indicating the percentage\r\n\t\t */\r\n\t\tgetUtilizationColor: function (fWorkCenterUtilization) {\r\n\t\t\tif (fWorkCenterUtilization >= 0 && fWorkCenterUtilization < 75) {\r\n\t\t\t\treturn \"@sapUiShellPositiveColor\";\r\n\t\t\t}\r\n\t\t\tif (fWorkCenterUtilization >= 75 && fWorkCenterUtilization <= 100) {\r\n\t\t\t\treturn \"@sapUiShellCriticalColor\";\r\n\t\t\t}\r\n\t\t\tif (fWorkCenterUtilization > 100) {\r\n\t\t\t\treturn \"@sapUiShellNegativeColor\";\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t},\r\n\r\n\t\t/* Formatter for Tooltip text of Utilization shapes\r\n\t\t * @public\r\n\t\t * @param {Float} [fWorkCenterUtilization] Utilization value\r\n\t\t * @param {String} [sWorkCenterAvailableCapacity] Available Capacity in scientific notation\r\n\t\t * @param {String} [sWorkCenterRequiredCapacity] Required Capacity in scientific notation\r\n\t\t * @returns {String} Formatted Tooltip\r\n\t\t */\r\n\t\tgetTooltipForUtilization: function (fWorkCenterUtilization, sWorkCenterRequiredCapacity, sWorkCenterAvailableCapacity) {\r\n\t\t\treturn this.getView().getModel(\"i18n\").getResourceBundle().getText(\r\n\t\t\t\t\"UtilizationTooltip\", [Math.round(fWorkCenterUtilization), Math.round(parseFloat(sWorkCenterRequiredCapacity)), Math.round(\r\n\t\t\t\t\tparseFloat(sWorkCenterAvailableCapacity))]);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * shapePress Event triggered on Pressing a shape. Additionally, selectable needs to be enabled for the shape.\r\n\t\t * Selects the row for shapes aggregation of shapes1\r\n\t\t * @public\r\n\t\t * @param {Object} [oEvent] Event object\r\n\t\t */\r\n\t\t/*onShapePressed: function (oEvent) {\r\n\t\t\tvar oShape = oEvent.getParameter(\"shape\");\r\n\t\t\tif (oShape && oShape.sParentAggregationName === \"shapes\") {\r\n\t\t\t\tvar oTreeTable = oEvent.getSource().getTable(); // This gets the tree table\r\n\t\t\t\tvar oRow = oEvent.getParameter(\"rowSettings\").getParent(); // This gets the row of selected shape\r\n\t\t\t\tvar iRowIndexOfSelectedShape = oRow.getIndex(); //This gets index of the row of selected shape\r\n\t\t\t\toTreeTable.addSelectionInterval(iRowIndexOfSelectedShape, iRowIndexOfSelectedShape);\r\n\t\t\t}\r\n\t\t},*/\r\n\r\n\t\t/*\r\n\t\t * Lister for initializing the smart filter bar.\r\n\t\t * @public\r\n\t\t * @param {sap.ui.Event} [oEvent] event instance\r\n\t\t */\r\n\t\tonInitSmartFilter: function (oEvent) {\r\n\t\t\tthis._initTreeTableBinding();\r\n\t\t\tthis._initBindingEventHandlers();\r\n\t\t\t//var oAdditionalDateRangeFilterBlock = this.getAdditionalDateRangeFilterBlock();\r\n\t\t\tvar oBinding = this.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\");\r\n\t\t\t//oBinding.filter(oAdditionalDateRangeFilterBlock, sap.ui.model.FilterType.Application);\r\n\t\t\toBinding.refresh();\r\n\t\t\tthis.setNavParamstoFilterBar();\r\n\t\t},\r\n\r\n\t\tgetAdditionalDateRangeFilterBlock: function (bGetTimePeriod) {\r\n\t\t\tvar oAdditionalDateRangeFilterBlock = {};\r\n\t\t\tvar oPeriodTypeDates = {};\r\n\t\t\tif (Utils.isMockRun()) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\r\n\t\t\tvar oFilterData = this.getView().byId(\"idOrderGanttSmartFilterBar\").getFilterData();\r\n\t\t\tif (!oFilterData || (oFilterData && !oFilterData.PeriodType)) {\r\n\t\t\t\toPeriodTypeDates = {\r\n\t\t\t\t\toStartDate: new Date(),\r\n\t\t\t\t\toEndDate: new Date()\r\n\t\t\t\t};\r\n\r\n\t\t\t\toPeriodTypeDates.oEndDate.setDate(oPeriodTypeDates.oEndDate.getDate() + 28);\r\n\t\t\t\toPeriodTypeDates.oEndDate.setDate(oPeriodTypeDates.oEndDate.getDate() - (oPeriodTypeDates.oEndDate.getDay() + 7) % 7);\r\n\r\n\t\t\t} else {\r\n\t\t\t\toPeriodTypeDates = {\r\n\t\t\t\t\t// oStartDate: oFilterData.PeriodType.ranges[0].value1,\r\n\t\t\t\t\t// oEndDate: oFilterData.PeriodType.ranges[0].value2\r\n\t\t\t\t\toStartDate: this.dateObjectCopy(oFilterData.PeriodType.ranges[0].value1),\r\n\t\t\t\t\toEndDate: this.dateObjectCopy(oFilterData.PeriodType.ranges[0].value2)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (bGetTimePeriod) {\r\n\t\t\t\treturn oPeriodTypeDates;\r\n\t\t\t}\r\n\r\n\t\t\tvar oEarliestStartDateFilter = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"OpErlstSchedldExecStrtDte\",\r\n\t\t\t\tvalue1: Utils.getAdjustedDate(oPeriodTypeDates.oEndDate),\r\n\t\t\t\toperator: \"LE\"\r\n\t\t\t});\r\n\t\t\tvar oEarliestEndDateFilter = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"OpErlstSchedldExecEndDte\",\r\n\t\t\t\tvalue1: Utils.getAdjustedDate(oPeriodTypeDates.oStartDate),\r\n\t\t\t\toperator: \"GE\"\r\n\t\t\t});\r\n\t\t\tvar oLatestStartDateFilter = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"OpLtstSchedldExecStrtDte\",\r\n\t\t\t\tvalue1: Utils.getAdjustedDate(oPeriodTypeDates.oEndDate),\r\n\t\t\t\toperator: \"LE\"\r\n\t\t\t});\r\n\t\t\tvar oLatestEndDateFilter = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"OpLtstSchedldExecEndDte\",\r\n\t\t\t\tvalue1: Utils.getAdjustedDate(oPeriodTypeDates.oStartDate),\r\n\t\t\t\toperator: \"GE\"\r\n\t\t\t});\r\n\t\t\tvar oSchedulingIsPerformedBackward = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"SchedulingIsPerformedBackward\",\r\n\t\t\t\tvalue1: \"X\",\r\n\t\t\t\toperator: \"EQ\"\r\n\t\t\t});\r\n\t\t\tvar oSchedulingIsNotPerformedBackward = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"SchedulingIsPerformedBackward\",\r\n\t\t\t\tvalue1: \" \",\r\n\t\t\t\toperator: \"EQ\"\r\n\t\t\t});\r\n\t\t\tvar oEarliestStartDateFilterMonths = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"OpErlstSchedldExecEndDte\",\r\n\t\t\t\tvalue1: Utils.getAdjustedDate(oPeriodTypeDates.oEndDate),\r\n\t\t\t\toperator: \"LE\"\r\n\t\t\t});\r\n\t\t\tvar oLatestStartDateFilterMonths = new sap.ui.model.Filter({\r\n\t\t\t\tpath: \"OpLtstSchedldExecEndDte\",\r\n\t\t\t\tvalue1: Utils.getAdjustedDate(oPeriodTypeDates.oEndDate),\r\n\t\t\t\toperator: \"LE\"\r\n\t\t\t});\r\n\r\n\t\t\tvar oEarliestFilterBlock = new sap.ui.model.Filter({\r\n\t\t\t\tfilters: [oEarliestStartDateFilter, oEarliestEndDateFilter, oSchedulingIsNotPerformedBackward],\r\n\t\t\t\tand: true\r\n\t\t\t});\r\n\t\t\tvar oLatestFilterBlock = new sap.ui.model.Filter({\r\n\t\t\t\tfilters: [oLatestStartDateFilter, oLatestEndDateFilter, oSchedulingIsPerformedBackward],\r\n\t\t\t\tand: true\r\n\t\t\t});\r\n\t\t\tvar oEarliestFilterBlockMonths = new sap.ui.model.Filter({\r\n\t\t\t\tfilters: [oEarliestStartDateFilterMonths, oEarliestEndDateFilter, oSchedulingIsNotPerformedBackward],\r\n\t\t\t\tand: true\r\n\t\t\t});\r\n\r\n\t\t\tvar oLatestFilterBlockMonths = new sap.ui.model.Filter({\r\n\t\t\t\tfilters: [oLatestStartDateFilterMonths, oLatestEndDateFilter, oSchedulingIsPerformedBackward],\r\n\t\t\t\tand: true\r\n\t\t\t});\r\n\r\n\t\t\tif (!oFilterData || (oFilterData && !oFilterData.PeriodType)) {\r\n\t\t\t\toAdditionalDateRangeFilterBlock = new sap.ui.model.Filter({\r\n\t\t\t\t\tfilters: [oEarliestFilterBlock, oLatestFilterBlock],\r\n\t\t\t\t\tand: false\r\n\t\t\t\t});\r\n\r\n\t\t\t} else {\r\n\t\t\t\tvar sOperation = oFilterData.PeriodType.conditionTypeInfo.data.operation;\r\n\r\n\t\t\t\tif (sOperation === \"FISCALPERIOD1\") {\r\n\t\t\t\t\toAdditionalDateRangeFilterBlock = new sap.ui.model.Filter({\r\n\t\t\t\t\t\tfilters: [oEarliestFilterBlockMonths, oLatestFilterBlockMonths],\r\n\t\t\t\t\t\tand: false\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\toAdditionalDateRangeFilterBlock = new sap.ui.model.Filter({\r\n\t\t\t\t\t\tfilters: [oEarliestFilterBlock, oLatestFilterBlock],\r\n\t\t\t\t\t\tand: false\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn oAdditionalDateRangeFilterBlock;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Threshold for model data needs to be changed based on the time period.\r\n\t\t * Default size limit is 100\r\n\t\t * Change the default only if the time period is longer\r\n\t\t * @private\r\n\t\t */\r\n\t\t_setThresholdForModelData: function () {\r\n\t\t\tvar oCurrentTimePeriod = this._getCurrentTimePeriod();\r\n\t\t\tvar iDiffTime = Math.abs(oCurrentTimePeriod.sCalendarEndDate - oCurrentTimePeriod.sCalendarStartDate);\r\n\t\t\tvar iDiffDays = Math.ceil(iDiffTime / (1000 * 60 * 60 * 24));\r\n\t\t\tif (iDiffDays > 100) {\r\n\t\t\t\tthis._oOwnerComponent.getModel().setSizeLimit(iDiffDays);\r\n\t\t\t} else if (this._oOwnerComponent.getModel().iSizeLimit > 100) {\r\n\t\t\t\tthis._oOwnerComponent.getModel().setSizeLimit(100);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Handler for smart filter Go Press Event\r\n\t\t * On application load which is this._bFirstTriggerDone,\r\n\t\t * ensure that filter requests are only triggered for the search events raised by delayedTriggerSearch.\r\n\t\t * @public\r\n\t\t * @param {object} [oEvent] event paramneter \r\n\t\t */\r\n\t\tonFilter: function (oEvent) {\r\n\t\t\tsap.ui.getCore().getMessageManager().removeAllMessages();\r\n\t\t\tthis._setTimeAxis();\r\n\t\t\tif (Utils.isMockRun()) {\r\n\t\t\t\tthis.onInitSmartFilter();\r\n\t\t\t\tthis._submitDelayedRequests();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!this._bFirstTriggerDone) {\r\n\t\t\t\tif (oEvent.getParameters() && oEvent.getParameters().hasOwnProperty(\"finalTrigger\")) {\r\n\t\t\t\t\tthis.applyAndTriggerFinalFilter(oEvent);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.applyAndTriggerFinalFilter(oEvent);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Helper for smart filter Go Press Event onFilter\r\n\t\t * Populates the Sorters and Filters\r\n\t\t * _bSubmitofDeferredRequestsDone helps in submitting deferred requests once, after which normal flow is restored.\r\n\t\t * @public\r\n\t\t * @param {object} [oEvent] event paramneter \r\n\t\t */\r\n\t\tapplyAndTriggerFinalFilter: function (oEvent) {\r\n\t\t\tvar oSmartFilter = this.getView().byId(\"idOrderGanttSmartFilterBar\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oBinding = oTreeTable.getBinding(\"rows\");\r\n\t\t\tvar oFiltersFromSmartFB = oSmartFilter.getFilters();\r\n\t\t\tvar oAdditionalDateRangeFilterBlock = {};\r\n\t\t\toAdditionalDateRangeFilterBlock = this.getAdditionalDateRangeFilterBlock();\r\n\r\n\t\t\t//Size Limit for Model Data\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tif (oUIModel.getProperty(\"/showUtilizationIndicator\") || oUIModel.getProperty(\"/showNonWorkingTimes\")) {\r\n\t\t\t\tthis._setThresholdForModelData();\r\n\t\t\t}\r\n\r\n\t\t\t// Reset sort variable to last use Order Sort \r\n\t\t\tif (oBinding.aSorters.length > 0) {\r\n\t\t\t\t//if sort is preselected before the filtering is done it should be retained\r\n\t\t\t\tif (oTreeTable.getSortedColumns().length !== 0) {\r\n\t\t\t\t\tif (this._afilterFieldGroups.indexOf(oTreeTable.getSortedColumns()[0].getSortProperty()) !== -1 ||\r\n\t\t\t\t\t\toTreeTable.getSortedColumns()[0].getSortProperty() === \"WorkCenter\" ||\r\n\t\t\t\t\t\toTreeTable.getSortedColumns()[0].getSortProperty() === \"MaintenanceOrderOperation\") {\r\n\t\t\t\t\t\tthis.sSortOperationField = oTreeTable.getSortedColumns()[0].getSortProperty();\r\n\t\t\t\t\t\tthis.sOperationSortOrder = oTreeTable.getSortedColumns()[0].getSortOrder();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//check if the current sort is for level=1 the set sort to the order level\r\n\t\t\t\toBinding.aSorters[0].sPath = this.sSortOrderField;\r\n\t\t\t\toBinding.aSorters[0].bDescending = this.sOrderSortOrder === \"Descending\";\r\n\t\t\t}\r\n\r\n\t\t\tif (oFiltersFromSmartFB && oFiltersFromSmartFB.length === 1) {\r\n\t\t\t\tvar oMergedFilterBlock = new sap.ui.model.Filter({\r\n\t\t\t\t\tfilters: [oFiltersFromSmartFB[0], oAdditionalDateRangeFilterBlock],\r\n\t\t\t\t\tand: true\r\n\t\t\t\t});\r\n\t\t\t\tvar aExistingFilters = oMergedFilterBlock.aFilters[0].aFilters;\r\n\t\t\t\tvar filterCount = 0;\r\n\t\t\t\tfor (; filterCount < aExistingFilters.length; filterCount++) {\r\n\t\t\t\t\tif ((aExistingFilters[filterCount].sPath &&\r\n\t\t\t\t\t\t\taExistingFilters[filterCount].sPath === \"PeriodType\") ||\r\n\t\t\t\t\t\t(aExistingFilters[filterCount].aFilters &&\r\n\t\t\t\t\t\t\taExistingFilters[filterCount].aFilters[0].sPath === \"PeriodType\")) {\r\n\t\t\t\t\t\taExistingFilters.splice(filterCount, 1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (aExistingFilters.length === 0) {\r\n\t\t\t\t\toMergedFilterBlock.aFilters.splice(0, 1);\r\n\t\t\t\t}\r\n\t\t\t\t//oFiltersFromSmartFB.push(oAdditionalDateRangeFilterBlock);\r\n\t\t\t\toBinding.filter(oMergedFilterBlock, sap.ui.model.FilterType.Application);\r\n\t\t\t} else {\r\n\t\t\t\toBinding.filter(oAdditionalDateRangeFilterBlock, sap.ui.model.FilterType.Application);\r\n\t\t\t}\r\n\t\t\tvar bCalledDuringInitialization = false;\r\n\t\t\t// we need to ensure $select for order request is set in sCustomParams before the next request is done\r\n\t\t\t//as the user can expand an order and immediatelly click on Go in the smart filter bar without waiting until expand is done\r\n\t\t\t//we need to always set final $select for order header request explicitely on filtering flow\r\n\t\t\tthis.setFinalSelectForOrderRequest(bCalledDuringInitialization);\r\n\t\t\toBinding.refresh();\r\n\t\t\tthis.bindCalendarDefHelper();\r\n\t\t\tif (!this._bSubmitofDeferredRequestsDone) {\r\n\t\t\t\tthis._submitDelayedRequests();\r\n\t\t\t}\r\n\t\t\t//clear the performance filter on expand as on filter all rows will be collapsed\r\n\t\t\tthis._sPerformanceFilterOnExpand = null;\r\n\t\t\tthis.disableButtons();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When filter values change, we update the status text which is shown in collapsed header\r\n\t\t * @private\r\n\t\t * @param {Object} [oEvent] Event object \r\n\t\t */\r\n\t\tonAssignedFiltersChanged: function (oEvent) {\r\n\t\t\tvar oSmartFilter = this.getView().byId(\"idOrderGanttSmartFilterBar\");\r\n\t\t\tvar oPeriodType = oSmartFilter.getControlByKey(\"PeriodType\");\r\n\r\n\t\t\tif (oPeriodType && oPeriodType.getValueState() === sap.ui.core.ValueState.Error) {\r\n\t\t\t\toPeriodType.setValueStateText(this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(\"timePeriodFilterError\"));\r\n\t\t\t}\r\n\t\t\tvar oStatusText = this.getView().byId(\"statusText\");\r\n\t\t\tvar oFilterBar = oEvent.getSource();\r\n\t\t\tif (oStatusText && oFilterBar) {\r\n\t\t\t\tvar sText = oFilterBar.retrieveFiltersWithValuesAsText();\r\n\t\t\t\toStatusText.setText(sText);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonAfterVariantLoad: function (oEvent) {\r\n\t\t\tvar oSmartFilter = oEvent.getSource();\r\n\t\t\tvar oContext = oEvent.getParameters().context;\r\n\t\t\tif (oContext === \"INIT\" && sap.ui.core.routing.HashChanger.getInstance().getCurrentNavigationState().oldHash.indexOf(\r\n\t\t\t\t\t\"WorkCenterUtilization-display\") !== -1) {\r\n\t\t\t\toSmartFilter.clear();\r\n\t\t\t\tthis.setNavParamstoFilterBar();\r\n\t\t\t\tvar oParams = {\r\n\t\t\t\t\tfinalTrigger: true\r\n\t\t\t\t};\r\n\t\t\t\tif (oSmartFilter.isCurrentVariantExecuteOnSelectEnabled() === true) {\r\n\t\t\t\t\toSmartFilter.fireSearch(oParams);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ((!oContext && oSmartFilter.getControlByKey(\"PeriodType\").getValue() === \"\") || (oContext === \"RESET\" && oSmartFilter.isCurrentVariantStandard())) {\r\n\t\t\t\tthis.setDefaultDateRange();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonSmartFilterInitialized: function (oEvent) {\r\n\t\t\tvar oSmartFilter = oEvent.getSource();\r\n\t\t\tif (oSmartFilter.getCurrentVariantId() === \"\" && oSmartFilter.getControlByKey(\"PeriodType\").getValue() === \"\") {\r\n\t\t\t\tthis.setDefaultDateRange();\r\n\t\t\t}\r\n\t\t\t// retrieve the app state while navigating back from scheduling after the filter bar initialized.\r\n\t\t\tthis._oAppStateInstance = AppState.getInstance();\r\n\t\t\t// Retreiving app state is an asynchronous call, returns a promise meanwhile onTableVariantInitialized event\r\n\t\t\t// will be executed by Order and operations table and make a delay triggered search. Hence a new calss variable \r\n\t\t\t// _bIsAppStateApplied is introduced to make sure that appstate is applied before the search event triggered by filter bar.\r\n\r\n\t\t\tthis._oAppStateInstance.retrieveAppState().then(function (oAppData, oStartupParameters, sNavType) {\r\n\t\t\t\t//sNavType will be x-appstate if it is the forward navigation, no need to apply the app state in this case.\r\n\t\t\t\tif (sNavType === sap.ui.generic.app.navigation.service.NavType.iAppState) {\r\n\t\t\t\t\tthis._isIAppState = true;\r\n\t\t\t\t\tthis.setAppState(oAppData);\r\n\t\t\t\t\tthis._bIsAppStateApplied = true;\r\n\t\t\t\t\tthis._delayedTriggerSearch();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._isIAppState = false;\r\n\t\t\t\t\tthis.setAppState(this._oAppStateData);\r\n\t\t\t\t\tthis._bIsAppStateApplied = true;\r\n\t\t\t\t\tthis._delayedTriggerSearch();\r\n\t\t\t\t}\r\n\t\t\t}.bind(this)).fail(function () { // Error handling\r\n\t\t\t\tthis._bIsAppStateApplied = true;\r\n\t\t\t\tthis._delayedTriggerSearch();\r\n\t\t\t}.bind(this));\r\n\t\t},\r\n\r\n\t\t/*to set the date range to default four weeks*/\r\n\t\tsetDefaultDateRange: function () {\r\n\t\t\tvar oJSONData = {};\r\n\t\t\tvar oSmartFilter = this.getView().byId(\"idOrderGanttSmartFilterBar\");\r\n\t\t\tvar oPeriodType = oSmartFilter.getControlByKey(\"PeriodType\");\r\n\t\t\tvar oStartDateNext = new Date();\r\n\t\t\tvar oEndDateNext = Utils.getEndDateNext();\r\n\t\t\tvar oStartDate = oStartDateNext;\r\n\t\t\tvar oEndDate = oEndDateNext;\r\n\t\t\tvar conditionTypeInfo = {};\r\n\t\t\tconditionTypeInfo.data = {};\r\n\t\t\toJSONData.PeriodType = {};\r\n\r\n\t\t\tconditionTypeInfo.name = \"custom.oDateRange\";\r\n\t\t\tconditionTypeInfo.data.calendarType = \"Gregorian\";\r\n\t\t\tconditionTypeInfo.data.key = \"PeriodType\";\r\n\t\t\tconditionTypeInfo.data.value1 = oStartDate;\r\n\t\t\tconditionTypeInfo.data.value2 = oEndDate;\r\n\r\n\t\t\tif (Utils.isMockRun() && oPeriodType.getSelectedKey() === \"DATERANGE\") {\r\n\t\t\t\tconditionTypeInfo.data.operation = \"DATERANGE\";\r\n\t\t\t} else {\r\n\t\t\t\tconditionTypeInfo.data.operation = \"FISCALPERIOD0\";\r\n\t\t\t}\r\n\t\t\toJSONData.PeriodType.conditionTypeInfo = conditionTypeInfo;\r\n\t\t\toSmartFilter.setFilterData(oJSONData);\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Make a copy of the date object without effecting the original date object\r\n\t\t * @param {Date} oDate date that needs to be copyied\r\n\t\t * @returns {Date} copy of date object\r\n\t\t */\r\n\t\tdateObjectCopy: function (oDate) {\r\n\t\t\treturn new Date(JSON.parse(JSON.stringify(oDate)));\r\n\t\t},\r\n\r\n\t\tgetDatePerTimeAxisFormat: function (oDate) {\r\n\t\t\tvar yyyy = oDate.getFullYear().toString();\r\n\t\t\tvar MM = this.pad(oDate.getMonth() + 1, 2);\r\n\t\t\tvar dd = this.pad(oDate.getDate(), 2);\r\n\t\t\tvar hh = this.pad(oDate.getHours(), 2);\r\n\t\t\tvar mm = this.pad(oDate.getMinutes(), 2);\r\n\t\t\tvar ss = this.pad(oDate.getSeconds(), 2);\r\n\r\n\t\t\treturn yyyy + MM + dd + hh + mm + ss;\r\n\t\t},\r\n\r\n\t\tpad: function (number, length) {\r\n\r\n\t\t\tvar str = \"\" + number;\r\n\t\t\twhile (str.length < length) {\r\n\t\t\t\tstr = \"0\" + str;\r\n\t\t\t}\r\n\r\n\t\t\treturn str;\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Usually called when sort is applied on the table columns.\r\n\t\t * Expand on rowlevel = 0 for order column requires $select for order fields \r\n\t\t * hence reset the sCustomParams\r\n\t\t * If called while applying app state then use oSortColumn for assignments\r\n\t\t * @public\r\n\t\t * @param {Object} [oEvent] Event object \r\n\t\t * @param {Object} [oSortColumn] Sort column information stored in App state\r\n\t\t */\r\n\t\tonSortRequest: function (oEvent, oSortColumn) {\r\n\t\t\tvar oBinding = this.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\");\r\n\t\t\t//get the sorted column binding\r\n\t\t\tvar sColumnBinding = null;\r\n\t\t\tvar sColSortproperty = null;\r\n\t\t\tvar sColSortOrder = null;\r\n\t\t\tvar _oSorter, _aSorterColumns;\r\n\t\t\tif (oSortColumn) {\r\n\t\t\t\t//var aColumns = this.getView().byId(\"idOrderTreeTable\").getColumns();\r\n\t\t\t\t//get the sorted column binding\r\n\t\t\t\tsColumnBinding = this.getView().byId(oSortColumn.id);\r\n\t\t\t\t//get the sorted column property\r\n\t\t\t\tsColSortproperty = oSortColumn.sortProperty;\r\n\t\t\t\t//get the sorted column sortOrder\r\n\t\t\t\tsColSortOrder = oSortColumn.sortOrder;\r\n\t\t\t} else {\r\n\t\t\t\tsColumnBinding = oEvent.getParameters(\"bindingParams\").column;\r\n\t\t\t\t//get the sorted column property\r\n\t\t\t\tsColSortproperty = sColumnBinding.getSortProperty();\r\n\t\t\t\t//get the sorted column sortOrder\r\n\t\t\t\tsColSortOrder = oEvent.getParameters(\"bindingParams\").sortOrder;\r\n\t\t\t\tthis._onPersChangeForColumns(oEvent);\r\n\t\t\t}\r\n\t\t\t//Check if the selected column belongs to the operation fields.\r\n\t\t\tif (this._afilterFieldGroups.indexOf(sColSortproperty) >= 0) {\r\n\t\t\t\t//disable standard sort handler\r\n\t\t\t\tif (oEvent) {\r\n\t\t\t\t\toEvent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t\t// Store the SortProperty & SortOrder for order fields to use in rowlevel = 1\r\n\t\t\t\tthis.sSortOperationField = sColSortproperty;\r\n\t\t\t\tthis.sOperationSortOrder = sColSortOrder;\r\n\r\n\t\t\t\t_oSorter = new sap.ui.model.Sorter(this.sSortOrderField, this.sOrderSortOrder === \"Descending\");\r\n\t\t\t\t_aSorterColumns = [_oSorter];\r\n\t\t\t\t//update column sort property\r\n\t\t\t\tthis.updateColumnSortStatus(sColumnBinding, sColSortOrder);\r\n\t\t\t\toBinding.sort(_aSorterColumns);\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// Store the SortProperty & SortOrder for order fields to use in rowlevel = 0\r\n\t\t\t\tthis.sSortOrderField = sColSortproperty;\r\n\t\t\t\tthis.sOrderSortOrder = sColSortOrder;\r\n\r\n\t\t\t\t//Special case - if Sort field is MaintenanceOrder, then \r\n\t\t\t\t//For operations we should use MaintenanceOperation\r\n\t\t\t\tif (sColSortproperty === \"MaintenanceOrder\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"MaintenanceOrderOperation\";\r\n\t\t\t\t\tthis.sOperationSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Special case - common field Processing Status\r\n\t\t\t\t//if Sort field is ProcessingStatus, we need to apply it for both levels\r\n\t\t\t\tif (sColSortproperty === \"ProcessingStatus\") {\r\n\t\t\t\t\tthis.sSortOperationField = this.sSortOrderField = sColSortproperty;\r\n\t\t\t\t\tthis.sOperationSortOrder = this.sOrderSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (sColSortproperty === \"FunctionalLocationName\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"OpFunctionalLocationName\";\r\n\t\t\t\t\tthis.sSortOrderField = sColSortproperty;\r\n\t\t\t\t\tthis.sOperationSortOrder = this.sOrderSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (sColSortproperty === \"EquipmentName\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"OperationEquipmentName\";\r\n\t\t\t\t\tthis.sSortOrderField = sColSortproperty;\r\n\t\t\t\t\tthis.sOperationSortOrder = this.sOrderSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (sColSortproperty === \"TechnicalObjectDescription\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"OperationTechnicalObjectDesc\";\r\n\t\t\t\t\tthis.sSortOrderField = sColSortproperty;\r\n\t\t\t\t\tthis.sOperationSortOrder = this.sOrderSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (sColSortproperty === \"OrderSystemConditionText\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"OperationSystemConditionText\";\r\n\t\t\t\t\tthis.sSortOrderField = sColSortproperty;\r\n\t\t\t\t\tthis.sOperationSortOrder = this.sOrderSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Special case - common field Work Center\r\n\t\t\t\tif (sColSortproperty === \"MainWorkCenter\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"WorkCenter\";\r\n\t\t\t\t\tthis.sOperationSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Special case - common field Phase\r\n\t\t\t\tif (sColSortproperty === \"MaintOrdProcessPhaseCode\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"MaintOrdOpProcessPhaseCode\";\r\n\t\t\t\t\tthis.sOperationSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Special case - common field Subphase\r\n\t\t\t\tif (sColSortproperty === \"MaintOrdProcessSubPhaseCode\") {\r\n\t\t\t\t\tthis.sSortOperationField = \"MaintOrdOpProcessSubPhaseCode\";\r\n\t\t\t\t\tthis.sOperationSortOrder = sColSortOrder;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar bCalledDuringInitialization = false;\r\n\t\t\t// we need to ensure $select for order request is set in sCustomParams before the next request is done\r\n\t\t\tif (oBinding.sCustomParams !== this._sSelectString) {\r\n\t\t\t\tthis.setFinalSelectForOrderRequest(bCalledDuringInitialization);\r\n\t\t\t}\r\n\r\n\t\t\tif (oSortColumn) {\r\n\t\t\t\t_oSorter = new sap.ui.model.Sorter(this.sSortOrderField, this.sOrderSortOrder === \"Descending\");\r\n\r\n\t\t\t\t_aSorterColumns = [_oSorter];\r\n\r\n\t\t\t\t//update column sort property\r\n\t\t\t\tthis.updateColumnSortStatus(sColumnBinding, sColSortOrder);\r\n\r\n\t\t\t\toBinding.sort(_aSorterColumns);\r\n\t\t\t}\r\n\r\n\t\t\t//Clear the performance filter after sort as the filter string is reset.\r\n\t\t\tthis._sPerformanceFilterOnExpand = null;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This takes care of updating the correct icon on the columns since the\r\n\t\t * default sort handler is disabled when sorting with operation fields\r\n\t\t * @private\r\n\t\t * @param {sap.ui.table.Column} [sortedColumn] The column that is currently being sorted\r\n\t\t * @param {sap.ui.table.SortOrder} [sortOrder] The order in which the column is being sorted\r\n\t\t */\r\n\t\tupdateColumnSortStatus: function (sortedColumn, sortOrder) {\r\n\r\n\t\t\tvar aColumns = this.getView().byId(\"idOrderTreeTable\").getColumns();\r\n\t\t\taColumns.forEach(function (col) {\r\n\t\t\t\tif (col.getSorted) {\r\n\t\t\t\t\tcol.setSorted(false);\r\n\t\t\t\t\tcol._updateIcons();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tsortedColumn.setSorted(true);\r\n\t\t\tsortedColumn.setSortOrder(sortOrder);\r\n\t\t\tsortedColumn._updateIcons();\r\n\t\t},\r\n\r\n\t\texpandSelected: function (oEvent) {\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar selectedRows = oTreeTable.getSelectedIndices();\r\n\r\n\t\t\tvar aMaintenanceOrderIDs = [];\r\n\t\t\tvar aSelectedRowsBindingContext = this._getSelectedRowBindingContext(oTreeTable);\r\n\t\t\tfor (var i = 0; i < aSelectedRowsBindingContext.length; i++) {\r\n\t\t\t\taMaintenanceOrderIDs.push(aSelectedRowsBindingContext[i].getProperty().MaintenanceOrder);\r\n\t\t\t}\r\n\t\t\tthis._addPerformanceFilterOnExpand(aMaintenanceOrderIDs);\r\n\t\t\toTreeTable.expand(selectedRows);\r\n\t\t},\r\n\r\n\t\tcollapseSelected: function (oEvent) {\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar selectedRows = oTreeTable.getSelectedIndices();\r\n\t\t\toTreeTable.collapse(selectedRows);\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Called when treetable column is selected.\r\n\t\t * @param {Object} [oEvent] Event Object\r\n\t\t */\r\n\t\tonColumnSelect: function (oEvent) {\r\n\t\t\tvar oColumn = oEvent.getParameters().column;\r\n\t\t\tvar oColumnMenu = oColumn.getMenu();\r\n\t\t\toColumnMenu.attachItemSelect(oColumnMenu, this._onItemInColumnMenuSelected, this);\r\n\t\t},\r\n\r\n\t\t_onItemInColumnMenuSelected: function (oEvent, oColumnMenu) {\r\n\t\t\tvar sColumnNameToBeAdded = oEvent.getParameters().item.getText();\r\n\t\t\tvar sColumnTechnicalNameToBeAdded;\r\n\t\t\tvar sSelectedIcon = oEvent.getParameters().item.getIcon();\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar aAllColumns = oTreeTable.getColumns();\r\n\r\n\t\t\t//continue only if the icon is empty (because sort asc and sort dsc in the menu have icons)\r\n\t\t\t//and if no \"Columns\" 3rd option in main menu is selected\r\n\t\t\tif (!sSelectedIcon && !oEvent.getParameters().item.getSubmenu()) {\r\n\t\t\t\t//determine technical name based on thext name\r\n\t\t\t\tfor (var i = 0; i < aAllColumns.length; i++) {\r\n\t\t\t\t\tif (aAllColumns[i].getLabel().getText() === sColumnNameToBeAdded && aAllColumns[i].getVisible()) {\r\n\t\t\t\t\t\tsColumnTechnicalNameToBeAdded = aAllColumns[i].getSortProperty();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvar bCalledDuringInitialization = false;\r\n\t\t\t\tthis.setFinalSelectForOrderRequest(bCalledDuringInitialization, sColumnTechnicalNameToBeAdded);\r\n\t\t\t\t//ensure after full refresh is done, a message tast is shown setting this variable to true\r\n\t\t\t\t//onAfterActionCompleted will use it once request is completed\r\n\t\t\t\tthis._bNewColumnAdded = true;\r\n\t\t\t\t//clear the performance filter on adding a column as all rows will be collapsed\r\n\t\t\t\tthis._sPerformanceFilterOnExpand = null;\r\n\t\t\t\tthis._refreshBinding(true);\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Called when treetable column is selected for visibility change\r\n\t\t * @private\r\n\t\t * @param {Object} [oEvent] Event object returning the selected column\r\n\t\t */\r\n\t\tonColumnVisibilityChanged: function (oEvent) {\r\n\t\t\tvar oSelectedColumn = oEvent.getParameters().column;\r\n\t\t\t//check if the selected column is the first (index 0)\r\n\t\t\tif (oSelectedColumn.getIndex() === 0) {\r\n\t\t\t\t//if its the first column, prevent default event handling\r\n\t\t\t\toEvent.preventDefault();\r\n\t\t\t\t//show a message box of type warning to user that this column cannot be hidden\r\n\t\t\t\tUtils.addMessage(this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(\"CannotHideOrderColumn\"),\r\n\t\t\t\t\tsap.ui.core.MessageType.Warning, Constants.sDisplayTypeMessageBox);\r\n\t\t\t} else if (oSelectedColumn.getVisible() && oSelectedColumn.getSorted()) {\r\n\t\t\t\t//if visibility is changing to hidden then remove sorting assosciated with the column (if it is sorted) before hiding it\r\n\t\t\t\toSelectedColumn.setSorted(false);\r\n\t\t\t\tvar oBinding = this.getView().byId(\"idOrderTreeTable\").getBinding();\r\n\t\t\t\toBinding.aSorters = [];\r\n\t\t\t\t//To be on the safe side in addtion to clear the sorter also the storage for the fields is set back to initial values (MaintenanceOrder, MaintenanceOrderOperation)\r\n\t\t\t\tthis.initSortOrderAndSortOperationFields();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\thandleLinkPress: function (oEvent) {\r\n\t\t\t// decide whether to show the order or operation popup depending on what was clicked\r\n\t\t\tvar rowLevel = oEvent.getSource().getBindingContext().getProperty(\"OrderOperationRowLevel\");\r\n\r\n\t\t\t// Display Order Poup\r\n\t\t\tif (rowLevel === 0) {\r\n\t\t\t\tthis._oOrderPopupDelegate = new OrderPopup();\r\n\t\t\t\tthis.getView().getModel().setUseBatch(true);\r\n\t\t\t\tsap.ui.getCore().getMessageManager().registerObject(this._oOrderPopupDelegate.getFragment(), true);\r\n\t\t\t\t//  App state fields can be empty in case all columns are hidden except Maintenance Order column\r\n\t\t\t\tif (this._sOrderAppStateFields) {\r\n\t\t\t\t\tthis._oOrderPopupDelegate.setContentToFragment(oEvent, this._oOwnerComponent, this._oOwnerComponent.getModel(\"readModel\"), this._sOrderAllTechMandatoryFields +\r\n\r\n\t\t\t\t\t\t\",\" + this._sOrderAppStateFields +\r\n\t\t\t\t\t\t\",\" + this._sOrderAdditionalPopOverFields +\r\n\t\t\t\t\t\t\",\" + this._aExpandFields.toString());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._oOrderPopupDelegate.setContentToFragment(oEvent, this._oOwnerComponent, this._oOwnerComponent.getModel(\"readModel\"), this._sOrderAllTechMandatoryFields +\r\n\t\t\t\t\t\t\",\" + this._sOrderAdditionalPopOverFields +\r\n\t\t\t\t\t\t\",\" + this._aExpandFields.toString());\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Display Operation Popup \r\n\t\t\t} else {\r\n\t\t\t\tthis._oOperationPopupDelegate = new OperationPopup();\r\n\t\t\t\tthis.getView().getModel().setUseBatch(true);\r\n\t\t\t\tsap.ui.getCore().getMessageManager().registerObject(this._oOperationPopupDelegate.getFragment(), true);\r\n\t\t\t\tthis._oOperationPopupDelegate.setContentToFragment(oEvent, this._oOwnerComponent, this._oOwnerComponent.getModel(\"readModel\"));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * @public\r\n\t\t * Handler for the link press in Gantt rows which opens Functional Location popover\r\n\t\t * @param {string} [oEvent] Event bus parameter\r\n\t\t * @param {boolean} [bTechnicalObject] Navigation from technical object\r\n\t\t */\r\n\t\thandleFuncLocLinkPress: function (oEvent, bTechnicalObject) {\r\n\t\t\tthis._oInnerAppState = {\r\n\t\t\t\tcustomData: this._getCurrentAppState()\r\n\t\t\t};\r\n\t\t\tthis._oFunctionalLocationPopupDelegate = new FunctionalLocationPopup();\r\n\t\t\tthis.getView().getModel().setUseBatch(true);\r\n\t\t\tsap.ui.getCore().getMessageManager().registerObject(this._oFunctionalLocationPopupDelegate.getFragment(), true);\r\n\t\t\tthis._oFunctionalLocationPopupDelegate.setContentToFragment(oEvent, this._oOwnerComponent, this._oOwnerComponent.getModel(\r\n\t\t\t\t\"readModel\"), this._oInnerAppState, bTechnicalObject);\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * @public\r\n\t\t * Handler for the link press in Gantt rows which opens Equipment popover\r\n\t\t * @param {string} [oEvent] Event bus parameter\r\n\t\t * @param {boolean} [bTechnicalObject] Navigation from technical object\r\n\t\t */\r\n\t\thandleEquipmentLinkPress: function (oEvent, bTechnicalObject) {\r\n\t\t\tthis._oInnerAppState = {\r\n\t\t\t\tcustomData: this._getCurrentAppState()\r\n\t\t\t};\r\n\t\t\tthis._oEquipmentPopupDelegate = new EquipmentPopup();\r\n\t\t\tthis.getView().getModel().setUseBatch(true);\r\n\t\t\tsap.ui.getCore().getMessageManager().registerObject(this._oEquipmentPopupDelegate.getFragment(), true);\r\n\t\t\tthis._oEquipmentPopupDelegate.setContentToFragment(oEvent, this._oOwnerComponent, this._oOwnerComponent.getModel(\r\n\t\t\t\t\"readModel\"), this._oInnerAppState, bTechnicalObject);\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * @public\r\n\t\t * Handler for the link press in order and operations table rows which opens Technical object popover\r\n\t\t * @param {string} [oEvent] Event bus parameter\r\n\t\t */\r\n\t\thandleTechnicalObjectLinkPress: function (oEvent) {\r\n\t\t\tvar sTechnicalObjectType = oEvent.getSource().getBindingContext().getProperty(\"TechObjIsEquipOrFuncnlLoc\");\r\n\t\t\tvar bTechnicalObject = true;\r\n\t\t\tif (sTechnicalObjectType === \"EAMS_EQUI\") {\r\n\t\t\t\tthis.handleEquipmentLinkPress(oEvent, bTechnicalObject);\r\n\t\t\t} else {\r\n\t\t\t\tthis.handleFuncLocLinkPress(oEvent, bTechnicalObject);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Convenience method for triggering the workcenter settings popup\r\n\t\t * @public\r\n\t\t */\r\n\t\topenFilter: function () {\r\n\r\n\t\t\tthis._oDelegate = new AssignMyWorkCenters();\r\n\t\t\tvar oResourceModel = this.getView().getModel(\"i18n\");\r\n\t\t\tthis._oDelegate.getFragment().setModel(oResourceModel, \"i18n\");\r\n\t\t\tthis.getView().getModel().setUseBatch(true);\r\n\t\t\tsap.ui.getCore().getMessageManager().registerObject(this._oDelegate.getFragment(), true);\r\n\t\t\tthis._oDelegate.getFragment().setModel(this.getView().getModel());\r\n\t\t\tthis.getView().getModel().setRefreshAfterChange(false);\r\n\t\t\tthis._oDelegate.getFragment().setContentWidth(\"41%\");\r\n\t\t\tthis._oDelegate.getFragment().setBusy(true);\r\n\t\t\tthis._oDelegate.getFragment().open();\r\n\t\t\tif (this._oMessageHandlerResponseModel) {\r\n\t\t\t\tvar oMsgHandlerRespModel = this._oMessageHandlerResponseModel;\r\n\t\t\t\toMsgHandlerRespModel.setProperty(\"/bIsDialogOpen\", true);\r\n\t\t\t\tthis._oDelegate.getFragment().attachAfterClose(function () {\r\n\t\t\t\t\toMsgHandlerRespModel.setProperty(\"/bIsDialogOpen\", false);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Allow to enable/disable buttons based on selection\r\n\t\t * @public\r\n\t\t * @param {string} [oEvent]   Event   event bus parameter\r\n\t\t */\r\n\t\tselectTableRows: function (oEvent) {\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\r\n\t\t\t//Remove old messages from changed rows\r\n\t\t\tvar changedRowIndices = oEvent.getParameter(\"rowIndices\");\r\n\t\t\tfor (var i = 0; i < changedRowIndices.length; i++) {\r\n\t\t\t\tvar sPath = decodeURIComponent(oTreeTable.getContextByIndex(changedRowIndices[i]).sPath);\r\n\t\t\t\tif (sPath) {\r\n\t\t\t\t\tvar sTarget = sPath;\r\n\t\t\t\t\tif (sPath.substring(0, 1) === \"/\") {\r\n\t\t\t\t\t\tsTarget = sPath.substring(1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// delete old messages from the target\r\n\t\t\t\t\tvar aMessages = this._getMessagesFromTarget(sTarget);\r\n\t\t\t\t\tsap.ui.getCore().getMessageManager().removeMessages(aMessages);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateToolbarButtonsFromSelectedRows();\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Enables/Disables Toolbar Buttons as per the row selections\r\n\t\t * @public\r\n\t\t */\r\n\t\tupdateToolbarButtonsFromSelectedRows: function () {\r\n\t\t\tvar oDispatchButton = this.getView().byId(\"idButtonDispatch\");\r\n\t\t\tvar oCancelDispatchButton = this.getView().byId(\"idButtonCancDispatch\");\r\n\t\t\tvar oChangeOperationsButton = this.getView().byId(\"idButtonChange\");\r\n\t\t\tvar oRemoveConstraintsButton = this.getView().byId(\"idRemoveConstraints\");\r\n\t\t\tvar oScheduleOrderButton = this.getView().byId(\"idScheduleOrder\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\r\n\t\t\t//Disable all buttons and leave if no Row is selected\r\n\t\t\tvar selectedRowIndices = oTreeTable.getSelectedIndices();\r\n\t\t\tif (!selectedRowIndices || selectedRowIndices.length === 0 || selectedRowIndices[0].length === 0) {\r\n\t\t\t\t//On deselection set all buttons to disabled again\r\n\t\t\t\toDispatchButton.setEnabled(false);\r\n\t\t\t\toCancelDispatchButton.setEnabled(false);\r\n\t\t\t\toChangeOperationsButton.setEnabled(false);\r\n\t\t\t\toRemoveConstraintsButton.setEnabled(false);\r\n\t\t\t\toScheduleOrderButton.setEnabled(false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar aSelectedItemsContext = this._getSelectedRowBindingContext(oTreeTable);\r\n\t\t\tvar bAtLeastOneItemHasConstraints = false;\r\n\t\t\tvar bAtLeastOneHeaderRowSelected = false;\r\n\t\t\tvar bAtLeastOneItemDispatched = false;\r\n\t\t\tvar bAtLeastoneOperationChangeable = false;\r\n\t\t\tvar bAtLeastOneItemDue = false;\r\n\r\n\t\t\tfor (var i = 0; i < aSelectedItemsContext.length; i++) {\r\n\t\t\t\tvar itemModel = aSelectedItemsContext[i].getObject();\r\n\r\n\t\t\t\t//Order Header Row\r\n\t\t\t\tif (itemModel.OrderOperationRowLevel === 0) {\r\n\t\t\t\t\tbAtLeastOneHeaderRowSelected = true;\r\n\t\t\t\t} else if (Utils.checkIfOperationIsWithinTimePeriod(itemModel, this.oPeriodTypeDates)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (itemModel.HasError) {\r\n\t\t\t\t\t\t//function to get the messages for the MessagePopover \r\n\t\t\t\t\t\tthis.operationValidation(itemModel);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbAtLeastoneOperationChangeable = true;\r\n\t\t\t\t\t\tswitch (itemModel.ProcessingStatus) {\r\n\t\t\t\t\t\tcase Constants.dispatchedStatusCode:\r\n\t\t\t\t\t\t\tbAtLeastOneItemDispatched = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase Constants.dueStatusCode:\r\n\t\t\t\t\t\t\tbAtLeastOneItemDue = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (itemModel.OpBscStartDateConstraintType && itemModel.OrderOperationStartDateTime) {\r\n\t\t\t\t\t\t\tbAtLeastOneItemHasConstraints = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//If only header row is selected then disable all buttons..\r\n\t\t\tif (bAtLeastOneHeaderRowSelected && !bAtLeastoneOperationChangeable) {\r\n\t\t\t\toDispatchButton.setEnabled(false);\r\n\t\t\t\toCancelDispatchButton.setEnabled(false);\r\n\t\t\t\toChangeOperationsButton.setEnabled(false);\r\n\t\t\t\toRemoveConstraintsButton.setEnabled(false);\r\n\t\t\t\toScheduleOrderButton.setEnabled(true);\r\n\t\t\t} else {\r\n\t\t\t\t//Enabled/Disable the buttons individually based on the variable values\r\n\t\t\t\toChangeOperationsButton.setEnabled(bAtLeastoneOperationChangeable);\r\n\t\t\t\toCancelDispatchButton.setEnabled(bAtLeastOneItemDispatched);\r\n\t\t\t\toDispatchButton.setEnabled(bAtLeastOneItemDue);\r\n\t\t\t\toRemoveConstraintsButton.setEnabled(bAtLeastOneItemHasConstraints);\r\n\t\t\t\toScheduleOrderButton.setEnabled(bAtLeastOneHeaderRowSelected);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getMessagesFromTarget: function (sTarget) {\r\n\r\n\t\t\tvar aMessages = sap.ui.getCore().getMessageManager().getMessageModel().getProperty(\"/\");\r\n\t\t\tvar aMessagesFromTarget = [];\r\n\r\n\t\t\taMessages.forEach(function (oMessage) {\r\n\t\t\t\tif (oMessage.target === sTarget) {\r\n\t\t\t\t\taMessagesFromTarget.push(oMessage);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn aMessagesFromTarget;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Function to generate the messages for the MessagePopover in UI\t\r\n\t\t * @public\r\n\t\t * @param {Object} [oItemModel] item model bound to Operations entity\r\n\t\t */\r\n\t\toperationValidation: function (oItemModel) {\r\n\r\n\t\t\tvar hasError = oItemModel.HasError;\r\n\t\t\tvar statusCode = oItemModel.ProcessingStatus;\r\n\t\t\tvar maintenanceOrderValue = oItemModel.MaintenanceOrder;\r\n\t\t\tvar maintenanceOrderOP = oItemModel.MaintenanceOrderOperation;\r\n\t\t\tvar maintenanceOrderSubOP = oItemModel.MaintenanceOrderSubOperation;\r\n\t\t\tvar sTarget = \"C_RSHOrdersAndOperations\" + \"(\" + \"'\" + oItemModel.ID + \"'\" + \")\";\r\n\r\n\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\r\n\t\t\tif (hasError && statusCode === Constants.inProcessCode) {\r\n\t\t\t\t// Add a new message in the message popover\r\n\t\t\t\t//To avoid / and empty suboperatioin ID differenciate here whether the sub operation ID is empty or not\r\n\t\t\t\tif (maintenanceOrderSubOP) {\r\n\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"ErrorMessageInProcessStatusSubOper\", [maintenanceOrderValue, maintenanceOrderOP,\r\n\t\t\t\t\t\tmaintenanceOrderSubOP\r\n\t\t\t\t\t]), sap.ui.core.MessageType.Information, Constants.sDisplayTypeMessagePopover, sTarget, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"ErrorMessageInProcessStatusOper\", [maintenanceOrderValue, maintenanceOrderOP, null]),\r\n\t\t\t\t\t\tsap.ui.core.MessageType.Information, Constants.sDisplayTypeMessagePopover, sTarget, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Clicked the Trigger Order Scheduling Button Id - idScheduleOrder\r\n\t\t Schedules the selected order using RSH_SB_MAINTENANCE_ORDER\r\n\t\t * @public\r\n\t\t*/\r\n\t\tpressScheduleOrderButton: function () {\r\n\t\t\t//Event Bus to be subscribed only once to handle it at u-shell level\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sServerMessageToUpdateEntity, this.prepareTargetForRefreshGantt,\r\n\t\t\t\tthis);\r\n\t\t\tvar oGanttChartContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar aSelectedItemsContext = this._getSelectedRowBindingContext(oTreeTable);\r\n\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\t\t\tvar bOneHeaderRowSelected = false;\r\n\t\t\tvar oItemModelForSelectedOrder;\r\n\r\n\t\t\t//If more than 1 order is selected, we give error message saying only one \r\n\t\t\t//is to be selected.\r\n\t\t\tfor (var i = 0; i < aSelectedItemsContext.length; i++) {\r\n\t\t\t\tvar itemModel = aSelectedItemsContext[i].getObject();\r\n\r\n\t\t\t\t//Order Header Row\r\n\t\t\t\tif (itemModel.OrderOperationRowLevel === 0) {\r\n\t\t\t\t\tif (bOneHeaderRowSelected === true) {\r\n\t\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"SelectOnlyOneOrder\"), sap.ui.core.MessageType.Error, Constants.sDisplayTypeMessageBox);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbOneHeaderRowSelected = true;\r\n\t\t\t\t\t\toItemModelForSelectedOrder = itemModel;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//If the selected item is anything other than header row or already dispatched item then move to next item..\r\n\t\t\tif (oItemModelForSelectedOrder.OrderOperationRowLevel !== 0 || oItemModelForSelectedOrder.ProcessingStatus === Constants.inProcessCode) {\r\n\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"InProcessOrderSch\"), sap.ui.core.MessageType.Error, Constants.sDisplayTypeMessageBox);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//Set busy indicator\r\n\t\t\toGanttChartContainer.setBusy(true);\r\n\r\n\t\t\t// Call the schedule service binding from backend\r\n\t\t\tvar functionCallName = \"/ScheduleMaintenanceOrder\";\r\n\t\t\tvar oRelationModel = this.getView().getModel(\"relationshipModel\");\r\n\t\t\tvar parameters = {\r\n\t\t\t\tMaintenanceOrder: oItemModelForSelectedOrder.MaintenanceOrder\r\n\t\t\t};\r\n\r\n\t\t\tvar that = this;\r\n\t\t\toRelationModel.callFunction(functionCallName, {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\turlParameters: parameters,\r\n\t\t\t\tsuccess: function (oData) {\r\n\t\t\t\t\tthat.onScheduleSuccess(oItemModelForSelectedOrder);\r\n\t\t\t\t},\r\n\t\t\t\terror: function (oData) {\r\n\t\t\t\t\tthat.onScheduleFailed(oItemModelForSelectedOrder);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t *When Trigger Order Scheduling is successful\r\n\t\t * @public\r\n\t\t * @param {Object} [oData] Current data \r\n\t\t */\r\n\t\tonScheduleSuccess: function (oData) {\r\n\t\t\tvar oTargetParams = {};\r\n\t\t\toTargetParams.itemHashMapContainer = [];\r\n\t\t\toTargetParams.itemHashMapContainer.push(oData.MaintenanceOrder);\r\n\t\t\toTargetParams.parameters = {};\r\n\t\t\toTargetParams.parameters.bRefreshOfSourceAppRequired = true;\r\n\r\n\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\r\n\t\t\tUtils.addMessage(oResourceBundle.getText(\"ScheduleSuccess\"), sap.ui.core.MessageType.Success, Constants.sDisplayTypeMessageToast);\r\n\t\t\t//Trigger delta refresh query\r\n\t\t\tthis.prepareTargetForRefreshGantt(\"\", \"\", oTargetParams);\r\n\t\t\tthis.getView().byId(\"idOrderGanttContainer\").setBusy(false);\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t *When Trigger Order Scheduling is not successful.\r\n\t\t * @public\r\n\t\t * @param {Object} [oError] Error details\r\n\t\t */\r\n\t\tonScheduleFailed: function (oError) {\r\n\r\n\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\r\n\t\t\tUtils.addMessage(oResourceBundle.getText(\"ScheduleError\"), sap.ui.core.MessageType.Error, Constants.sDisplayTypeMessagePopover);\r\n\t\t\tthis.getView().byId(\"idOrderGanttContainer\").setBusy(false);\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Clicked the Dispatch button\r\n\t\t * @public\r\n\t\t */\r\n\t\tpressDispatchButton: function (oEvent) {\r\n\t\t\t//Event Bus to be subscribed only once to handle it at u-shell level\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sServerMessageToUpdateEntity, this.prepareTargetForRefreshGantt,\r\n\t\t\t\tthis);\r\n\t\t\tvar oGanttChartContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\tvar viewModel = this.getView().getModel();\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\t//var aSelectedRows = this._getSelectionRows(oTreeTable);\r\n\t\t\tvar aSelectedItemsContext = this._getSelectedRowBindingContext(oTreeTable);\r\n\t\t\t//Set busy indicator\r\n\t\t\toGanttChartContainer.setBusy(true);\r\n\t\t\tvar itemModel = null;\r\n\r\n\t\t\t//this is special flag can be set in mass change dialog only\r\n\t\t\t//hense pass false for dispatch button logic \r\n\t\t\tvar bTriggerStatusChangeIrrespectiveOfCurrentStatus = false;\r\n\r\n\t\t\tif (oEvent.getSource().getId().includes(\"idButtonDispatchAction\")) {\r\n\t\t\t\tthis._bActionInitiatedFromContextMenu = true;\r\n\t\t\t\t//In case triggered from Shape Context Menu\r\n\t\t\t\tvar sOpShapePath = this._oShapeForOpContextMenu.getBindingContext().getPath();\r\n\t\t\t\tvar oOperationData = this.getModel().getData(sOpShapePath);\r\n\t\t\t\titemModel = oOperationData;\r\n\t\t\t\t//Proceed only if no error or has cross order releation for the current operation\r\n\t\t\t\tif (!itemModel.HasError) {\r\n\t\t\t\t\t// delete old messages from the target\r\n\t\t\t\t\tsap.ui.getCore().getMessageManager().removeAllMessages();\r\n\t\t\t\t\t// Prepare the backend call to set dispatch status\r\n\t\t\t\t\tthis.statusCommon.setOperationDispatchStatus(itemModel, viewModel, bTriggerStatusChangeIrrespectiveOfCurrentStatus);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//function to get a message for the MessagePopover\r\n\t\t\t\t\tthis.operationValidation(itemModel);\r\n\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//if triggered from toolbar button\r\n\t\t\t\tfor (var i = 0; i < aSelectedItemsContext.length; i++) {\r\n\t\t\t\t\titemModel = aSelectedItemsContext[i].getObject();\r\n\r\n\t\t\t\t\t//If the selected item is header row or already dispatched item then move to next item..\r\n\t\t\t\t\tif (itemModel.OrderOperationRowLevel === 0 || itemModel.ProcessingStatus === Constants.dispatchedStatusCode) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (Utils.checkIfOperationIsWithinTimePeriod(itemModel, this.oPeriodTypeDates)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Proceed only if no error or has cross order releation for the current operation\r\n\t\t\t\t\tif (!itemModel.HasError) {\r\n\t\t\t\t\t\t// delete old messages from the target\r\n\t\t\t\t\t\tsap.ui.getCore().getMessageManager().removeAllMessages();\r\n\t\t\t\t\t\t// Prepare the backend call to set dispatch status\r\n\t\t\t\t\t\tthis.statusCommon.setOperationDispatchStatus(itemModel, viewModel, bTriggerStatusChangeIrrespectiveOfCurrentStatus);\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//function to get a message for the MessagePopover\r\n\t\t\t\t\t\tthis.operationValidation(itemModel);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Finally perfom the backend call\r\n\t\t\tthis.statusCommon.triggerBackendCall();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Clicked the Cancel Dispatch button\r\n\t\t * @public\r\n\t\t */\r\n\t\tpressCancDispatchButton: function (oEvent) {\r\n\t\t\t//Event Bus to be subscribed only once to handle it at u-shell level\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sServerMessageToUpdateEntity, this.prepareTargetForRefreshGantt,\r\n\t\t\t\tthis);\r\n\t\t\tvar viewModel = this.getView().getModel();\r\n\t\t\tvar oGanttChartContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\t//var aSelectedRows = this._getSelectionRows(oTreeTable);\r\n\t\t\tvar aSelectedItemsContext = this._getSelectedRowBindingContext(oTreeTable);\r\n\t\t\t//Set busy indicator\r\n\t\t\toGanttChartContainer.setBusy(true);\r\n\t\t\tvar itemModel = null;\r\n\r\n\t\t\t//this is special flag can be set in mass change dialog only\r\n\t\t\t//hense pass false for dispatch button logic\r\n\t\t\tvar bTriggerStatusChangeIrrespectiveOfCurrentStatus = false;\r\n\t\t\tif (oEvent.getSource().getId().includes(\"idButtonCancDispatchAction\")) {\r\n\t\t\t\tthis._bActionInitiatedFromContextMenu = true;\r\n\t\t\t\t//In case triggered from Shape Context Menu\r\n\t\t\t\tvar sOpShapePath = this._oShapeForOpContextMenu.getBindingContext().getPath();\r\n\t\t\t\tvar oOperationData = this.getModel().getData(sOpShapePath);\r\n\t\t\t\titemModel = oOperationData;\r\n\t\t\t\t//Proceed only if no error or has cross order releation for the current operation\r\n\t\t\t\tif (!itemModel.HasError) {\r\n\t\t\t\t\t// delete old messages from the target\r\n\t\t\t\t\tsap.ui.getCore().getMessageManager().removeAllMessages();\r\n\t\t\t\t\t// Prepare the backend call to set dispatch status\r\n\t\t\t\t\tthis.statusCommon.cancelOperationDispatchStatus(itemModel, viewModel, bTriggerStatusChangeIrrespectiveOfCurrentStatus);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//function to get a message for the MessagePopover\r\n\t\t\t\t\tthis.operationValidation(itemModel);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//if triggered from toolbar button\r\n\t\t\t\tfor (var i = 0; i < aSelectedItemsContext.length; i++) {\r\n\t\t\t\t\titemModel = aSelectedItemsContext[i].getObject();\r\n\r\n\t\t\t\t\t//If the selected item is header row or already due item then move to next item..\r\n\t\t\t\t\tif (itemModel.OrderOperationRowLevel === 0 || itemModel.ProcessingStatus === Constants.dueStatusCode) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (Utils.checkIfOperationIsWithinTimePeriod(itemModel, this.oPeriodTypeDates)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Proceed only if no error or has cross order relation for the current operation\r\n\t\t\t\t\tif (!itemModel.HasError) {\r\n\t\t\t\t\t\t// delete old messages from the target\r\n\t\t\t\t\t\tsap.ui.getCore().getMessageManager().removeAllMessages();\r\n\t\t\t\t\t\t//Prepare the backend call to set dispatch status\r\n\t\t\t\t\t\tthis.statusCommon.cancelOperationDispatchStatus(itemModel, viewModel, bTriggerStatusChangeIrrespectiveOfCurrentStatus);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//create a message for the Message Popover\r\n\t\t\t\t\t\tthis.operationValidation(itemModel);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Finally perfom the backend call\r\n\t\t\tthis.statusCommon.triggerBackendCall();\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Clicked the Change Operations button\r\n\t\t * @param {object} oEvent Event object returning pressed button\r\n\t\t */\r\n\t\tpressChangeOperationsButton: function (oEvent) {\r\n\t\t\t//Event Bus to be subscribed only once to handle it at u-shell level\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\tif (oEvent.getSource().getId().includes(\"idButtonChangeAction\")) {\r\n\t\t\t\tthis._bActionInitiatedFromContextMenu = true;\r\n\t\t\t}\r\n\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sServerMessageToUpdateEntity, this.prepareTargetForRefreshGantt,\r\n\t\t\t\tthis);\r\n\t\t\tthis._oChangeOperationsDelegate = new ChangeOperations();\r\n\t\t\tthis.getView().getModel().setUseBatch(true);\r\n\t\t\tsap.ui.getCore().getMessageManager().registerObject(this._oChangeOperationsDelegate.getFragment(), true);\r\n\r\n\t\t\tthis._oChangeOperationsDelegate.setContentToFragment(oEvent, this._oOwnerComponent, this.getView(), this.statusCommon, this.oPeriodTypeDates,\r\n\t\t\t\tthis._oShapeForOpContextMenu);\r\n\r\n\t\t},\r\n\r\n\t\t/** Clicked the \"Remove Constraints\" button\r\n\t\t * @public\r\n\t\t */\r\n\t\tpressRemoveConstraintsButton: function (oEvent) {\r\n\t\t\t//Event Bus to be subscribed only once to handle it at u-shell level\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sServerMessageToUpdateEntity, this.prepareTargetForRefreshGantt,\r\n\t\t\t\tthis);\r\n\t\t\tvar viewModel = this.getView().getModel();\r\n\t\t\tvar oGanttChartContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar aSelectedItemsContext = this._getSelectedRowBindingContext(oTreeTable);\r\n\t\t\t//Set busy indicator\r\n\t\t\toGanttChartContainer.setBusy(true);\r\n\t\t\tvar itemModel = null;\r\n\t\t\tif (oEvent.getSource().getId().includes(\"idButtonRemoveConstraintsAction\")) {\r\n\t\t\t\tthis._bActionInitiatedFromContextMenu = true;\r\n\t\t\t\t//In case triggered from Shape Context Menu\r\n\t\t\t\tvar sOpShapePath = this._oShapeForOpContextMenu.getBindingContext().getPath();\r\n\t\t\t\tvar oOperationData = this.getModel().getData(sOpShapePath);\r\n\t\t\t\titemModel = oOperationData;\r\n\t\t\t\t//Proceed only if no error or has cross order releation for the current operation\r\n\t\t\t\tif (!itemModel.HasError) {\r\n\t\t\t\t\t// delete old messages from the target\r\n\t\t\t\t\tsap.ui.getCore().getMessageManager().removeAllMessages();\r\n\t\t\t\t\t// Prepare the backend call to set dispatch status\r\n\t\t\t\t\tthis.statusCommon.removeOperationConstraints(itemModel, viewModel);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//function to get a message for the MessagePopover\r\n\t\t\t\t\tthis.operationValidation(itemModel);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//if triggered from toolbar button\r\n\t\t\t\tfor (var i = 0; i < aSelectedItemsContext.length; i++) {\r\n\t\t\t\t\titemModel = aSelectedItemsContext[i].getObject();\r\n\t\t\t\t\tif (Utils.checkIfOperationIsWithinTimePeriod(itemModel, this.oPeriodTypeDates)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Proceed only if no error for the current operation\r\n\t\t\t\t\tif (!itemModel.HasError) {\r\n\t\t\t\t\t\t// delete old messages from the target\r\n\t\t\t\t\t\tsap.ui.getCore().getMessageManager().removeAllMessages();\r\n\t\t\t\t\t\t//Prepare the backend call to remove the Operation constraints\r\n\t\t\t\t\t\tthis.statusCommon.removeOperationConstraints(itemModel, viewModel);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//create a message for the Message Popover\r\n\t\t\t\t\t\tthis.operationValidation(itemModel);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Finally perfom the backend call\r\n\t\t\tthis.statusCommon.triggerBackendCall();\r\n\t\t},\r\n\r\n\t\t// _getSelectionRows: function (oTreeTable) {\r\n\t\t// \tvar aSelectedRows = [];\r\n\t\t// \tvar selectedRowIndices = oTreeTable.getSelectedIndices();\r\n\t\t// \tvar tableRowsArray = oTreeTable.getRows();\r\n\t\t// \tfor (var i = 0; i < selectedRowIndices.length; i++) {\r\n\t\t// \t\tif (tableRowsArray[selectedRowIndices[i]]) {\r\n\t\t// \t\t\taSelectedRows.push(tableRowsArray[selectedRowIndices[i]]);\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// \treturn aSelectedRows;\r\n\t\t// },\r\n\t\t_getSelectedRowBindingContext: function (oTreeTable) {\r\n\t\t\tvar aSelectedRowBindingContexts = [];\r\n\t\t\tvar selectedRowIndices = oTreeTable.getSelectedIndices();\r\n\t\t\tvar aRowBindings = oTreeTable.getBinding(\"rows\");\r\n\t\t\tfor (var i = 0; i < selectedRowIndices.length; i++) {\r\n\t\t\t\tif (aRowBindings.getContextByIndex(selectedRowIndices[i])) {\r\n\t\t\t\t\taSelectedRowBindingContexts.push(aRowBindings.getContextByIndex(selectedRowIndices[i]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn aSelectedRowBindingContexts;\r\n\t\t},\r\n\r\n\t\t_requestSent: function (oEvent) {\r\n\t\t\tthis.requestProcessingHandler(this.onBeforeRequestCompleted,\r\n\t\t\t\tthis.getView().byId(\"idOrderGanttContainer\"),\r\n\t\t\t\toEvent);\r\n\t\t},\r\n\r\n\t\t_requestComplete: function (oEvent) {\r\n\t\t\t//added for scenerios when workcenter is added or removed for the user while the sorting is already applied\r\n\t\t\tif (oEvent.getParameter(\"requests\")) {\r\n\t\t\t\tvar oRequest = oEvent.getParameter(\"requests\")[0];\r\n\t\t\t\tif (oRequest.url.indexOf(\"C_RSHEAMUserVariant\") !== -1 && oRequest.method !== \"GET\") {\r\n\t\t\t\t\t//reset the sorting for the table to the .\r\n\t\t\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\t\t\tvar binding = oTreeTable.getBinding(\"rows\");\r\n\t\t\t\t\t//added to handle cases where sorter is not set\r\n\t\t\t\t\tif (binding.aSorters.length !== 0) {\r\n\t\t\t\t\t\tbinding.aSorters[0].sPath = this.sSortOrderField;\r\n\t\t\t\t\t\tbinding.aSorters[0].bDescending = this.sOrderSortOrder === \"Descending\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//in case a ned column in Gantt was added and a full Gantt refresh is triggered, \r\n\t\t\t\t\t//display a message toast once the refresh is completed\t\t\t\t\t\r\n\t\t\t\t} else if (oRequest.url.indexOf(\"C_RSHOrdersAndOperations\") !== -1 && oRequest.method === \"GET\") {\r\n\t\t\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\t\t\t\t\tif (this._bNewColumnAdded) {\r\n\t\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"FullRefreshAfterColumnAdded\"), sap.ui.core.MessageType.Information, Constants.sDisplayTypeMessageToast);\r\n\t\t\t\t\t\tthis._bNewColumnAdded = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//Check if an operation change action was completed, if yes then keep the screen busy\r\n\t\t\tif (oEvent.getParameter(\"requests\") && (oRequest.url.indexOf(\"I_MaintOrderOperationTP\") === -1 && oRequest.method !== \"POST\")) {\r\n\t\t\t\tthis.requestProcessingHandler(this.onAfterRequestCompleted,\r\n\t\t\t\t\tthis.getView().byId(\"idOrderGanttContainer\"), oEvent);\r\n\t\t\t\t//Close the mass change dialog after the data is received\r\n\t\t\t\tif (this.onAfterDataRecievedFn) {\r\n\t\t\t\t\tthis.onAfterDataRecievedFn();\r\n\t\t\t\t\tthis.onAfterDataRecievedFn = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tonBeforeRequestCompleted: function (oGanttControl) {\r\n\r\n\t\t\t// we need to suppress the busy indicator for the default 2nd call \r\n\t\t\t// which is done to prefetch the next page by the framework\r\n\t\t\t// Here a dummy property bSkipBusyIndicator is used \r\n\t\t\t// State 1 - Undefined - show busy indicator\r\n\t\t\t// State 2 - True - skip busy indicator (since it is prefetch of additional rows and UI is already usable)\r\n\t\t\t// State 3 - False - here after we update busy indicator always\r\n\t\t\t//if (!oGanttControl._bSkipBusyIndicator) {\r\n\t\t\toGanttControl.setBusy(true);\r\n\t\t\t//}\r\n\r\n\t\t\t/*\tif (typeof oGanttControl._bSkipBusyIndicator === \"undefined\") {\r\n\t\t\t\t\toGanttControl._bSkipBusyIndicator = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\toGanttControl._bSkipBusyIndicator = false;\r\n\t\t\t\t}*/\r\n\r\n\t\t},\r\n\r\n\t\tonAfterRequestCompleted: function (oGanttControl) {\r\n\t\t\toGanttControl.setBusy(false);\r\n\t\t\t// This line was added because after the Gantt control is loaded the tree control\r\n\t\t\t// says 'no data' unless a column is resized, so force rerender after data bind.\r\n\t\t\t// This is a workaround for the above ipro,ssue.\r\n\t\t\t// Correction progress to be followed in the Internal Incident: 1770468435. \r\n\t\t\t/*jQuery.sap.delayedCall(0, this, function () {\r\n\t\t\t\t// oGanttControl.rerender();\r\n\t\t\t});\r\n*/\r\n\t\t},\r\n\r\n\t\trequestProcessingHandler: function (fHandler, oGanttContainer, oEvent) {\r\n\r\n\t\t\tif (oGanttContainer) {\r\n\r\n\t\t\t\tvar aRequest = oEvent.getParameter(\"requests\");\r\n\t\t\t\tvar bPerformHandler = false;\r\n\r\n\t\t\t\tfor (var i = 0; aRequest && i < aRequest.length; i++) {\r\n\r\n\t\t\t\t\tbPerformHandler = aRequest[i].url.indexOf(\"C_RSHOrdersAndOperations\") !== -1;\r\n\r\n\t\t\t\t\tif (bPerformHandler) {\r\n\t\t\t\t\t\tfHandler(oGanttContainer);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onAfterActionsCompleted: function (oRefreshParametersOfSourceApp) {\r\n\t\t\tif (oRefreshParametersOfSourceApp && oRefreshParametersOfSourceApp.bRefreshOfSourceAppRequired) {\r\n\t\t\t\tif (this._bActionInitiatedFromContextMenu) {\r\n\t\t\t\t\tthis.onAfterDataRecievedFn = oRefreshParametersOfSourceApp.onAfterTableBindFn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.disableButtons();\r\n\t\t\t\t\tthis.getView().byId(\"idOrderTreeTable\").getBinding(\"rows\").clearSelection();\r\n\t\t\t\t\t//Store the function reference and invoke it once the subsequent read is done.\r\n\t\t\t\t\tthis.onAfterDataRecievedFn = oRefreshParametersOfSourceApp.onAfterTableBindFn;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t//If the action resulted in no change then restore the application state\r\n\t\t\t\tthis.getView().byId(\"idOrderGanttContainer\").setBusy(false);\r\n\t\t\t\tif (oRefreshParametersOfSourceApp && oRefreshParametersOfSourceApp.onAfterTableBindFn) {\r\n\t\t\t\t\toRefreshParametersOfSourceApp.onAfterTableBindFn();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * disable Set/Cancel Dispatch buttons\r\n\t\t * @public\r\n\t\t */\r\n\t\tdisableButtons: function () {\r\n\t\t\tvar oDispatchButton = this.getView().byId(\"idButtonDispatch\");\r\n\t\t\tvar oCancelDispatchButton = this.getView().byId(\"idButtonCancDispatch\");\r\n\t\t\tvar oChangeOperationsButton = this.getView().byId(\"idButtonChange\");\r\n\t\t\tvar oScheduleOrderButton = this.getView().byId(\"idScheduleOrder\");\r\n\t\t\tvar oRemoveConstraintsButton = this.getView().byId(\"idRemoveConstraints\");\r\n\r\n\t\t\toDispatchButton.setEnabled(false);\r\n\t\t\toCancelDispatchButton.setEnabled(false);\r\n\t\t\toChangeOperationsButton.setEnabled(false);\r\n\t\t\toScheduleOrderButton.setEnabled(false);\r\n\t\t\toRemoveConstraintsButton.setEnabled(false);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns unique shape id for a relationship\r\n\t\t * @param {String} [p] PredecessorOrderOperationRowID\r\n\t\t * @param {String} [s] SuccessorOrderOperationRowID\r\n\t\t * @param {String} [n] NetworkActivityRelationType\r\n\t\t *  @returns {String} Concatenated shape id\r\n\t\t * @public\r\n\t\t */\r\n\t\tgetShapeId: function (p, s, n) {\r\n\t\t\treturn p + \"\" + s + \"\" + n;\r\n\t\t},\r\n\r\n\t\tgetStrokeFill: function (sExplicit, sViolation) {\r\n\t\t\tif (sViolation === \"X\") {\r\n\t\t\t\treturn \"@sapNegativeColor\";\r\n\t\t\t} else if (sExplicit === \"X\") {\r\n\t\t\t\treturn \"@sapTextColor\"; //Fiori Black is not defined (but it is universal)\r\n\t\t\t} else {\r\n\t\t\t\treturn \"@sapNeutralColor\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetRelationToolTip: function (sNetworkActivityRelationType, sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\tsSuccessorOrderOperation, sRelationshipIsViolated) {\r\n\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\t\t\tif (sRelationshipIsViolated === \"X\") {\r\n\t\t\t\tswitch (sNetworkActivityRelationType) {\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.StartToStart:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"violatedS2SRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.StartToFinish:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"violatedS2FRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.FinishToStart:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"violatedF2SRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.FinishToFinish:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"violatedF2FRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tswitch (sNetworkActivityRelationType) {\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.StartToStart:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"normalS2SRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.StartToFinish:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"normalS2FRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.FinishToStart:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"normalF2SRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tcase sap.gantt.simple.RelationshipType.FinishToFinish:\r\n\t\t\t\t\treturn oResourceBundle.getText(\"normalF2FRelTooltip\", [sPredecessorOrder, sPredecessorOrderOperation, sSuccessorOrder,\r\n\t\t\t\t\t\tsSuccessorOrderOperation\r\n\t\t\t\t\t]);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Function to add Padding at start of a given string\r\n\t\t * @private \r\n\t\t * @param {Integer} [iLength] The final length of the string\r\n\t\t * @param {String} [sString] Giveb String\r\n\t\t * @returns {String} Returns the padded string\r\n\t\t */\r\n\t\t_addPaddingAtStart: function (iLength, sString) {\r\n\t\t\tif (sString.length === iLength) {\r\n\t\t\t\treturn sString;\r\n\t\t\t} else {\r\n\t\t\t\treturn this._addPaddingAtStart(iLength, \"0\" + sString);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Function to get the internal relationship type on drawing a relationship\r\n\t\t * @private \r\n\t\t * @param {String} [sRelationshipType] descriptive text\r\n\t\t * @returns {String} [sRelationshipType] Relationship type \r\n\t\t */\r\n\t\t_getInternalRelationshipType: function (sRelationshipType) {\r\n\t\t\tswitch (sRelationshipType) {\r\n\t\t\tcase \"FinishToStart\":\r\n\t\t\t\treturn \"NF\";\r\n\t\t\tcase \"StartToStart\":\r\n\t\t\t\treturn \"AF\";\r\n\t\t\tcase \"FinishToFinish\":\r\n\t\t\t\treturn \"EF\";\r\n\t\t\tcase \"StartToFinish\":\r\n\t\t\t\treturn \"SF\";\r\n\t\t\tdefault:\r\n\t\t\t\treturn \" \";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * shapeConnect Event triggered on Connecting two shapes. Additionally, connectable needs to be enabled for the shape.\r\n\t\t * Creates a new relationship using the service RSH_SB_MAINTENANCE_ORDER\r\n\t\t * @public\r\n\t\t * @param {Object} [oEvent] Event object\r\n\t\t */\r\n\t\tcreateRelationship: function (oEvent) {\r\n\t\t\tvar fnParseUid = sap.gantt.misc.Utility.parseUid;\r\n\t\t\tvar oModel = this.getView().getModel();\r\n\r\n\t\t\t// Get the 'from' operation info\r\n\t\t\tvar sfromNode = oEvent.getParameter(\"fromShapeUid\");\r\n\t\t\tvar oParsedUid = fnParseUid(sfromNode);\r\n\t\t\tvar oFromRow = oModel.getObject(oParsedUid.shapeDataName);\r\n\r\n\t\t\t// Get the 'to' operation info\r\n\t\t\tvar sToNode = oEvent.getParameter(\"toShapeUid\");\r\n\t\t\toParsedUid = fnParseUid(sToNode);\r\n\t\t\tvar oToRow = oModel.getObject(oParsedUid.shapeDataName);\r\n\r\n\t\t\t// Get the relationship type\r\n\t\t\tvar sRelationshipType = oEvent.getParameter(\"type\");\r\n\r\n\t\t\t// Get the internal relationship type\r\n\t\t\tvar sInternalRelationshipType = this._getInternalRelationshipType(sRelationshipType);\r\n\r\n\t\t\tvar oPayload = {\r\n\t\t\t\t\"MaintenanceOrder\": oFromRow.MaintenanceOrder,\r\n\t\t\t\t\"MaintenanceOrderOperation\": oFromRow.MaintenanceOrderOperation,\r\n\t\t\t\t\"MaintenanceOrderSubOperation\": \"\",\r\n\t\t\t\t\"MaintOrdOperationIsSuccessor\": false,\r\n\t\t\t\t\"RelatedMaintenanceOrder\": oToRow.MaintenanceOrder,\r\n\t\t\t\t\"RelatedMaintOrderOperation\": oToRow.MaintenanceOrderOperation,\r\n\t\t\t\t\"OrderOpRelationshipIntType\": sInternalRelationshipType\r\n\t\t\t};\r\n\r\n\t\t\tvar oRelationModel = this.getView().getModel(\"relationshipModel\");\r\n\t\t\tvar that = this;\r\n\t\t\tvar oResourceBundle = that.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\r\n\r\n\t\t\tvar oParametersForCreateEntry = {\r\n\t\t\t\tsuccess: function (oData) {\r\n\t\t\t\t\tvar oTargetParams = {};\r\n\t\t\t\t\toTargetParams.itemHashMapContainer = [];\r\n\t\t\t\t\toTargetParams.itemHashMapContainer.push(oFromRow.MaintenanceOrder);\r\n\t\t\t\t\toTargetParams.itemHashMapContainer.push(oToRow.MaintenanceOrder);\r\n\t\t\t\t\toTargetParams.parameters = {};\r\n\t\t\t\t\toTargetParams.parameters.bRefreshOfSourceAppRequired = true;\r\n\r\n\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"RelationshipCreationSuccess\"), sap.ui.core.MessageType.Success, Constants.sDisplayTypeMessageToast);\r\n\r\n\t\t\t\t\t//Trigger delta refresh query\r\n\t\t\t\t\tthat.prepareTargetForRefreshGantt(\"\", \"\", oTargetParams);\r\n\t\t\t\t},\r\n\t\t\t\terror: function (oError) {\r\n\t\t\t\t\tthat.getView().byId(\"idOrderGanttContainer\").setBusy(false);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis.getView().byId(\"idOrderGanttContainer\").setBusy(true);\r\n\t\t\toRelationModel.create(\"/C_RSHMaintenanceOrdOperationTP(MaintenanceOrder='\" + this._addPaddingAtStart(12, oFromRow.MaintenanceOrder) +\r\n\t\t\t\t\"',MaintenanceOrderOperation='\" + oFromRow.MaintenanceOrderOperation +\r\n\t\t\t\t\"',MaintenanceOrderSubOperation='\" + encodeURIComponent(\" \") + \"')/to_MaintOrderOpRelationship\", oPayload,\r\n\t\t\t\toParametersForCreateEntry\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tonFirstVisibleRowChanged: function (oEvent) {\r\n\t\t\tthis._refreshBinding(false);\r\n\t\t\t//Need to reset $Select and performance filter for order request upon scrolling, ensure binding exists\r\n\t\t\tif (oEvent.getSource().getBinding(\"rows\")) {\r\n\t\t\t\tif (this._sPerformanceFilterOnExpand) {\r\n\t\t\t\t\toEvent.getSource().getBinding(\"rows\").sFilterParams = this._sExistingFilterString;\r\n\t\t\t\t\tthis._sPerformanceFilterOnExpand = null;\r\n\t\t\t\t}\r\n\t\t\t\tthis.setFinalSelectForOrderRequest();\r\n\t\t\t}\r\n\t\t\tthis._closeContextMenus();\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Triggerd by event visibleHorizonUpdate\r\n\t\t */\r\n\t\tonVisibleHorizonUpdate: function () {\r\n\t\t\t//If visible gantt chart changes horizontally then close the context menu if open\r\n\t\t\tthis._closeContextMenus();\r\n\t\t},\r\n\r\n\t\t_closeContextMenus: function () {\r\n\t\t\tif (this._oShapeContextMenu && this._oShapeContextMenu.isOpen()) {\r\n\t\t\t\tthis._oShapeContextMenu.close();\r\n\t\t\t}\r\n\t\t\tif (this.oRelationshipActionSheet && this.oRelationshipActionSheet.isPopoverOpen()) {\r\n\t\t\t\tthis.oRelationshipActionSheet.closePopover();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Handler for the change event of the custom settings dialog which is fired of a change of setting was recorded there\r\n\t\t * It will reapply custom setting to the UIModel, update binding where needed and reapplies the standard gantt settings\r\n\t\t * @param {string} sLibraryChannel - used event channel\r\n\t\t * @param {string} sEvent - event name\r\n\t\t * @param {object} oSettings - changed settings handed over from dialog\r\n\t\t */\r\n\t\t_onGanttSettingDialogChange: function (sLibraryChannel, sEvent, oSettings) {\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tvar sPropertypath;\r\n\r\n\t\t\t//Save the changed custom setting to UIModel\r\n\t\t\tObject.keys(oSettings).forEach(function (settingName) {\r\n\t\t\t\t//Change UIModel for custom settings - standard gantt settings are not part of the UIModel\r\n\t\t\t\t//If Statement has to be kept in sync with the used standard settings of Gantt, whenerver one is added is needs to be added here as well\r\n\t\t\t\tif (settingName !== \"enableNowLine\" || settingName !== \"enableCursorLine\" || settingName !== \"enableVerticalLine\" || settingName !==\r\n\t\t\t\t\t\"enableStatusBar\") {\r\n\t\t\t\t\tsPropertypath = \"/\" + settingName;\r\n\t\t\t\t\toUIModel.setProperty(sPropertypath, oSettings[settingName]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (oUIModel.getProperty(\"/showUtilizationIndicator\") || oUIModel.getProperty(\"/showNonWorkingTimes\")) {\r\n\t\t\t\tthis._setThresholdForModelData();\r\n\t\t\t}\r\n\t\t\t//Bind/send Relationship, Utilization and Non Working Time request if needed\r\n\t\t\tthis.updateRelationshipsAndUtilizations();\r\n\t\t\tthis.bindCalendarDefHelper();\r\n\r\n\t\t\t//condensed mode setting\r\n\t\t\tvar bRerender = false;\r\n\t\t\tif (!(oSettings.condensedModeActive === undefined)) {\r\n\t\t\t\tthis._activateCondensedMode(bRerender);\r\n\t\t\t\tbRerender = true;\r\n\t\t\t}\r\n\t\t\t//reapply all used standard settings at once if at least one of them has changed\r\n\t\t\tif (oSettings.enableNowLine !== undefined || oSettings.enableCursorLine !== undefined || oSettings.enableVerticalLine !==\r\n\t\t\t\tundefined || oSettings.enableStatusBar !== undefined) {\r\n\t\t\t\tvar oGanttContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\t\tvar mSettings = {\r\n\t\t\t\t\tenableNowLine: oSettings.enableNowLine !== undefined ? oSettings.enableNowLine : oGanttContainer.getEnableNowLine(),\r\n\t\t\t\t\tenableCursorLine: oSettings.enableCursorLine !== undefined ? oSettings.enableCursorLine : oGanttContainer.getEnableCursorLine(),\r\n\t\t\t\t\tenableVerticalLine: oSettings.enableVerticalLine !== undefined ? oSettings.enableVerticalLine : oGanttContainer.getEnableVerticalLine(),\r\n\t\t\t\t\tenableStatusBar: oSettings.enableStatusBar !== undefined ? oSettings.enableStatusBar : oGanttContainer.getEnableStatusBar()\r\n\t\t\t\t};\r\n\t\t\t\toGanttContainer.applySettings(mSettings);\r\n\t\t\t\t//applySettings function automatically rerenders the Gantt Table so no need to explicitly rerender afterwards\r\n\t\t\t\tbRerender = false;\r\n\t\t\t}\r\n\t\t\tif (bRerender) {\r\n\t\t\t\tthis.getView().byId(\"idOrderGanttContainer\").rerender();\r\n\t\t\t} else {\r\n\t\t\t\t//If the gantt is not rerendered subscribe to the custom event raised in change event of gantt to update the button states\r\n\t\t\t\tsap.ui.getCore().getEventBus().subscribeOnce(this.sOrderGanttChannel, this.sIndiviudalActionOnGanttChange, this.updateToolbarButtonsFromSelectedRows,\r\n\t\t\t\t\tthis);\r\n\t\t\t}\r\n\t\t\tthis.persistSettingsP13n();\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Handler for the press event of the custom setting button\r\n\t\t * Opens the custom settings dialog\r\n\t\t * @param {object} oEvent - event object\r\n\t\t */\r\n\t\tonCustomGanttSettingPress: function (oEvent) {\r\n\t\t\tvar oView = this.getView();\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\t//SettingConfiguration defines which settings(Layouts and single controls) are displayed on the settings dialog\r\n\t\t\tvar oSettingConfiguration = this.getOwnerComponent().getModel(\"GanttSettingConfiguration\");\r\n\t\t\tvar oSettingValues = this._getGanttSettingValues();\r\n\r\n\t\t\tvar oGanttSettingDialog = new GanttChartSettingsDialog(oSettingConfiguration.getData(), oSettingValues, oView);\r\n\t\t\t//subsribe to the change event fired by the settings dialog if any change happend to the settings\r\n\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sGanttSettingsChanged, this._onGanttSettingDialogChange,\r\n\t\t\t\tthis);\r\n\t\t\toGanttSettingDialog.openDialog();\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Build up JSON Object for the gantt settings this includes the used standard gantt settings (e.g NowLine)\r\n\t\t * and the custom setting like Relationships, REstrictions and condensed mode which are also stored in UIModel to handle correct display\r\n\t\t * @returns {JSON} oSettingValues\r\n\t\t */\r\n\t\t_getGanttSettingValues: function () {\r\n\t\t\tvar oSettingValues = {};\r\n\t\t\tvar oGanttContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\r\n\t\t\t//Layout Tab\r\n\t\t\toSettingValues.enableNowLine = oGanttContainer.getEnableNowLine();\r\n\t\t\toSettingValues.enableCursorLine = oGanttContainer.getEnableCursorLine();\r\n\t\t\toSettingValues.enableVerticalLine = oGanttContainer.getEnableVerticalLine();\r\n\t\t\toSettingValues.enableStatusBar = oGanttContainer.getEnableStatusBar();\r\n\t\t\toSettingValues.bCondensedModeActive = oUIModel.getProperty(\"/condensedModeActive\");\r\n\r\n\t\t\t//WorkCenter Tab\r\n\t\t\toSettingValues.bShowNonWorkingTimes = oUIModel.getProperty(\"/showNonWorkingTimes\");\r\n\t\t\toSettingValues.bShowUtilizationIndicator = oUIModel.getProperty(\"/showUtilizationIndicator\");\r\n\r\n\t\t\t//OrderAndOperationTab\r\n\t\t\toSettingValues.bShowFinalDueDate = oUIModel.getProperty(\"/showFinalDueDate\");\r\n\t\t\toSettingValues.bShowImpRel = oUIModel.getProperty(\"/showImpRel\");\r\n\t\t\toSettingValues.bShowExpRel = oUIModel.getProperty(\"/showExpRel\");\r\n\t\t\toSettingValues.bShowRestrictions = oUIModel.getProperty(\"/showRestrictions\");\r\n\r\n\t\t\treturn oSettingValues;\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * activates condensed mode as per user setting and rerenders gantt based on parameter\r\n\t\t * @param {boolean} bRerender - Needs to be set to true if an explicit rerender of the gantt is needed\r\n\t\t * @private \r\n\t\t */\r\n\t\t_activateCondensedMode: function (bRerender) {\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\r\n\t\t\tif (oUIModel.getProperty(\"/condensedModeActive\")) {\r\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityAdditionalClass());\r\n\t\t\t} else {\r\n\t\t\t\tthis.getView().removeStyleClass(this.getOwnerComponent().getContentDensityAdditionalClass());\r\n\t\t\t}\r\n\t\t\tif (bRerender) {\r\n\t\t\t\tthis.getView().byId(\"idOrderGanttContainer\").rerender();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Function to bind and unbind Relationships and Utilizations based on settings change\r\n\t\t * @public\r\n\t\t */\r\n\t\tupdateRelationshipsAndUtilizations: function () {\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tvar oGntRowStg = this.byId(\"OrderGntRowStgID\");\r\n\t\t\tvar oTreeTable = this.byId(\"idOrderTreeTable\");\r\n\r\n\t\t\tif (!oUIModel.getProperty(\"/showImpRel\") && !oUIModel.getProperty(\"/showExpRel\")) {\r\n\t\t\t\tif (oGntRowStg.getBindingInfo(\"relationships\")) {\r\n\t\t\t\t\tthis._previousRelationshipBinding = oGntRowStg.getBindingInfo(\"relationships\");\r\n\t\t\t\t\toGntRowStg.unbindAggregation(\"relationships\");\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(null);\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(oGntRowStg);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (!oGntRowStg.getBindingInfo(\"relationships\")) {\r\n\t\t\t\t\t//Full refresh is required in scenarios when settings is switched on first time within the app\r\n\t\t\t\t\t//in order to add association to the tree table rows and subsequent expand requests\r\n\t\t\t\t\tvar bCalledDuringInitialization = false;\r\n\t\t\t\t\tthis._sPerformanceFilterOnExpand = null;\r\n\t\t\t\t\tthis.setFinalSelectForOrderRequest(bCalledDuringInitialization);\r\n\t\t\t\t\toTreeTable.getBinding(\"rows\").refresh();\r\n\t\t\t\t\toGntRowStg.bindAggregation(\"relationships\", this._previousRelationshipBinding);\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(null);\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(oGntRowStg);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!oUIModel.getProperty(\"/showUtilizationIndicator\")) {\r\n\t\t\t\tif (oGntRowStg.getBindingInfo(\"shapes4\")) {\r\n\t\t\t\t\tthis._previousUtilizationBinding = oGntRowStg.getBindingInfo(\"shapes4\");\r\n\t\t\t\t\toGntRowStg.unbindAggregation(\"shapes4\");\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(null);\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(oGntRowStg);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (!oGntRowStg.getBindingInfo(\"shapes4\")) {\r\n\t\t\t\t\t//Full refresh is required in scenarios when settings is switched on first time within the app\r\n\t\t\t\t\t//in order to add association to the tree table rows and subsequent expand requests\r\n\t\t\t\t\tbCalledDuringInitialization = false;\r\n\t\t\t\t\tthis._sPerformanceFilterOnExpand = null;\r\n\t\t\t\t\tthis.setFinalSelectForOrderRequest(bCalledDuringInitialization);\r\n\t\t\t\t\toTreeTable.getBinding(\"rows\").refresh();\r\n\t\t\t\t\toGntRowStg.bindAggregation(\"shapes4\", this._previousUtilizationBinding);\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(null);\r\n\t\t\t\t\toTreeTable.setRowSettingsTemplate(oGntRowStg);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpersistSettingsP13n: function () {\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tvar oGanttContainer = this.byId(\"idOrderGanttContainer\");\r\n\t\t\tvar oSettings = {};\r\n\r\n\t\t\toSettings.bShowImpRel = oUIModel.getProperty(\"/showImpRel\");\r\n\t\t\toSettings.bShowExpRel = oUIModel.getProperty(\"/showExpRel\");\r\n\t\t\toSettings.bShowNonWorkingTimes = oUIModel.getProperty(\"/showNonWorkingTimes\");\r\n\t\t\toSettings.bShowCriticalPath = oUIModel.getProperty(\"/showCriticalPath\");\r\n\t\t\toSettings.bCondensedModeActive = oUIModel.getProperty(\"/condensedModeActive\");\r\n\t\t\toSettings.enableNowLine = oGanttContainer.getEnableNowLine();\r\n\t\t\toSettings.enableCursorLine = oGanttContainer.getEnableCursorLine();\r\n\t\t\toSettings.enableVerticalLine = oGanttContainer.getEnableVerticalLine();\r\n\t\t\toSettings.enableStatusBar = oGanttContainer.getEnableStatusBar();\r\n\t\t\toSettings.bShowFinalDueDate = oUIModel.getProperty(\"/showFinalDueDate\");\r\n\t\t\toSettings.bShowRestrictions = oUIModel.getProperty(\"/showRestrictions\");\r\n\t\t\toSettings.bShowUtilizationIndicator = oUIModel.getProperty(\"/showUtilizationIndicator\");\r\n\r\n\t\t\tAppPersContainer.getInstance().getFeatureModel(Constants.sGanttP13nSettings).setProperty(\"/\", oSettings);\r\n\t\t\tAppPersContainer.getInstance().saveContainer();\r\n\r\n\t\t},\r\n\r\n\t\t_refreshBinding: function (bRefresh) {\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oBinding = oTreeTable.getBinding(\"rows\");\r\n\t\t\tif (oBinding) {\r\n\t\t\t\tif (oBinding.aSorters && oBinding.aSorters.length > 0) {\r\n\t\t\t\t\toBinding.aSorters[0].sPath = this.sSortOrderField;\r\n\t\t\t\t\toBinding.aSorters[0].bDescending = this.sOrderSortOrder === \"Descending\" ? true : false;\r\n\t\t\t\t}\r\n\t\t\t\tif (bRefresh) {\r\n\t\t\t\t\toBinding.refresh(true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setCondensedMode: function () {\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tif (oUIModel.getProperty(\"/condensedModeActive\")) {\r\n\t\t\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityAdditionalClass());\r\n\t\t\t\tthis.getView().byId(\"idOrderGanttContainer\").rerender();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * This will update the UIModel with all values from Settings in Gantt of graphical view\r\n\t\t * In case there are no settings yet (user has never applied own settings) they will all be set to false\r\n\t\t * to have the UIModel ready for decision on UI control e.g shape visible or not\r\n\t\t * @param {object} [oUIModel]  - UI model for GanttP13nSettings\r\n\t\t * @param {object} [oSettings] - Settings object saved in GanttP13nSettings of AppPersContainer\r\n\t\t */\r\n\t\t_updateUiModelFromGanttSettings: function (oUIModel, oSettings) {\r\n\t\t\tif (oSettings && oSettings.bShowImpRel !== null && oSettings.bShowImpRel !== undefined) {\r\n\t\t\t\toUIModel.setProperty(\"/showImpRel\", oSettings.bShowImpRel);\r\n\t\t\t\toUIModel.setProperty(\"/showExpRel\", oSettings.bShowExpRel);\r\n\t\t\t\toUIModel.setProperty(\"/showCriticalPath\", false);\r\n\t\t\t\toUIModel.setProperty(\"/showNonWorkingTimes\", oSettings.bShowNonWorkingTimes);\r\n\t\t\t\toUIModel.setProperty(\"/condensedModeActive\", oSettings.bCondensedModeActive);\r\n\t\t\t\toUIModel.setProperty(\"/showFinalDueDate\", oSettings.bShowFinalDueDate);\r\n\t\t\t\toUIModel.setProperty(\"/showRestrictions\", oSettings.bShowRestrictions);\r\n\t\t\t\toUIModel.setProperty(\"/showUtilizationIndicator\", oSettings.bShowUtilizationIndicator);\r\n\t\t\t} else {\r\n\t\t\t\toUIModel.setProperty(\"/showImpRel\", false);\r\n\t\t\t\toUIModel.setProperty(\"/showExpRel\", false);\r\n\t\t\t\toUIModel.setProperty(\"/showCriticalPath\", false);\r\n\t\t\t\toUIModel.setProperty(\"/showNonWorkingTimes\", false);\r\n\t\t\t\toUIModel.setProperty(\"/condensedModeActive\", false);\r\n\t\t\t\toUIModel.setProperty(\"/showFinalDueDate\", false);\r\n\t\t\t\toUIModel.setProperty(\"/showRestrictions\", false);\r\n\t\t\t\toUIModel.setProperty(\"/showUtilizationIndicator\", false);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setupSettings: function () {\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tvar oSettings = AppPersContainer.getInstance().getFeatureModel(Constants.sGanttP13nSettings).getProperty(\"/\", \"oSettings\");\r\n\r\n\t\t\tthis._updateUiModelFromGanttSettings(oUIModel, oSettings);\r\n\t\t\tif (oSettings.enableNowLine !== undefined || oSettings.enableCursorLine !== undefined || oSettings.enableVerticalLine !== undefined) {\r\n\t\t\t\tvar oGanttContainer = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\t\tvar mSettings = {\r\n\t\t\t\t\tenableNowLine: oSettings.enableNowLine !== undefined ? oSettings.enableNowLine : oGanttContainer.getEnableNowLine(),\r\n\t\t\t\t\tenableCursorLine: oSettings.enableCursorLine !== undefined ? oSettings.enableCursorLine : oGanttContainer.getEnableCursorLine(),\r\n\t\t\t\t\tenableVerticalLine: oSettings.enableVerticalLine !== undefined ? oSettings.enableVerticalLine : oGanttContainer.getEnableVerticalLine(),\r\n\t\t\t\t\tenableStatusBar: oSettings.enableStatusBar !== undefined ? oSettings.enableStatusBar : oGanttContainer.getEnableStatusBar()\r\n\t\t\t\t};\r\n\t\t\t\toGanttContainer.applySettings(mSettings);\r\n\t\t\t}\r\n\r\n\t\t\t//----part of standard setting dialog will be cleaned up once new dialog is accepted-----------\r\n\t\t\t// var oContToolbar = this.byId(\"idGanttContainerToolbar\");\r\n\t\t\t// var aSettingItems = oContToolbar.getSettingItems();\r\n\t\t\t// var aSettingsToRemove = [];\r\n\t\t\t// var oGantt = this.getView().byId(\"idOrderGanttContainer\");\r\n\t\t\t// for (var i = 0; i < aSettingItems.length; i++) {\r\n\t\t\t// \tvar sKey = aSettingItems[i].getKey();\r\n\t\t\t// \tif (this._aSettingsItemsNotToBeShown.indexOf(sKey) !== -1) {\r\n\t\t\t// \t\taSettingsToRemove.push(aSettingItems[i]);\r\n\t\t\t// \t} else {\r\n\t\t\t// \t\tvar tKey = sKey.substring(4);\r\n\t\t\t// \t\tvar bPersValue = oSettings.getProperty(\"/\" + tKey);\r\n\r\n\t\t\t// \t\tif (bPersValue !== undefined && bPersValue !== null) {\r\n\t\t\t// \t\t\tif (tKey === \"enableNowLine\") {\r\n\t\t\t// \t\t\t\toGantt.setEnableNowLine(bPersValue);\r\n\t\t\t// \t\t\t} else if (tKey === \"enableVerticalLine\") {\r\n\t\t\t// \t\t\t\toGantt.setEnableVerticalLine(bPersValue);\r\n\t\t\t// \t\t\t} else if (tKey === \"enableCursorLine\") {\r\n\t\t\t// \t\t\t\toGantt.setEnableCursorLine(bPersValue);\r\n\t\t\t// \t\t\t}\r\n\t\t\t// \t\t} else {\r\n\t\t\t// \t\t\tbPersValue = true;\r\n\t\t\t// \t\t}\r\n\t\t\t// \t\toUIModel.setProperty(\"/\" + sKey, bPersValue);\r\n\t\t\t// \t\taSettingItems[i].bindProperty(\"checked\", {\r\n\t\t\t// \t\t\tpath: \"UIModel>/\" + sKey\r\n\t\t\t// \t\t});\r\n\t\t\t// \t}\r\n\t\t\t// }\r\n\r\n\t\t\t// for (i = 0; i < aSettingsToRemove.length; i++) {\r\n\t\t\t// \toContToolbar.removeSettingItem(aSettingsToRemove[i]);\r\n\t\t\t// }\r\n\r\n\t\t\t// oContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \tchecked: \"{UIModel>/showImpRel}\",\r\n\t\t\t// \tdisplayText: \"{i18n>showImpRelations}\",\r\n\t\t\t// \tkey: \"sShowImpRel\"\r\n\t\t\t// }), 5);\r\n\t\t\t// oContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \tchecked: \"{UIModel>/showExpRel}\",\r\n\t\t\t// \tdisplayText: \"{i18n>showExpRelations}\",\r\n\t\t\t// \tkey: \"sShowExpRel\"\r\n\t\t\t// }), 6);\r\n\t\t\t// oContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \tchecked: \"{UIModel>/showNonWorkingTimes}\",\r\n\t\t\t// \tdisplayText: \"{i18n>showNonWorkingTimes}\",\r\n\t\t\t// \tkey: \"sShowNonWorkingTimes\"\r\n\t\t\t// }), 7);\r\n\r\n\t\t\t// //Display condensed mode setting only for the desktop\r\n\t\t\t// //and hide for mobile and tablet devices\r\n\t\t\t// if (this.getOwnerComponent().getContentDensityAdditionalClass()) {\r\n\t\t\t// \toContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \t\tchecked: \"{UIModel>/condensedModeActive}\",\r\n\t\t\t// \t\tdisplayText: \"{i18n>activateCondensedMode}\",\r\n\t\t\t// \t\tkey: \"sCondensedModeActive\"\r\n\t\t\t// \t}), 8);\r\n\t\t\t// }\r\n\t\t\t// oContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \tchecked: \"{UIModel>/showFinalDueDate}\",\r\n\t\t\t// \tdisplayText: \"{i18n>showFinalDueDate}\",\r\n\t\t\t// \tkey: \"sShowFinalDueDate\"\r\n\t\t\t// }), 9);\r\n\t\t\t// oContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \tchecked: \"{UIModel>/showRestrictions}\",\r\n\t\t\t// \tdisplayText: \"{i18n>showRestrictions}\",\r\n\t\t\t// \tkey: \"sShowRestrictions\"\r\n\t\t\t// }), 10);\r\n\t\t\t// oContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \tchecked: \"{UIModel>/showUtilizationIndicator}\",\r\n\t\t\t// \tdisplayText: \"{i18n>showUtilizationIndicator}\",\r\n\t\t\t// \tkey: \"sShowUtilizationIndicator\"\r\n\t\t\t// }), 11);\r\n\r\n\t\t\t// /*oContToolbar.insertSettingItem(new SettingItem({\r\n\t\t\t// \tchecked: \"{UIModel>/showCriticalPath}\",\r\n\t\t\t// \tdisplayText: \"{i18n>showCriticalPath}\",\r\n\t\t\t// \tkey: \"sShowCriticalPath\"\r\n\t\t\t// }), 7);*/\r\n\t\t\t//--------\t\r\n\t\t},\r\n\r\n\t\tgetRelVisibility: function (sExplicit, bShowImpRel, bShowExpRel) {\r\n\t\t\tif (sExplicit === \"X\") {\r\n\t\t\t\treturn bShowExpRel ? 1 : 0;\r\n\t\t\t} else {\r\n\t\t\t\treturn bShowImpRel ? 1 : 0;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * returns the current variant key applied and Filter data\r\n\t\t * @private \r\n\t\t * @returns {object} oAppState\r\n\t\t */\r\n\t\t_getCurrentAppState: function () {\r\n\t\t\tvar oSmartFilter = this.byId(\"idOrderGanttSmartFilterBar\");\r\n\t\t\tvar oGanttChartWithTable = this.getView().byId(\"idOrderGanttChartWithTable\");\r\n\t\t\tvar oAppState = {};\r\n\t\t\tthis._oAppStateData.customData.selectionPanelSize = oGanttChartWithTable.getSelectionPanelSize();\r\n\t\t\toAppState = this._oAppStateData.customData;\r\n\t\t\tvar oVariantMgmt = oSmartFilter.getVariantManagement();\r\n\r\n\t\t\toAppState.sCurrentVariantKey = oVariantMgmt.getCurrentVariantId() === \"\" ? oVariantMgmt.getStandardVariantKey() :\r\n\t\t\t\toVariantMgmt.getCurrentVariantId();\r\n\t\t\t//get the Smart Filter data\t\r\n\t\t\toAppState.oFilterData = this._getCurrentFilterState(oSmartFilter, this._oStartDate, this._oEndDate);\r\n\t\t\treturn oAppState;\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * returns the current filter data.\r\n\t\t * @private \r\n\t\t * @param {sap.ui.comp.smartfilterbar.SmartFilterBar} oSmartFilter SmartFlterBar UI element\r\n\t\t * @returns {object} Filters \r\n\t\t */\r\n\t\t_getCurrentFilterState: function (oSmartFilter) {\r\n\t\t\tvar aVisibleFields = [];\r\n\t\t\tvar aHiddenFields = [];\r\n\t\t\toSmartFilter.getAllFilterItems(true).forEach(function (oItem) {\r\n\t\t\t\t//Filters available in the Filter Dialog are considered as active filters.\r\n\t\t\t\t//Collect all the active fields of filter - including the association fields.\r\n\t\t\t\taVisibleFields.push(oItem.getName());\r\n\t\t\t\t//Collect Unchecked active filters to be used for not displaying on the Filter Area in UI \r\n\t\t\t\t//but will be used for filtering results\r\n\t\t\t\tif (oItem.getProperty(\"visibleInFilterBar\") === false) {\r\n\t\t\t\t\taHiddenFields.push(oItem.getName());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn {\r\n\t\t\t\taFilters: oSmartFilter.getFilterData(),\r\n\t\t\t\taVisibleFields: aVisibleFields,\r\n\t\t\t\taHiddenFields: aHiddenFields\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This method triggers search when the variants are updated and smart filterbar is initialized, in case app state is applied.\r\n\t\t * @private\r\n\t\t */\r\n\t\t_delayedTriggerSearch: function () {\r\n\t\t\tvar oSmartFilter = this.getView().byId(\"idOrderGanttSmartFilterBar\");\r\n\t\t\tif (oSmartFilter.isInitialised() && this._bIsAppStateApplied && !oSmartFilter.isCurrentVariantExecuteOnSelectEnabled()) {\r\n\t\t\t\tvar oParams = {\r\n\t\t\t\t\tfinalTrigger: true\r\n\t\t\t\t};\r\n\t\t\t\toSmartFilter.fireSearch(oParams);\r\n\t\t\t}\r\n\t\t\tthis._bFirstTriggerDone = true;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This method triggers the deffered table binding requests after the filter is triggered\r\n\t\t * for the first time only\r\n\t\t * @private\r\n\t\t */\r\n\t\t_submitDelayedRequests: function () {\r\n\t\t\tthis.getView().getModel().attachBatchRequestCompleted(this._requestComplete, this);\r\n\t\t\tthis.getView().getModel().submitChanges({\r\n\t\t\t\tgroupId: \"iDBatchOrderFilterRequest\"\r\n\t\t\t});\r\n\t\t\t//Remove the order filter batch group once the application is loaded\r\n\t\t\tvar aCurrentDeferredBatchGroups = this.getView().getModel().getDeferredBatchGroups();\r\n\t\t\tvar indexOfOrderFilterGroup = aCurrentDeferredBatchGroups.indexOf(\"iDBatchOrderFilterRequest\");\r\n\t\t\taCurrentDeferredBatchGroups.splice(indexOfOrderFilterGroup, 1);\r\n\t\t\tthis.getView().getModel().setDeferredGroups(aCurrentDeferredBatchGroups);\r\n\t\t\tthis._bSubmitofDeferredRequestsDone = true;\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t *  Sets the retrieved data from Appstate to Filters and if the variant is changed,\r\n\t\t * applies the changed variant.\r\n\t\t * @param {object} oSavedAppState contains the data from Appstate\r\n\t\t * @param {boolean} isIAppState says if it is a forward navigation\r\n\t\t */\r\n\t\tsetAppState: function (oSavedAppState) {\r\n\t\t\tvar oSmartFilter = this.byId(\"idOrderGanttSmartFilterBar\");\r\n\t\t\tif (oSavedAppState && oSavedAppState.customData && Object.keys(oSavedAppState.customData).length !== 0) {\r\n\t\t\t\t//retrieve the variant from app state and apply the variant\r\n\t\t\t\tvar oVariantContent = oSmartFilter.getVariantManagement().getVariantContent(oSmartFilter, oSavedAppState.customData.sCurrentVariantKey);\r\n\r\n\t\t\t\t// Restore the modified filter state -> reset the visiblity of fields\r\n\t\t\t\tif (this._isIAppState && oSavedAppState.customData.oFilterData) {\r\n\t\t\t\t\tif (oVariantContent) {\r\n\t\t\t\t\t\t//oSmartFilter.applyVariant(oVariantContent);\r\n\t\t\t\t\t\toSmartFilter.setCurrentVariantId(oSavedAppState.customData.sCurrentVariantKey);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (oSavedAppState.customData.oFilterData.aVisibleFields) {\r\n\t\t\t\t\t\toSavedAppState.customData.oFilterData.aVisibleFields.forEach(function (sKey) {\r\n\t\t\t\t\t\t\tif (sKey) {\r\n\t\t\t\t\t\t\t\toSmartFilter.addFieldToAdvancedArea(sKey);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t// If standard filter variant is modified then flag is set to enable the Restore button in filter PopUp on back navigation.\r\n\t\t\t\t\t\tif (oSmartFilter.getControlConfiguration().length !== oSavedAppState.customData.oFilterData.aVisibleFields.length) {\r\n\t\t\t\t\t\t\toSmartFilter._oVariantManagement.currentVariantSetModified(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Visibilty of unchecked active filter fields will not be displayed in Filter Area of UI but considered for filtering. \r\n\t\t\t\t\tif (oSavedAppState.customData.oFilterData.aHiddenFields) {\r\n\t\t\t\t\t\toSavedAppState.customData.oFilterData.aHiddenFields.forEach(function (sKey) {\r\n\t\t\t\t\t\t\tif (sKey) {\r\n\t\t\t\t\t\t\t\tvar oUncheckedFields = oSmartFilter._getFilterItemByName(sKey);\r\n\t\t\t\t\t\t\t\toUncheckedFields.setVisibleInAdvancedArea(false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// apply the retrieved the filter settings from Appstate to Smart filter.\r\n\t\t\t\t\toSmartFilter.setFilterData(oSavedAppState.customData.oFilterData.aFilters, true);\r\n\t\t\t\t}\r\n\t\t\t\t//apply sort order\r\n\t\t\t\tif (oSavedAppState.customData.aSortColumn && oSavedAppState.customData.aSortColumn.hasOwnProperty(\"id\")) {\r\n\t\t\t\t\tif (this.getView().byId(oSavedAppState.customData.aSortColumn.id)) {\r\n\t\t\t\t\t\tthis.onSortRequest(\"\", oSavedAppState.customData.aSortColumn);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t *  Based on user settings and whether the operation is on critical path,\r\n\t\t * shows or hides the red bottom line below operartion\r\n\t\t * @param {object} oOperationIsOnCriticalPath contains the data whether the operation is on critical path\r\n\t\t * @param {object} bShowCriticalPath is a boolean variable which contains the value of \"Visualize Critical Path\" in user settings\r\n\t\t * @returns {boolean} boolean value\r\n\t\t * @private\r\n\t\t */\r\n\t\tgetOnCriticalVisibility: function (oOperationIsOnCriticalPath, bShowCriticalPath) {\r\n\t\t\tif (oOperationIsOnCriticalPath === \"X\" && bShowCriticalPath) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Called when treetable column is selected for column width,visibility and sort change\r\n\t\t * @private\r\n\t\t * @param {Object} [oEvent] Event object returning the selected column\r\n\t\t */\r\n\t\t_onPersChangeForColumns: function (oEvent) {\r\n\t\t\tvar oTreeTable = this.getView().byId(\"idOrderTreeTable\");\r\n\t\t\tvar oGanttChartWithTable = this.getView().byId(\"idOrderGanttChartWithTable\");\r\n\t\t\tthis._oAppStateData = {\r\n\t\t\t\tcustomData: GanttUtils.getGanttColumnPersonalization(oTreeTable, oGanttChartWithTable, oEvent, this._oAppStateData)\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Format text for Final Due Date Milestone in Gantt - shown when hovering over the shape\r\n\t\t * @param {date} dFinalDueDate Final Due Date of order\r\n\t\t * @returns {string} Text shown as hover tooltip\r\n\t\t */\r\n\t\tgetFFDMilestoneTitle: function (dFinalDueDate) {\r\n\t\t\tvar sFinalDueDateText = \"\";\r\n\t\t\tif (dFinalDueDate) {\r\n\t\t\t\tvar sFinalDueDate = sap.ui.core.format.DateFormat.getDateInstance().format(dFinalDueDate, true);\r\n\t\t\t\tsFinalDueDateText = this.getView().getModel(\"i18n\").getResourceBundle().getText(\"FinalDueDateTooltip\", [sFinalDueDate]);\r\n\t\t\t\t// return this._formatToLocale(this.removeTimeZoneOffset(dFinalDueDate));\r\n\t\t\t}\r\n\t\t\treturn sFinalDueDateText;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Called when drag and drop is performed on a operation in order gantt\r\n\t\t * @param {Object} [oEvent] Event object returning the selected item\r\n\t\t */\r\n\t\tMoveOperationBasedOnDateChange: function (oEvent) {\r\n\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sServerMessageToUpdateEntity, this.prepareTargetForRefreshGantt,\r\n\t\t\t\tthis);\r\n\t\t\tvar oModel = this.getView().getModel();\r\n\t\t\tvar dStartDate = oEvent.getParameter(\"cursorDateTime\");\r\n\r\n\t\t\t// Drag and drop is allowed only for future date \r\n\t\t\tvar oCurrentDate = new Date();\r\n\t\t\tif (dStartDate < oCurrentDate) {\r\n\t\t\t\tUtils.addMessage(this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(\"ErrorMessageDragAndDroptoPastDates\"),\r\n\t\t\t\t\tsap.ui.core.MessageType.Error, Constants.sDisplayTypeMessageBox);\r\n\t\t\t} else {\r\n\t\t\t\tvar fStartDate = Utils.getAdjustedDate(dStartDate);\r\n\t\t\t\tvar oTargetRow = oEvent.getParameter(\"targetRow\");\r\n\t\t\t\tvar oTargetShape = oEvent.getParameter(\"targetShape\");\r\n\t\t\t\t//\t\t\t\tvar oRow = oModel.getObject(oTargetRow.getBindingContext().getPath());\r\n\t\t\t\tvar oRow;\r\n\r\n\t\t\t\tthis.getView().byId(\"idOrderGanttContainer\").setBusy(true);\r\n\r\n\t\t\t\tif (oTargetRow && oTargetRow.getBindingContext()) {\r\n\t\t\t\t\toRow = oModel.getObject(oTargetRow.getBindingContext().getPath());\r\n\t\t\t\t} else if (oTargetShape && oTargetShape.getParent() && oTargetShape.getParent().getBindingContext()) {\r\n\t\t\t\t\toRow = oModel.getObject(oTargetShape.getParent().getBindingContext().getPath());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar oTimeFormat = sap.ui.core.format.DateFormat.getDateInstance({\r\n\t\t\t\t\tpattern: \"PTHH'H'mm'M'ss'S'\"\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Round off the time to a full hour as per user requirements\r\n\t\t\t\tvar dFinalTime = Utils.roundDateToNearestDnDGranularity(dStartDate);\r\n\t\t\t\t//Converting the Time Selection to a Date Object \r\n\t\t\t\t// inorder to format the value as per Backend understandable format\t\t\t\r\n\t\t\t\tvar formattedTime = oTimeFormat.format(dFinalTime);\r\n\r\n\t\t\t\tthis._itemHashMap = new ItemHashMap();\r\n\t\t\t\tthis._oChangeOperationsDelegate = new ChangeOperations();\r\n\t\t\t\tthis._oChangeOperationsDelegate.scheduleOperationBasedOnDateChange(fStartDate, formattedTime, oRow, oModel, this._itemHashMap);\r\n\r\n\t\t\t\t// Trigger backend call\r\n\t\t\t\tvar sGroupId = \"massChange\";\r\n\t\t\t\tthis._itemHashMap.triggerBackendCall(sGroupId, Constants.sAfterDragAndDropFinalizedGanttApp);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tbindCalendarDefHelper: function () {\r\n\r\n\t\t\tvar oCurrentTimePeriod = this._getCurrentTimePeriod();\r\n\t\t\tvar oFromDate = encodeURIComponent(oCurrentTimePeriod.sCalendarStartDate.toISOString().substring(0, 19));\r\n\t\t\tvar oToDate = encodeURIComponent(oCurrentTimePeriod.sCalendarEndDate.toISOString().substring(0, 19));\r\n\r\n\t\t\tvar oUIModel = this._oOwnerComponent.getModel(\"UIModel\");\r\n\t\t\tif (oUIModel.getProperty(\"/showNonWorkingTimes\")) {\r\n\t\t\t\t//Bind calendar def only if it does not exists for the time period\r\n\t\t\t\tif (this.oFromDate === oFromDate && this.oToDate === oToDate && this.byId(\"idCalDef\").getDefs().length) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.oFromDate = oFromDate;\r\n\t\t\t\tthis.oToDate = oToDate;\r\n\t\t\t\tthis.byId(\"idCalDef\").bindAggregation(\"defs\", {\r\n\t\t\t\t\tpath: \"/C_RSHOrderGanttCalendar(P_StartDate=datetime'\" + oFromDate + \"',P_EndDate=datetime'\" +\r\n\t\t\t\t\t\toToDate + \"')/Set\",\r\n\t\t\t\t\tparameters: {\r\n\t\t\t\t\t\texpand: \"to_Intervals\",\r\n\t\t\t\t\t\t//pass the groupID to separate Calendar and OrderOperation batch calls making them parallel\r\n\t\t\t\t\t\tgroupId: \"GetCalendars\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\ttemplate: new Calendar({\r\n\t\t\t\t\t\tkey: \"{WorkCenterInternalID}\",\r\n\t\t\t\t\t\tbackgroundColor: \"sapShell_Background\",\r\n\t\t\t\t\t\ttimeIntervals: {\r\n\t\t\t\t\t\t\tpath: \"to_Intervals\",\r\n\t\t\t\t\t\t\ttemplateShareable: true,\r\n\t\t\t\t\t\t\ttemplate: new TimeInterval({\r\n\t\t\t\t\t\t\t\tstartTime: {\r\n\t\t\t\t\t\t\t\t\tpath: \"WorkCenterNonAvailStrtDteTme\",\r\n\t\t\t\t\t\t\t\t\tformatter: this.removeTimeZoneOffset\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tendTime: {\r\n\t\t\t\t\t\t\t\t\tpath: \"WorkCenterNonAvailEndDteTme\",\r\n\t\t\t\t\t\t\t\t\tformatter: this.removeTimeZoneOffset\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t} else\r\n\t\t\tif (!oUIModel.getProperty(\"/showNonWorkingTimes\")) {\r\n\t\t\t\tthis.byId(\"idCalDef\").unbindDefs();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Receives all the orders for which the change is performed, filters the changed operations for the given order\r\n\t\t * @private\r\n\t\t * @param {Array} [aChangedOrders] The model for the Gantt table\r\n\t\t * @param {String} [sGivenOrder] The given order\r\n\t\t * @returns {Array} [aChangedOperations] Changed operations for the given order\r\n\t\t */\r\n\t\t_getCorrespondingChangedOperations: function (aChangedOrders, sGivenOrder) {\r\n\t\t\tvar aChangedOperations = [];\r\n\t\t\tfor (var i = 0; i < aChangedOrders.length; i++) {\r\n\t\t\t\tif (aChangedOrders[i].Order === sGivenOrder) {\r\n\t\t\t\t\taChangedOperations.push(aChangedOrders[i].Operation);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn aChangedOperations;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get data for a property via a path in the model\r\n\t\t * @private\r\n\t\t * @param {Object} [oModel] The model for the Gantt table\r\n\t\t * @param {String} [sPath] Path \r\n\t\t * @param {String} [sProperty] Property to be read\r\n\t\t * @returns {String} Property value\r\n\t\t */\r\n\t\t_getDataFromModel: function (oModel, sPath, sProperty) {\r\n\t\t\treturn oModel.getProperty(sPath + \"/\" + sProperty);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Refer JSDoc for _findOperationsForUtilizationUpdate function for speacial scenario example\r\n\t\t * Check if the already read entries have the previous work centers( Work_Center_1)\r\n\t\t * Add this order/ operation filter (Order B Operation 4) as additional filters\r\n\t\t * @private\r\n\t\t * @param {Object} [oModel] The model for the Gantt table\r\n\t\t * @param {Object} [oBinding] Binding for the Gantt table\r\n\t\t * @param {Array} [aWorkCentersToRefresh] Collection of previous work centers that may or may not need update based on read entries\r\n\t\t * @param {Array} [aExpandedNodesRootContexts] Collection of read entries exclusive to changed entries\r\n\t\t * @returns {Array} [aOrderOpFilter] Additional filter\r\n\t\t */\r\n\t\t_createAdditionalOrderOpFilterForUtilizationUpdate: function (oModel, oBinding, aWorkCentersToRefresh, aExpandedNodesRootContexts) {\r\n\t\t\tvar aOrderOpFilter = [],\r\n\t\t\t\toFilterSingleOperation = {};\r\n\t\t\tfor (var i = 0; aWorkCentersToRefresh.length && i < aExpandedNodesRootContexts.length; i++) {\r\n\t\t\t\tvar oExpandedKeys = oBinding.oKeys[aExpandedNodesRootContexts[i].substring(1)];\r\n\t\t\t\tfor (var j = 0; aWorkCentersToRefresh.length && j < oExpandedKeys.length; j++) {\r\n\t\t\t\t\tvar sOperationWorkCenter = this._getDataFromModel(oModel, \"/\" + oExpandedKeys[j], \"MainWorkCenter\");\r\n\t\t\t\t\tvar iIndexOfWorkCenter = aWorkCentersToRefresh.indexOf(sOperationWorkCenter);\r\n\t\t\t\t\tif (iIndexOfWorkCenter !== -1) {\r\n\t\t\t\t\t\taWorkCentersToRefresh.splice(iIndexOfWorkCenter, 1);\r\n\t\t\t\t\t\toFilterSingleOperation = new Filter({\r\n\t\t\t\t\t\t\tfilters: [\r\n\t\t\t\t\t\t\t\tnew Filter(\"MaintenanceOrder\", FilterOperator.EQ, this._getDataFromModel(oModel, \"/\" + oExpandedKeys[j], \"MaintenanceOrder\")),\r\n\t\t\t\t\t\t\t\tnew Filter(\"MaintenanceOrderOperation\", FilterOperator.EQ, this._getDataFromModel(oModel, \"/\" + oExpandedKeys[j],\r\n\t\t\t\t\t\t\t\t\t\"MaintenanceOrderOperation\"))\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\tand: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\taOrderOpFilter.push(new Filter(oFilterSingleOperation, false));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn aOrderOpFilter;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The below function is introduced to handle the special scenario for indirect impact of work center change action.\r\n\t\t * There are two orders, A and B\r\n\t\t * ====================================\r\n\t\t * A    | Operation 1  | Work_Center_1\r\n\t\t *      | Operation 2  | Work_Center_2\r\n\t\t * ====================================\r\n\t\t * B    | Operation 3  | Work_Center_2\r\n\t\t *      | Operation 4  | Work_Center_1\r\n\t\t * ====================================\r\n\t\t * Now expand both orders, perform work center change on Operation 1, change it to Work_Center_2\r\n\t\t * The delta query reads all the operations for Order A, therefore, utilization for Work_Center_2 is updated\r\n\t\t * However, the old work center(Work_Center_1)'s utilization is not updated.\r\n\t\t * Additional affected order/ operation shall be queried representing unique work centers\r\n\t\t * One update per work center should suffice as each work center utilization share same metadata id.\r\n\t\t * @private\r\n\t\t * @param {Array} [aOrderOperationsWithWCChange] Order/ Operations with work center change\r\n\t\t * @returns {Array} [aOrderOpFilter] Order/ Operation filter representing unique work centers\r\n\t\t */\r\n\t\t_findOperationsForUtilizationUpdate: function (aOrderOperationsWithWCChange) {\r\n\t\t\tvar oTreeTableBinding = this.byId(\"idOrderTreeTable\").getBinding(\"rows\"),\r\n\t\t\t\t//Store the root node(Order) contexts\r\n\t\t\t\taRootNodeContexts = oTreeTableBinding.getRootContexts(),\r\n\t\t\t\t//Order Contexts for which the operations are already read\r\n\t\t\t\taExpandedNodesRootContexts = [],\r\n\t\t\t\t//Order Contexts for which the action was performed\r\n\t\t\t\taChangedRootNodeContexts = [],\r\n\t\t\t\ti, j;\r\n\r\n\t\t\tfor (i = 0; i < aOrderOperationsWithWCChange.length; i++) {\r\n\t\t\t\tfor (j = 0; j < aRootNodeContexts.length; j++) {\r\n\t\t\t\t\tvar sPath = aRootNodeContexts[j].sPath;\r\n\r\n\t\t\t\t\tif (!oTreeTableBinding.oKeys[sPath.substring(1)]) {\r\n\t\t\t\t\t\t//No need to check unread entries\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\taExpandedNodesRootContexts.push(sPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (sPath.indexOf(aOrderOperationsWithWCChange[i].Order) !== -1) {\r\n\t\t\t\t\t\tvar iPresentInExpandedContexts = aExpandedNodesRootContexts.indexOf(sPath);\r\n\t\t\t\t\t\tif (iPresentInExpandedContexts !== -1) {\r\n\t\t\t\t\t\t\taExpandedNodesRootContexts.splice(iPresentInExpandedContexts, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\taChangedRootNodeContexts.push(sPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar aUnChangedWorkCenters = [],\r\n\t\t\t\taOldWorkCenter = [],\r\n\t\t\t\toModel = oTreeTableBinding.getModel();\r\n\t\t\t//A order may have operations with changed work center, store the workcenters in aOldWorkCenter,\r\n\t\t\t//and operations for which work center is not changed, store these workcenters aUnChangedWorkCenters, ensure unique entries are stored.\r\n\t\t\tfor (i = 0; i < aChangedRootNodeContexts.length; i++) {\r\n\t\t\t\tvar oExpandedKeys = oTreeTableBinding.oKeys[aChangedRootNodeContexts[i].substring(1)];\r\n\t\t\t\tvar sMaintenanceOrder = this._getDataFromModel(oModel, aChangedRootNodeContexts[i], \"MaintenanceOrder\");\r\n\t\t\t\tvar aChangedOperations = this._getCorrespondingChangedOperations(aOrderOperationsWithWCChange, sMaintenanceOrder);\r\n\r\n\t\t\t\tfor (j = 0; j < oExpandedKeys.length; j++) {\r\n\t\t\t\t\tvar sWorkCenter = this._getDataFromModel(oModel, \"/\" + oExpandedKeys[j], \"MainWorkCenter\");\r\n\t\t\t\t\tif (aChangedOperations.indexOf(this._getDataFromModel(oModel, \"/\" + oExpandedKeys[j], \"MaintenanceOrderOperation\")) !== -1) {\r\n\t\t\t\t\t\tif (aOldWorkCenter.indexOf(sWorkCenter) === -1) {\r\n\t\t\t\t\t\t\taOldWorkCenter.push(sWorkCenter);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (aUnChangedWorkCenters.indexOf(sWorkCenter) === -1) {\r\n\t\t\t\t\t\t\taUnChangedWorkCenters.push(sWorkCenter);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar aWorkCentersToRefresh = [],\r\n\t\t\t\taOrderOpFilter = [];\r\n\t\t\t//Check do we need additional order/ operation query, if the unchanged work centers already contain the old work centers, the order delta read query should be sufficient\r\n\t\t\tfor (i = 0; i < aOldWorkCenter.length; i++) {\r\n\t\t\t\tif (aUnChangedWorkCenters.indexOf(aOldWorkCenter[i]) === -1) {\r\n\t\t\t\t\taWorkCentersToRefresh.push(aOldWorkCenter[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//The special scenario, create the additonal filter\r\n\t\t\tif (aWorkCentersToRefresh.length) {\r\n\t\t\t\taOrderOpFilter = this._createAdditionalOrderOpFilterForUtilizationUpdate(oModel, oTreeTableBinding, aWorkCentersToRefresh,\r\n\t\t\t\t\taExpandedNodesRootContexts);\r\n\t\t\t}\r\n\r\n\t\t\treturn aOrderOpFilter;\r\n\t\t},\r\n\r\n\t\t/** The core function to formulate and initiate delta queries/ read requests in order to update the changed orders/ operations.\r\n\t\t * Invoked upon publish of event \"serverMessageToUpdateEntity\", in this case the channel is rsh.eam.lib.common.\r\n\t\t * Also invoked manually after the relationship creation is successful, this case the channel and event are empty.\r\n\t\t * \r\n\t\t * There are two read queries(_performDeltaReadQuery) one for the order level, other for operation level.\r\n\t\t * The order and operation(_adjustFiltersForOpQuery) queries are enhanced with filters, such as the orders/ operations changed, the time period, etc.\r\n\t\t * And with urlParameters, such as $expand: to_Relationships, ( _getUrlParametersForDeltaRefresh), and so on.\r\n\t\t * \r\n\t\t * The status change action, say changing to due or dispatch and the other actions, say the mass change, create relationship, these two scenarios need different\r\n\t\t * handling as latter results in rescheduling, and therefore, the indicator \"iNotAStatusChangeAction\" is used to differentiate between the two.\r\n\t\t * In case of status change only the particular order/ operation within the time period is requested, in other cases the entire order with all its operations beyond time period is requested.\r\n\t\t * \r\n\t\t * Handled scenarios: When there is a reordering of all the operations and they stay within the visible time horizon, the result looks same as full refresh.\r\n\t\t * Differently handled scenarios: If the operation move out of the visible time horizon, then no shapes are displayed against it,\r\n\t\t * and no actions can be performed on it(checkIfOperationIsWithinTimePeriod).\r\n\t\t * Unhandled scenario: Due to rescheduling new operation can also be a part of visible time horizon, here, this operation is not visible unlike full refresh.\r\n\t\t * \r\n\t\t * Flow goes to \"_onAfterActionsCompleted\" directly if no actual change was done, or after all the read queries(Order & Operation) are completed in order to take care\r\n\t\t * of busy indicators and closing dialogs if any.\r\n\t\t * \r\n\t\t * Note:If the utilization indicator setting is on, \"Work center change action\" needs special handling (findOperationsForUtilizationUpdate)\r\n\t\t * \r\n\t\t * @public\r\n\t\t * @param {Object} [sChannel] Channel of the event\r\n\t\t * @param {Object} [sEvent] The name of event\r\n\t\t * @param {Object} [oTargetsAndParams] Object comprising a flag(bRefreshOfSourceAppRequired) whether read queries need to be done,\r\n\t\t * object list of all the changes(itemHashMapContainer), where each change has the action, order, operation and if the change was done via mass change dialog,\r\n\t\t * the reference to invoke onAfterDataRecievedFn is also present which eventually closes the dialog.\r\n\t\t *\r\n\t\t */\r\n\t\tprepareTargetForRefreshGantt: function (sChannel, sEvent, oTargetsAndParams) {\r\n\t\t\tvar oModel = this.byId(\"idOrderTreeTable\").getModel();\r\n\t\t\tvar sPath = \"/C_RSHOrdersAndOperations\";\r\n\t\t\tvar oUIModel = this.getModel(\"UIModel\");\r\n\t\t\tvar oUrlParams = {};\r\n\r\n\t\t\tvar aFilter = [],\r\n\t\t\t\toFilterSingleOperation,\r\n\t\t\t\taOrderOpFilter = [],\r\n\t\t\t\taOrder = [],\r\n\t\t\t\taOrderFilter = [];\r\n\r\n\t\t\tvar oTargets = oTargetsAndParams.itemHashMapContainer;\r\n\r\n\t\t\t//ensure Gantt gets refreshed after changes, if there was a change performed\r\n\t\t\tif (!oTargetsAndParams.parameters.bRefreshOfSourceAppRequired) {\r\n\t\t\t\tthis._onAfterActionsCompleted(oTargetsAndParams.parameters);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//Flag to determine if change operation is performed\r\n\t\t\tvar iNotAStatusChangeAction = 0;\r\n\t\t\tvar aStoreWorkCentersChanged = [];\r\n\t\t\tif (sChannel !== \"\" && sEvent !== Constants.sOnRelationshipDelete) {\r\n\t\t\t\tfor (var property in oTargets) {\r\n\t\t\t\t\tif (oTargets.hasOwnProperty(property)) {\r\n\t\t\t\t\t\tvar aTarget = property.split(\",\");\r\n\t\t\t\t\t\tif (iNotAStatusChangeAction === 0) {\r\n\t\t\t\t\t\t\tiNotAStatusChangeAction = (aTarget[2] === Constants.workcenterAction || aTarget[2] === Constants.reassignWorkCenterAction ||\r\n\t\t\t\t\t\t\t\taTarget[\r\n\t\t\t\t\t\t\t\t\t2] ===\r\n\t\t\t\t\t\t\t\tConstants.schedulingOperationAction || aTarget[2] === Constants.removeConstraintsAction) ? 1 : 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (aTarget[2] === Constants.workcenterAction) {\r\n\t\t\t\t\t\t\tvar oOrderOpWithWCChange = {\r\n\t\t\t\t\t\t\t\tOrder: aTarget[0],\r\n\t\t\t\t\t\t\t\tOperation: aTarget[1]\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\taStoreWorkCentersChanged.push(oOrderOpWithWCChange);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//Create Filter for particular order and operation \r\n\t\t\t\t\t\toFilterSingleOperation = new Filter({\r\n\t\t\t\t\t\t\tfilters: [\r\n\t\t\t\t\t\t\t\tnew Filter(\"MaintenanceOrder\", FilterOperator.EQ, aTarget[0]),\r\n\t\t\t\t\t\t\t\tnew Filter(\"MaintenanceOrderOperation\", FilterOperator.EQ, aTarget[1])\r\n\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\tand: true\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\taOrderOpFilter.push(new Filter(oFilterSingleOperation, false));\r\n\r\n\t\t\t\t\t\t//Create Filter for Order\r\n\t\t\t\t\t\tif (!aOrder.includes(aTarget[0])) {\r\n\t\t\t\t\t\t\taOrder.push(aTarget[0]);\r\n\t\t\t\t\t\t\taOrderFilter.push(new Filter(\"MaintenanceOrder\", FilterOperator.EQ, aTarget[0]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else { /*Refresh orders after relationship creation*/\r\n\t\t\t\toTargets.forEach(function (order) {\r\n\t\t\t\t\tiNotAStatusChangeAction = 1;\r\n\t\t\t\t\tif (aOrder.indexOf(order) === -1) {\r\n\t\t\t\t\t\taOrder.push(order);\r\n\t\t\t\t\t\taOrderFilter.push(new Filter(\"MaintenanceOrder\", FilterOperator.EQ, order));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (aStoreWorkCentersChanged.length && oUIModel.getProperty(\"/showUtilizationIndicator\")) {\r\n\t\t\t\tvar aFiltersForUtilInd = this._findOperationsForUtilizationUpdate(aStoreWorkCentersChanged);\r\n\t\t\t}\r\n\r\n\t\t\t//Pass by value Order Filter\r\n\t\t\tvar aOrderFilterCopy = aOrderFilter.slice();\r\n\r\n\t\t\t//Prepare filters for Operation call. For Mass Change we need to fetch all the operations and for other actions just the changed operation.\r\n\t\t\taFilter = this._adjustFiltersForOpQuery(iNotAStatusChangeAction, aOrderFilterCopy, aFiltersForUtilInd, aOrderOpFilter,\r\n\t\t\t\toUIModel.getProperty(\"/showUtilizationIndicator\"));\r\n\r\n\t\t\tvar _sSelectSubStringOperations = this._sOperationAppStateFields ? this._sOperationAllTechMandatoryFields + this._sOperationAppStateFields :\r\n\t\t\t\tthis\r\n\t\t\t\t._sOperationAllTechMandatoryFields;\r\n\r\n\t\t\toUrlParams = this._getUrlParametersForDeltaRefresh(oUIModel.getProperty(\"/showImpRel\"), oUIModel.getProperty(\"/showExpRel\"),\r\n\t\t\t\toUIModel.getProperty(\"/showUtilizationIndicator\"), _sSelectSubStringOperations);\r\n\r\n\t\t\tvar oOperationReadCall = this._performDeltaReadQuery(oModel, sPath, aFilter, oUrlParams);\r\n\r\n\t\t\t//Prepare filters for Order call\r\n\t\t\taFilter = [];\r\n\r\n\t\t\taFilter.push(new Filter(aOrderFilter, false));\r\n\t\t\taFilter.push(new Filter({\r\n\t\t\t\tfilters: [\r\n\t\t\t\t\tnew Filter(\"OrderOperationRowLevel\", FilterOperator.EQ, 0)\r\n\t\t\t\t],\r\n\t\t\t\tand: true\r\n\t\t\t}));\r\n\r\n\t\t\tvar _sSelectSubStringOrders = this._sOrderAppStateFields ? this._sOrderAllTechMandatoryFields + \",\" + this._sOrderAppStateFields :\r\n\t\t\t\tthis\r\n\t\t\t\t._sOrderAllTechMandatoryFields;\r\n\r\n\t\t\toUrlParams = this._getUrlParametersForDeltaRefresh(oUIModel.getProperty(\"/showImpRel\"), oUIModel.getProperty(\"/showExpRel\"), false /*No need to query Utilization for Order */ ,\r\n\t\t\t\t_sSelectSubStringOrders);\r\n\r\n\t\t\tvar oOrderReadCall = this._performDeltaReadQuery(oModel, sPath, aFilter, oUrlParams);\r\n\r\n\t\t\tPromise.all([oOperationReadCall, oOrderReadCall]).then(this._onAfterActionsCompleted(oTargetsAndParams.parameters));\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This will create a combination of filter required for Operation Delta Query, if mass change action is performed, or remove constraints\r\n\t\t * then entire order is queried,\r\n\t\t * if there was change work center action, and there are order/ operations indirectly affected, then include this filter as well\r\n\t\t * Add datetime filter if utilization is to be queried\r\n\t\t * In other case, for status change actions, query only the changed operation, for ex: dispatch\r\n\t\t * @private\r\n\t\t * @param {Integer} [iNotAStatusChange] If the action performed was mass change?\r\n\t\t * @param {Array} [aOrderFilter] Collection of changed orders filters\r\n\t\t * @param {Array} [aUtilIndFilter] Collection of minimum order/operation indirectly affected by work center change action filters\r\n\t\t * @param {Array} [aOrderOpFilter] Collection of changed operations filters\r\n\t\t * @param {Boolean} [bShowUtilInd] If utilization indicator setting is ON/ OFF\r\n\t\t * @returns {Array} [aFilter] Adjusted filter\r\n\t\t */\r\n\t\t_adjustFiltersForOpQuery: function (iNotAStatusChange, aOrderFilter, aUtilIndFilter, aOrderOpFilter, bShowUtilInd) {\r\n\t\t\tvar aFilter = [];\r\n\t\t\tif (iNotAStatusChange === 1) {\r\n\t\t\t\tif (aUtilIndFilter && aUtilIndFilter.length) {\r\n\t\t\t\t\taFilter.push(new Filter(aOrderFilter, false));\r\n\t\t\t\t\taFilter[0].aFilters.push(new Filter(aUtilIndFilter, false));\r\n\t\t\t\t} else {\r\n\t\t\t\t\taFilter.push(new Filter(aOrderFilter, false));\r\n\t\t\t\t}\r\n\t\t\t\t//For mock request to distinguish between Order & Operation\r\n\t\t\t\tif (Utils.isMockRun()) {\r\n\t\t\t\t\taFilter.push(new Filter(\"OrderOperationRowLevel\", FilterOperator.EQ, 1));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\taFilter.push(new Filter(aOrderOpFilter, false));\r\n\t\t\t}\r\n\t\t\tif (bShowUtilInd) {\r\n\t\t\t\tvar oCurrentTimePeriod = this._getCurrentTimePeriod();\r\n\t\t\t\tvar oDateTimeFilter = new Filter({\r\n\t\t\t\t\tfilters: [\r\n\t\t\t\t\t\tnew Filter(\"StartDate\", FilterOperator.EQ, oCurrentTimePeriod.sCalendarStartDate),\r\n\t\t\t\t\t\tnew Filter(\"EndDate\", FilterOperator.EQ, oCurrentTimePeriod.sCalendarEndDate)\r\n\t\t\t\t\t],\r\n\t\t\t\t\tand: true\r\n\t\t\t\t});\r\n\t\t\t\taFilter[0].aFilters.push(new Filter(oDateTimeFilter, false));\r\n\t\t\t}\r\n\t\t\treturn aFilter;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This function will trigger delta read query and returns a promise to caller function for initiating further tasks,\r\n\t\t * such as maintaining busy indicators.\r\n\t\t * @private\r\n\t\t * @param {Object} [oModel] Model to be queried\r\n\t\t * @param {String} [sPath] Path to be read, here it is /C_RSHOrdersAndOperations\r\n\t\t * @param {Array} [aFilter] Array of filters required for call, can be a combination of orders, operations, datetime filter\r\n\t\t * @param {Object} [oUrlParams] The information about expand and select based on the Gantt settings.\r\n\t\t * @returns {Object} A promise which will be resolved once data is received\r\n\t\t */\r\n\t\t_performDeltaReadQuery: function (oModel, sPath, aFilter, oUrlParams) {\r\n\t\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\t\toModel.read(sPath, {\r\n\t\t\t\t\tfilters: aFilter,\r\n\t\t\t\t\turlParameters: oUrlParams,\r\n\t\t\t\t\tsuccess: function (oData) {\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function () {\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Function to update delta refresh query paramters based on Gantt settings.\r\n\t\t * @private\r\n\t\t * @param {Boolean} [bShowImp] Implicit relationship on/ off\r\n\t\t * @param {Boolean} [bShowExp] Explicit relationship on/ off\r\n\t\t * @param {Boolean} [bShowUtilInd] Utilization indicator on/ off\r\n\t\t * @param {String} [sSelectSubString] All the Select fields for orders/ operations \r\n\t\t * @returns {Object} oUrlParams \r\n\t\t */\r\n\t\t_getUrlParametersForDeltaRefresh: function (bShowImp, bShowExp, bShowUtilInd, sSelectSubString) {\r\n\t\t\tvar sExpandString = \"\",\r\n\t\t\t\tsSelectString = sSelectSubString;\r\n\t\t\tvar oUrlParams = {};\r\n\r\n\t\t\tif (bShowImp || bShowExp) {\r\n\t\t\t\tsExpandString = \"to_Relationships\";\r\n\t\t\t\tsSelectString = sSelectString + \",\" + \"to_Relationships\";\r\n\t\t\t}\r\n\t\t\tif (bShowUtilInd) {\r\n\t\t\t\tsExpandString = sExpandString ? sExpandString + \",\" + \"to_UtilIndicator\" : \"to_UtilIndicator\";\r\n\t\t\t\tsSelectString = sSelectString + \",\" + \"to_UtilIndicator\";\r\n\t\t\t}\r\n\t\t\tif (sExpandString) {\r\n\t\t\t\toUrlParams = {\r\n\t\t\t\t\t\"$expand\": sExpandString,\r\n\t\t\t\t\t\"$select\": sSelectString\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\toUrlParams = {\r\n\t\t\t\t\t\"$select\": sSelectString\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn oUrlParams;\r\n\t\t},\r\n\r\n\t\tinitSortOrderAndSortOperationFields: function () {\r\n\t\t\tthis.sSortOrderField = \"MaintenanceOrder\";\r\n\t\t\tthis.sSortOperationField = \"MaintenanceOrderOperation\";\r\n\t\t\tthis.sOrderSortOrder = \"Ascending\";\r\n\t\t\tthis.sOperationSortOrder = null;\r\n\t\t},\r\n\r\n\t\tonPrint: function () {\r\n\t\t\tvar that = this;\r\n\t\t\tvar oGanttPrinting = new GanttPrinting({\r\n\t\t\t\tganttChart: that.getView().byId(\"idOrderGanttChartWithTable\")\r\n\t\t\t});\r\n\t\t\toGanttPrinting.open();\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Opens Context Menu Action Sheet/Popover based on the type of shape under right click\r\n\t\t * @param {Object} [oEvent] Event object triggered by right click on shape in Gantt Chart\r\n\t\t */\r\n\t\tonShapeContextMenu: function (oEvent) {\r\n\t\t\tvar oShape = oEvent.getParameter(\"shape\");\r\n\t\t\tvar oView = this.getView();\r\n\t\t\tif (oShape instanceof Relationship) {\r\n\t\t\t\tvar sPath = oShape.getBindingContext().getPath();\r\n\t\t\t\tvar oData = oShape.getModel().getData(sPath);\r\n\t\t\t\tif (oData.RelationshipIsExplicit === \"X\") {\r\n\t\t\t\t\t//Reletionship color gets changed to red on right mouse click. To avoid this, setting the color of relationship to Informative\r\n\t\t\t\t\toShape.setSelectedStroke(\"@sapUiInformative\");\r\n\t\t\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\t\t\t//Subscribe event to delete relationship\r\n\t\t\t\t\toEventBus.subscribe(Constants.sLibraryChannel, Constants.sRelationshipDeleteInGantt, this.onDeleteRelationship, this);\r\n\t\t\t\t\t//Subscribe event to call handler method to unscubscribe the delete relationship event on context menu close\r\n\t\t\t\t\toEventBus.subscribeOnce(Constants.sLibraryChannel, Constants.sRelationshipDeleteContextMenuClose, this.onDeleteRelationshipContextMenuClose,\r\n\t\t\t\t\t\tthis);\r\n\t\t\t\t\tif (!this.oRelationshipActionSheet) {\r\n\t\t\t\t\t\tthis.oRelationshipActionSheet = new RelationshipActionSheet();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.oRelationshipActionSheet.onOpen(oEvent, oView, oShape);\r\n\t\t\t\t}\r\n\t\t\t} else if (oShape.getMetadata().getName() === \"sap.gantt.simple.BaseGroup\") {\r\n\t\t\t\tthis._oShapeForOpContextMenu = oShape;\r\n\t\t\t\tvar _iPageX = oEvent.getParameter(\"pageX\");\r\n\t\t\t\tvar _iPageY = oEvent.getParameter(\"pageY\");\r\n\t\t\t\tvar sOpShapePath = oShape.getBindingContext().getPath();\r\n\t\t\t\tvar oOperationData = this.getModel().getData(sOpShapePath);\r\n\t\t\t\tif (oOperationData.ProcessingStatusText === \"In Process\") {\r\n\t\t\t\t\tvar oResourceBundle = this.getView().getModel(\"i18n\").getResourceBundle();\r\n\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"InfoMessageOperationInProcessStatus\"), sap.ui.core.MessageType.Information, Constants.sDisplayTypeMessageToast);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!this._oShapeContextMenu) {\r\n\t\t\t\t\t\t// load asynchronous XML fragment\r\n\t\t\t\t\t\tFragment.load({\r\n\t\t\t\t\t\t\tid: oView.getId(),\r\n\t\t\t\t\t\t\tname: \"rsh.eam.ordergantts1.view.OperationActionSheet\",\r\n\t\t\t\t\t\t\ttype: \"XML\",\r\n\t\t\t\t\t\t\tcontroller: this\r\n\t\t\t\t\t\t}).then(function (oContextMenu) {\r\n\t\t\t\t\t\t\tthis._oShapeContextMenu = oContextMenu;\r\n\t\t\t\t\t\t\toView.addDependent(oContextMenu);\r\n\t\t\t\t\t\t\tthis._setupOperationShapeContextMenu(oOperationData.ProcessingStatusText, oOperationData.OpBscStartDateConstraintType);\r\n\t\t\t\t\t\t\tthis.openOperationShapeContextMenu(_iPageX, _iPageY);\r\n\t\t\t\t\t\t}.bind(this));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._setupOperationShapeContextMenu(oOperationData.ProcessingStatusText, oOperationData.OpBscStartDateConstraintType);\r\n\t\t\t\t\t\tthis.openOperationShapeContextMenu(_iPageX, _iPageY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonDeleteRelationship: function (sChannel, sEvent, oShape) {\r\n\t\t\tthis.getView().byId(\"idOrderGanttContainer\").setBusy(true);\r\n\t\t\tvar oModel = this.getView().getModel(\"relationshipModel\");\r\n\t\t\tvar sPath = oShape.getBindingContext().getPath();\r\n\t\t\tvar oRelationshipData = oShape.getModel().getData(sPath);\r\n\r\n\t\t\tvar sFromOperation = oRelationshipData.PredecessorOrderOperation;\r\n\t\t\tvar sToOperation = oRelationshipData.SuccessorOrderOperation;\r\n\t\t\tvar sFromOrderRow = oRelationshipData.PredecessorOrder;\r\n\t\t\tvar sToOrderRow = oRelationshipData.SuccessorOrder;\r\n\r\n\t\t\t// Get the relationship type\r\n\t\t\tvar sRelationshipType = oShape.getProperty(\"type\");\r\n\t\t\t// Get the internal relationship type\r\n\t\t\tvar sInternalRelationshipType = this._getInternalRelationshipType(sRelationshipType);\r\n\t\t\tvar oResourceBundle = sap.ui.getCore().getLibraryResourceBundle(\"sap.rsh.eam.lib.common\");\r\n\t\t\tvar that = this;\r\n\t\t\toModel.remove(\r\n\t\t\t\t\"/C_RSHMaintenanceOrdOpRelshpTP(MaintenanceOrder='\" + this._addPaddingAtStart(12, oRelationshipData.PredecessorOrder) +\r\n\t\t\t\t\"',MaintenanceOrderOperation='\" + sFromOperation +\r\n\t\t\t\t\"',MaintenanceOrderSubOperation='\" + encodeURIComponent(\" \") + \"',MaintOrdOperationIsSuccessor=\" + false +\r\n\t\t\t\t\",RelatedMaintenanceOrder='\" + this._addPaddingAtStart(12, oRelationshipData.SuccessorOrder) +\r\n\t\t\t\t\"',RelatedMaintOrderOperation='\" + sToOperation + \"',OrderOpRelationshipIntType='\" + sInternalRelationshipType + \"')\", {\r\n\t\t\t\t\tsuccess: function (oData) {\r\n\t\t\t\t\t\tvar oTargetParams = {};\r\n\t\t\t\t\t\toTargetParams.itemHashMapContainer = [];\r\n\t\t\t\t\t\toTargetParams.itemHashMapContainer.push(sFromOrderRow);\r\n\t\t\t\t\t\toTargetParams.itemHashMapContainer.push(sToOrderRow);\r\n\t\t\t\t\t\toTargetParams.parameters = {};\r\n\t\t\t\t\t\toTargetParams.parameters.bRefreshOfSourceAppRequired = true;\r\n\t\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"RelationshipDeletionSuccess\"), sap.ui.core.MessageType.Success, Constants.sDisplayTypeMessageToast);\r\n\t\t\t\t\t\t//Trigger delta refresh query\r\n\t\t\t\t\t\tthat.prepareTargetForRefreshGantt(\"\", \"\", oTargetParams);\r\n\t\t\t\t\t},\r\n\t\t\t\t\terror: function (oError) {\r\n\t\t\t\t\t\tUtils.addMessage(oResourceBundle.getText(\"RelationshipDeletionError\"), sap.ui.core.MessageType.Success, Constants.sDisplayTypeMessageToast);\r\n\t\t\t\t\t\tthat.getView().byId(\"idOrderGanttContainer\").setBusy(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Event handler raised after closing relationship popover\r\n\t\t * Unsubrcibe deletion event and set back relationship shape as needed\r\n\t\t * @param {string} [sChannel] Channel in which the event is raised\r\n\t\t * @param {string} [sEvent] Event name of the raised event\r\n\t\t * @param {object} [oShape] Relationshipshape for which the popover was opened\r\n\t\t */\r\n\t\tonDeleteRelationshipContextMenuClose: function (sChannel, sEvent, oShape) {\r\n\t\t\tvar oEventBus = sap.ui.getCore().getEventBus();\r\n\t\t\toEventBus.unsubscribe(Constants.sLibraryChannel, Constants.sRelationshipDeleteInGantt, this.onDeleteRelationship, this);\r\n\t\t\t// Deselect shape and adjust coloring\r\n\t\t\tif (oShape) {\r\n\t\t\t\toShape.setSelectedStroke(null);\r\n\t\t\t\toShape.setSelected(false); //Does not work to set back the color of the stroke, stroke color stays selected; Issue to control team needs to be raised\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\topenOperationShapeContextMenu: function (iPageX, iPageY) {\r\n\t\t\t//Placeholder to display the operatoin actionsheet next to the mouse cursor\r\n\t\t\tvar oPlaceHolder = new sap.m.Label();\r\n\t\t\tvar oPopup = new sap.ui.core.Popup(oPlaceHolder, false, true, false);\r\n\t\t\tvar eDock = sap.ui.core.Popup.Dock;\r\n\t\t\t//Setting the offset to display the operation context menu fragment next to the mouse cursor\r\n\t\t\tvar sOffset = (iPageX + 1) + \" \" + (iPageY - 15);\r\n\t\t\toPopup.open(0, eDock.BeginTop, eDock.LeftTop, null, sOffset);\r\n\t\t\tthis._oShapeContextMenu.openBy(oPlaceHolder);\r\n\t\t},\r\n\r\n\t\t/** \r\n\t\t * Sets up the visibility of context menu buttons for Operation Shapes based on their status and Constraint type\r\n\t\t * @private  \r\n\t\t * @param {String} [sOpProcessingStatusText] Processing Status Text of the Operation shape under right click\r\n\t\t * @param {String} [sOpBscStartDateConstraintType] Start Constraint Type of the Operation shape under right click\r\n\t\t */\r\n\t\t_setupOperationShapeContextMenu: function (sOpProcessingStatusText, sOpBscStartDateConstraintType) {\r\n\t\t\tif (sOpProcessingStatusText === \"Due\") {\r\n\t\t\t\tthis.byId(\"idButtonChangeAction\").setProperty(\"visible\", true);\r\n\t\t\t\tthis.byId(\"idButtonDispatchAction\").setProperty(\"visible\", true);\r\n\t\t\t\tthis.byId(\"idButtonCancDispatchAction\").setProperty(\"visible\", false);\r\n\t\t\t} else if (sOpProcessingStatusText === \"Dispatched\") {\r\n\t\t\t\tthis.byId(\"idButtonChangeAction\").setProperty(\"visible\", true);\r\n\t\t\t\tthis.byId(\"idButtonDispatchAction\").setProperty(\"visible\", false);\r\n\t\t\t\tthis.byId(\"idButtonCancDispatchAction\").setProperty(\"visible\", true);\r\n\t\t\t}\r\n\t\t\tif (sOpBscStartDateConstraintType === \"1\") {\r\n\t\t\t\tthis.byId(\"idButtonRemoveConstraintsAction\").setProperty(\"visible\", true);\r\n\t\t\t} else {\r\n\t\t\t\tthis.byId(\"idButtonRemoveConstraintsAction\").setProperty(\"visible\", false);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonExit: function () {\r\n\t\t\t//Finally write app state\r\n\t\t\tthis._oInnerAppState = {\r\n\t\t\t\tcustomData: this._getCurrentAppState()\r\n\t\t\t};\r\n\t\t\tAppPersContainer.getInstance().getFeatureModel(Constants.sGanttAppState).setProperty(\"/\", this._oInnerAppState);\r\n\t\t\tAppPersContainer.getInstance().saveContainer();\r\n\t\t}\r\n\t});\r\n\r\n});",
		"rsh/eam/ordergantts1/Component-dbg.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\r\n\t\"sap/ui/core/UIComponent\",\r\n\t\"sap/ui/Device\",\r\n\t\"rsh/eam/ordergantts1/model/models\",\r\n\t\"sap/rsh/eam/lib/common/utils/utils\",\r\n\t\"sap/rsh/eam/lib/common/utils/AppState\",\r\n\t\"sap/rsh/eam/lib/common/utils/AppPersContainer\"\r\n], function (UIComponent, Device, models, utils, AppState, AppPersContainer) {\r\n\t\"use strict\";\r\n\r\n\treturn UIComponent.extend(\"rsh.eam.ordergantts1.Component\", {\r\n\r\n\t\tmetadata: {\r\n\t\t\tmanifest: \"json\",\r\n\t\t\tconfig: {\r\n\t\t\t\tfullWidth: true\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\r\n\t\t * In this function, the device models are set and the router is initialized.\r\n\t\t * @public\r\n\t\t * @override\r\n\t\t */\r\n\t\tinit: function () {\r\n\t\t\t// call the base component's init function\r\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\r\n\r\n\t\t\t// set the device model\r\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\r\n\r\n\t\t\t// create the views based on the url/hash\r\n\t\t\tthis.getRouter().initialize();\r\n\r\n\t\t\t//create a AppPersContainer Instance to manage the PersContainer Service\r\n\t\t\tAppPersContainer.createInstance(this);\r\n\r\n\t\t\t// set default Calendar week start date as Monday \r\n\t\t\tutils.setMondayFirstDayOfWeek();\r\n\r\n\t\t\t// Create an AppState instance for the app.\r\n\t\t\tAppState.createInstance(this);\r\n\t\t\tthis.getModel().setDeferredGroups(this.getModel().getDeferredGroups().concat([\"iDBatchOrderFilterRequest\"]));\r\n\t\t\tthis.getModel().setChangeGroups({\r\n\t\t\t\t\"C_RSHOrdersAndOperationsType\": {\r\n\t\t\t\t\tgroupId: \"iDBatchOrderFilterRequest\",\r\n\t\t\t\t\tchangeSetId: \"iDBatchOrderFilterRequest\",\r\n\t\t\t\t\tsingle: false\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.getModel().setRefreshAfterChange(false);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The component is destroyed by UI5 automatically.\r\n\t\t * @public\r\n\t\t * @override\r\n\t\t */\r\n\t\tdestroy: function () {\r\n\t\t\t// call the base component's destroy function\r\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\r\n\t\t * design mode class should be set, which influences the size appearance of some controls.\r\n\t\t * @public\r\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\r\n\t\t */\r\n\t\tgetContentDensityClass: function () {\r\n\t\t\tif (this._sContentDensityClass === undefined) {\r\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\r\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\r\n\r\n\t\t\t\t\t//if compact mode is set, remember condensed mode class name as additional option based on user settings in Gantt\r\n\t\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\r\n\t\t\t\t\t\tthis._sContentDensityAdditionalClass = \"sapUiSizeCondensed\";\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._sContentDensityClass = \"\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\r\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\r\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._sContentDensityClass;\r\n\t\t},\r\n\r\n\t\tgetContentDensityAdditionalClass: function () {\r\n\t\t\tif (this._sContentDensityAdditionalClass === undefined) {\r\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\r\n\t\t\t\t\t//if compact mode is set, add condensed mode in addition based on user settings\r\n\t\t\t\t\tthis._sContentDensityAdditionalClass = \"sapUiSizeCondensed\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._sContentDensityAdditionalClass;\r\n\t\t}\r\n\r\n\t});\r\n});",
		"rsh/eam/ordergantts1/view/SchedulingBoard.view.xml": "<!--\r\n\r\n    Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n\r\n-->\r\n<mvc:View controllerName=\"rsh.eam.ordergantts1.controller.SchedulingBoard\" xmlns:html=\"http://www.w3.org/1999/xhtml\"\r\n\txmlns:app=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\" xmlns=\"sap.gantt.simple\" xmlns:gnt-def=\"sap.gantt.def\"\r\n\txmlns:gnt-pattern=\"sap.gantt.def.pattern\" xmlns:axistime=\"sap.gantt.axistime\" xmlns:config=\"sap.gantt.config\" xmlns:m=\"sap.m\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\" xmlns:f=\"sap.f\" xmlns:table=\"sap.ui.table\" xmlns:layout=\"sap.ui.layout\" xmlns:core=\"sap.ui.core\"\r\n\txmlns:smartFilterBar=\"sap.ui.comp.smartfilterbar\" xmlns:smartVariantManagement=\"sap.ui.comp.smartvariants\"\r\n\txmlns:cal=\"sap.ui.unified.calendar\" xmlns:gnt-cal=\"sap.gantt.def.cal\" id=\"idOrderGanttView\">\r\n\t<f:DynamicPage id=\"GanttPageId\" showFooter=\"{MessagePopoverButtonModel>/visible}\" fitContent=\"true\">\r\n\t\t<!-- DynamicPage Title -->\r\n\t\t<f:title>\r\n\t\t\t<f:DynamicPageTitle id=\"idOrdGanttDynPgTitle\">\r\n\t\t\t\t<f:heading>\r\n\t\t\t\t\t<smartVariantManagement:SmartVariantManagement id=\"idGanttPgVarMgmt\" persistencyKey=\"rsh.eam.ordergantts1.svmpkey\"\r\n\t\t\t\t\t\tshowExecuteOnSelection=\"true\"/>\r\n\t\t\t\t</f:heading>\r\n\t\t\t\t<f:snappedContent>\r\n\t\t\t\t\t<m:Text id=\"statusText\"/>\r\n\t\t\t\t</f:snappedContent>\r\n\t\t\t\t<f:actions>\r\n\t\t\t\t\t<m:ToolbarSpacer id=\"idActionsTBSpacer\"/>\r\n\t\t\t\t\t<m:Button id=\"FilterButton\" text=\"{i18n>OperationsFilterButtonText}\" press=\".openFilter\" type=\"Transparent\"/>\r\n\t\t\t\t</f:actions>\r\n\t\t\t</f:DynamicPageTitle>\r\n\t\t</f:title>\r\n\t\t<!-- Enable Smart filter  -->\r\n\t\t<f:header>\r\n\t\t\t<f:DynamicPageHeader id=\"idOrderGanttDynPgHeader\" pinnable=\"true\">\r\n\t\t\t\t<f:content>\r\n\t\t\t\t\t<smartFilterBar:SmartFilterBar id=\"idOrderGanttSmartFilterBar\" entitySet=\"C_RSHOrdersAndOperations\" initialise=\"onInitSmartFilter\"\r\n\t\t\t\t\t\tsearch=\"onFilter\" assignedFiltersChanged=\"onAssignedFiltersChanged\" showRestoreOnFB=\"true\" useToolbar=\"false\"\r\n\t\t\t\t\t\tafterVariantLoad=\"onAfterVariantLoad\" initialized=\"onSmartFilterInitialized\" persistencyKey=\"rsh.eam.ordergantts1.filterpkey\"\r\n\t\t\t\t\t\tsmartVariant=\"idGanttPgVarMgmt\" app:dateFormatSettings='\\{\"UTC\":true\\}'>\r\n\t\t\t\t\t\t<smartFilterBar:controlConfiguration id=\"_sMartFilterConfig\">\r\n\t\t\t\t\t\t\t<smartFilterBar:ControlConfiguration index=\"0\" key=\"PeriodType\" visibleInAdvancedArea=\"true\"\r\n\t\t\t\t\t\t\t\tconditionType=\"{module: 'sap.rsh.eam.lib.common.utils.DateRangeGantt', ignoreTime: true, operations: { filter: {path: 'category', contains: ['MONTH','WEEK','YEAR','TO','TODAY','DAYS','QUARTER'], exclude:true}}}\"\r\n\t\t\t\t\t\t\t\tmandatory=\"mandatory\"></smartFilterBar:ControlConfiguration>\r\n\t\t\t\t\t\t\t<smartFilterBar:ControlConfiguration id=\"idWorkCenterCC\" index=\"1\" key=\"WorkCenter\" visibleInAdvancedArea=\"true\"/>\r\n\t\t\t\t\t\t\t<smartFilterBar:ControlConfiguration id=\"idMaintPrioCC\" index=\"2\" key=\"MaintPriority\" visibleInAdvancedArea=\"true\"/>\r\n\t\t\t\t\t\t\t<smartFilterBar:ControlConfiguration id=\"idOrderTypCC\" index=\"3\" key=\"OrderType\" visibleInAdvancedArea=\"true\"/>\r\n\t\t\t\t\t\t\t<smartFilterBar:ControlConfiguration id=\"idProcStatusCC\" index=\"4\" key=\"ProcessingStatus\" visibleInAdvancedArea=\"true\"/>\r\n\t\t\t\t\t\t\t<smartFilterBar:ControlConfiguration id=\"idFinalDueDateCC\" index=\"5\" key=\"LatestAcceptableCompletionDate\" visibleInAdvancedArea=\"false\"\r\n\t\t\t\t\t\t\t\tconditionType=\"sap.ui.comp.config.condition.DateRangeType\"/>\r\n\t\t\t\t\t\t</smartFilterBar:controlConfiguration>\r\n\t\t\t\t\t</smartFilterBar:SmartFilterBar>\r\n\t\t\t\t</f:content>\r\n\t\t\t</f:DynamicPageHeader>\r\n\t\t</f:header>\r\n\t\t<f:content>\r\n\t\t\t<!-- Set Gantt Chart Container -->\r\n\t\t\t<GanttChartContainer id=\"idOrderGanttContainer\" enableTimeScrollSync=\"true\" customSettingChange=\"onCustomSettingChange\">\r\n\t\t\t\t<toolbar>\r\n\t\t\t\t\t<ContainerToolbar id=\"idGanttContainerToolbar\" design=\"Auto\" showLegendButton=\"true\" alignCustomContentToRight=\"false\"\r\n\t\t\t\t\t\tshowSettingButton=\"false\">\r\n\t\t\t\t\t\t<!-- settingItems=\"{path:'settingsModel', factory: '.createContent'}\" -->\r\n\t\t\t\t\t\t<!-- settingItems=\"{path:'settingsModel>/settings', factory:'.createContent'}\" -->\r\n\t\t\t\t\t\t<!--<m:Toolbar width=\"100%\">-->\r\n\t\t\t\t\t\t<m:Title text=\"{parts: ['i18n>maintenanceOrdersItems', 'UIModel>/rowCount'],formatter: 'jQuery.sap.formatMessage'}\"/>\r\n\t\t\t\t\t\t<!-- <m:Button id=\"idButtonPrint\" text=\"{i18n>Print}\" press=\"onPrint\" type=\"Transparent\"/> -->\r\n\t\t\t\t\t\t<m:ToolbarSpacer/>\r\n\t\t\t\t\t\t<!-- comes in UI5 1.66, which can solve the issue of overflow in toolbar -->\r\n\t\t\t\t\t\t<ContainerToolbarPlaceholder type=\"Spacer\"/>\r\n\t\t\t\t\t\t<m:Button id=\"idScheduleOrder\" text=\"{i18n>ScheduleOrderButtonText}\" press=\"pressScheduleOrderButton\" type=\"Transparent\" enabled=\"false\">\r\n\t\t\t\t\t\t\t<m:layoutData>\r\n\t\t\t\t\t\t\t\t<m:ToolbarLayoutData shrinkable=\"true\"/>\r\n\t\t\t\t\t\t\t</m:layoutData>\r\n\t\t\t\t\t\t</m:Button>\r\n\t\t\t\t\t\t<m:Button id=\"idButtonChange\" text=\"{i18n>ChangeOperationButtonText}\" press=\"pressChangeOperationsButton\" type=\"Transparent\" enabled=\"false\">\r\n\t\t\t\t\t\t\t<m:layoutData>\r\n\t\t\t\t\t\t\t\t<m:ToolbarLayoutData shrinkable=\"true\"/>\r\n\t\t\t\t\t\t\t</m:layoutData>\r\n\t\t\t\t\t\t</m:Button>\r\n\t\t\t\t\t\t<m:Button id=\"idButtonDispatch\" text=\"{i18n>DispatchButtonText}\" press=\"pressDispatchButton\" type=\"Transparent\" enabled=\"false\">\r\n\t\t\t\t\t\t\t<m:layoutData>\r\n\t\t\t\t\t\t\t\t<m:ToolbarLayoutData shrinkable=\"true\"/>\r\n\t\t\t\t\t\t\t</m:layoutData>\r\n\t\t\t\t\t\t</m:Button>\r\n\t\t\t\t\t\t<m:Button id=\"idButtonCancDispatch\" text=\"{i18n>CancelDispatchButtonText}\" press=\"pressCancDispatchButton\" type=\"Transparent\"\r\n\t\t\t\t\t\t\tenabled=\"false\">\r\n\t\t\t\t\t\t\t<m:layoutData>\r\n\t\t\t\t\t\t\t\t<m:ToolbarLayoutData shrinkable=\"true\"/>\r\n\t\t\t\t\t\t\t</m:layoutData>\r\n\t\t\t\t\t\t</m:Button>\r\n\t\t\t\t\t\t<m:Button id=\"idRemoveConstraints\" text=\"{i18n>RemoveConstraintsButtonText}\" press=\"pressRemoveConstraintsButton\" type=\"Transparent\"\r\n\t\t\t\t\t\t\tenabled=\"false\">\r\n\t\t\t\t\t\t\t<m:layoutData>\r\n\t\t\t\t\t\t\t\t<m:ToolbarLayoutData shrinkable=\"true\"/>\r\n\t\t\t\t\t\t\t</m:layoutData>\r\n\t\t\t\t\t\t</m:Button>\r\n\t\t\t\t\t\t<m:Button icon=\"sap-icon://expand\" press=\".expandSelected\" tooltip=\"{i18n>expand}\" type=\"Transparent\">\r\n\t\t\t\t\t\t\t<m:layoutData>\r\n\t\t\t\t\t\t\t\t<m:ToolbarLayoutData shrinkable=\"true\"/>\r\n\t\t\t\t\t\t\t</m:layoutData>\r\n\t\t\t\t\t\t</m:Button>\r\n\t\t\t\t\t\t<m:Button icon=\"sap-icon://collapse\" press=\".collapseSelected\" tooltip=\"{i18n>collapse}\" type=\"Transparent\">\r\n\t\t\t\t\t\t\t<m:layoutData>\r\n\t\t\t\t\t\t\t\t<m:ToolbarLayoutData shrinkable=\"true\"/>\r\n\t\t\t\t\t\t\t</m:layoutData>\r\n\t\t\t\t\t\t</m:Button>\r\n\t\t\t\t\t\t<!--</m:Toolbar>-->\r\n\t\t\t\t\t\t<legendContainer>\r\n\t\t\t\t\t\t\t<LegendContainer height=\"450px\" width=\"250px\">\r\n\t\t\t\t\t\t\t\t<ListLegend title=\"{i18n>legendTitle}\">\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>order}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseChevron shapeId=\"idOrderLegendShape\" fill=\"@sapNeutralColor\" title=\"{i18n>order}\" showTitle=\"false\" headWidth=\"5\" tailWidth=\"5\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>operation}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"idOperationLegendShape\" fill=\"@sapNeutralColor\" title=\"{i18n>operation}\" showTitle=\"false\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>suboperation}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"idSubOpLegendShape\" fill=\"@sapNeutralColor\" title=\"{i18n>suboperation}\" showTitle=\"false\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<!--<ListLegendItem legendName=\"{i18n>onCriticalPath}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"idCriticalPathLegendShape\" fill=\"@sapNegativeColor\" height=\"2\" title=\"{i18n>onCriticalPath}\" showTitle=\"false\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>-->\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>due}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"idDueLegendShape\" fill=\"@sapCriticalColor\" title=\"{i18n>due}\" showTitle=\"false\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>dispatched}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"idDispatchedLegendShape\" fill=\"@sapPositiveColor\" title=\"{i18n>dispatched}\" showTitle=\"false\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>inprocess}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"idInprocessLegendShape\" fill=\"@sapNeutralColor\" title=\"{i18n>inprocess}\" showTitle=\"false\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>finalDueDate}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseDiamond shapeId=\"idFinalDueLegendShape\" stroke=\"@sapNeutralColor\" title=\"{i18n>finalDueDate}\" showTitle=\"false\" strokeWidth=\"3\"\r\n\t\t\t\t\t\t\t\t\t\t\txBias=\"-2.5\" fillOpacity=\"1\" fill=\"@sapUiNeutralBG\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<ListLegendItem legendName=\"{i18n>opConstraints}\">\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"idConstraintsLegendShape\" fill=\"@sapTextColor\" title=\"{i18n>opConstraints}\" showTitle=\"false\" width=\"2\" xBias=\"11\"/>\r\n\t\t\t\t\t\t\t\t\t</ListLegendItem>\r\n\t\t\t\t\t\t\t\t\t<!-- Legend Container does not support Relationship -->\r\n\t\t\t\t\t\t\t\t\t<!--<ListLegendItem legendName=\"Relationship\">-->\r\n\t\t\t\t\t\t\t\t\t<!--\t<Relationship shapeId=\"idRelationshipLegendShape\" predecessor=\"idInprocessLegendShape\"-->\r\n\t\t\t\t\t\t\t\t\t<!--\t\tsuccessor=\"idDispatchedLegendShape\" type=\"sap.gantt.simple.RelationshipType.FinishToStart\" fill=\"@sapNeutralColor\"-->\r\n\t\t\t\t\t\t\t\t\t<!--\t\ttitle=\"Relationship\" showTitle=\"false\" interactive=\"true\" selected=\"true\"/>-->\r\n\t\t\t\t\t\t\t\t\t<!--</ListLegendItem>-->\r\n\t\t\t\t\t\t\t\t</ListLegend>\r\n\t\t\t\t\t\t\t</LegendContainer>\r\n\t\t\t\t\t\t</legendContainer>\r\n\t\t\t\t\t\t<m:Button id=\"idCustomGanttSettingBtn\" icon=\"sap-icon://action-settings\" press=\"onCustomGanttSettingPress\" type=\"Transparent\"/>\r\n\t\t\t\t\t</ContainerToolbar>\r\n\t\t\t\t</toolbar>\r\n\t\t\t\t<!-- GanttChart declaration -->\r\n\t\t\t\t<GanttChartWithTable id=\"idOrderGanttChartWithTable\" ghostAlignment=\"Start\" adhocLineLayer=\"Bottom\" enableAdhocLine=\"false\"\r\n\t\t\t\t\tnowLineInUTC=\"false\" shapeOverRelationship=\"false\" dragOrientation=\"Horizontal\" enableSelectAndDrag=\"false\" shapeSelectionMode=\"Single\"\r\n\t\t\t\t\tshapeConnect=\"createRelationship\" shapeDrop=\"MoveOperationBasedOnDateChange\" showShapeTimeOnDrag=\"false\"\r\n\t\t\t\t\tshapeContextMenu=\"onShapeContextMenu\" visibleHorizonUpdate=\"onVisibleHorizonUpdate\">\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t\t<table:TreeTable id=\"idOrderTreeTable\" visibleRowCountMode=\"Auto\" minAutoRowCount=\"1\" rowActionCount=\"1\" selectionBehavior=\"RowSelector\"\r\n\t\t\t\t\t\t\tselectionMode=\"MultiToggle\" enableColumnReordering=\"false\" rowSelectionChange=\".selectTableRows\" showColumnVisibilityMenu=\"true\"\r\n\t\t\t\t\t\t\tcolumnSelect=\".onColumnSelect\" columnVisibility=\".onColumnVisibilityChanged\" firstVisibleRowChanged=\".onFirstVisibleRowChanged\">\r\n\t\t\t\t\t\t\t<table:rowSettingsTemplate>\r\n\t\t\t\t\t\t\t\t<GanttRowSettings id=\"OrderGntRowStgID\" rowId=\"{OrderOperationRowID}\" shapes4=\"{path:'to_UtilIndicator', templateShareable: 'true'}\"\r\n\t\t\t\t\t\t\t\t\trelationships=\"{path:'to_Relationships', templateShareable: 'true'}\">\r\n\t\t\t\t\t\t\t\t\t<shapes1>\r\n\t\t\t\t\t\t\t\t\t\t<BaseConditionalShape activeShape=\"{= ${OrderOperationRowLevel} > 0 ? 1 : 0 }\">\r\n\t\t\t\t\t\t\t\t\t\t\t<shapes>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<BaseChevron shapeId=\"{OrderOperationRowID}\" countInBirdEye=\"true\" time=\"{path: 'OrderStartDateTime', formatter: '.removeTimeZoneOffset'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tendTime=\"{path: 'OrderEndDateTime', formatter: '.removeTimeZoneOffset'}\" hoverable=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"{parts: ['OrderStartDateTime', 'OrderEndDateTime'], formatter: '.getTitle'}\" showTitle=\"false\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['OrderStartDateTime', 'OrderEndDateTime'], formatter: '.getTitle'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"{path: 'ProcessingStatus', formatter: '.getColor'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"{parts: ['OrderOperationRowLevel', 'UIModel>/condensedModeActive'], formatter: '.getShevronHight'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\theadWidth=\"{path: 'UIModel>/condensedModeActive', formatter: '.getShevronHeadWidth'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttailWidth=\"{path: 'UIModel>/condensedModeActive', formatter: '.getShevronTailWidth'}\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<BaseGroup hoverable=\"true\" shapeId=\"{OrderOperationRowID}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tconnectable=\"{parts: ['UIModel>/showImpRel', 'UIModel>/showExpRel', 'MaintenanceOrderSubOperation', 'ProcessingStatus'], formatter: '.isConnectable'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdraggable=\"{parts: ['MaintenanceOrderSubOperation', 'ProcessingStatus'], formatter: '.isDNDPossible'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tselectable=\"{parts: ['MaintenanceOrderSubOperation', 'ProcessingStatus'], formatter: '.isDNDPossible'}\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<shapes>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<BaseRectangle countInBirdEye=\"true\" hoverable=\"true\" yBias=\"{= ${UIModel>/showUtilizationIndicator} ? 2 : 0}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdraggable=\"{parts: ['MaintenanceOrderSubOperation', 'ProcessingStatus'], formatter: '.isDNDPossible'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectable=\"{parts: ['MaintenanceOrderSubOperation', 'ProcessingStatus'], formatter: '.isDNDPossible'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime=\"{path:'OrderOperationStartDateTime', formatter: '.removeTimeZoneOffset'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tendTime=\"{path: 'OrderOperationEndDateTime', formatter: '.removeTimeZoneOffset'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"{parts: ['OrderOperationStartDateTime', 'OrderOperationEndDateTime'], formatter: '.getTitle'}\" showTitle=\"false\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['OrderOperationStartDateTime', 'OrderOperationEndDateTime'], formatter: '.getTitle'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"{path: 'ProcessingStatus', formatter: '.getColor'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"{parts: ['OrderOperationRowLevel', 'UIModel>/condensedModeActive'], formatter: '.getRectangleHight'}\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<BaseRectangle id=\"idOperatoinStartConstraint\" yBias=\"{= ${UIModel>/showUtilizationIndicator} ? 2 : 0}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisible=\"{= ${UIModel>/showRestrictions} ? true : false}\" fillOpacity=\"{= ${UIModel>/showRestrictions} ? 1 : 0}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttime=\"{parts: ['OrderOpStartConstraintDateTime', 'OpBscStartDateConstraintType'], formatter: '.constraintTimeFormatter'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\theight=\"{= ${UIModel>/condensedModeActive} ? '18' : '26'}\" xBias=\"-1\" width=\"2\" showTitle=\"false\" hoverable=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfill=\"{parts: ['OpBscStartDateConstraintType', 'OrderOpStartConstraintDateTime', 'OrderOperationStartDateTime'], formatter: '.getOpConstraintFill'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttitle=\"{parts: ['OpBscStartDateConstraintType', 'OrderOpStartConstraintDateTime'], formatter: '.getStartConstraintTypeText'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['OpBscStartDateConstraintType', 'OrderOpStartConstraintDateTime'], formatter: '.getStartConstraintTypeText'}\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--<BaseRectangle id=\"idOperatoinEndConstraint\" shapeId=\"{OrderOperationRowID}\" visible=\"{= ${UIModel>/showRestrictions} ? true : false}\"-->\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--\ttime=\"{parts: ['OrderOpEndConstraintDateTime', 'OpBscEndDateConstraintType'], formatter: '.constraintTimeFormatter'}\" width=\"2\"-->\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--\theight=\"{= ${UIModel>/condensedModeActive} ? '18' : '26'}\" xBias=\"-1\" hoverable=\"true\" showTitle=\"false\"-->\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--\tfill=\"{parts: ['OpBscEndDateConstraintType', 'OrderOpEndConstraintDateTime', 'OrderOperationEndDateTime'], formatter: '.getOpConstraintFill'}\"-->\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--\ttitle=\"{parts: ['OpBscEndDateConstraintType', 'OrderOpEndConstraintDateTime'], formatter: '.getFinishConstraintTypeText'}\"-->\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--\ttooltip=\"{parts: ['OpBscEndDateConstraintType', 'OrderOpEndConstraintDateTime'], formatter: '.getFinishConstraintTypeText'}\"/>-->\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</shapes>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</BaseGroup>\r\n\t\t\t\t\t\t\t\t\t\t\t</shapes>\r\n\t\t\t\t\t\t\t\t\t\t</BaseConditionalShape>\r\n\t\t\t\t\t\t\t\t\t</shapes1>\r\n\t\t\t\t\t\t\t\t\t<shapes2>\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle id=\"idBaseRectangleIndicator\" shapeId=\"{OrderOperationRowID}\" fill=\"@sapNegativeColor\" draggable=\"true\" selectable=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\theight=\"{parts: ['OrderOperationRowLevel', 'UIModel>/condensedModeActive'], formatter: '.getCriticalPathHight'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tyBias=\"{parts: ['OrderOperationRowLevel', 'UIModel>/condensedModeActive'], formatter: '.getCPyBiasValue'}\"\r\n\t\t\t\t\t\t\t\t\t\t\ttime=\"{path: 'OrderOperationStartDateTime', formatter: '.removeTimeZoneOffset'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tendTime=\"{path: 'OrderOperationEndDateTime' , formatter: '.removeTimeZoneOffset'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tvisible=\"{parts: ['OperationIsOnCriticalPath', 'UIModel>/showCriticalPath'], formatter: '.getOnCriticalVisibility'}\"/>\r\n\t\t\t\t\t\t\t\t\t</shapes2>\r\n\t\t\t\t\t\t\t\t\t<calendars>\r\n\t\t\t\t\t\t\t\t\t\t<BaseCalendar id=\"idCal\" shapeId=\"{CalendarID}\" calendarName=\"{WorkCenterInternalID}\" visible=\"{= ${OrderOperationRowLevel} === 1}\"/>\r\n\t\t\t\t\t\t\t\t\t</calendars>\r\n\t\t\t\t\t\t\t\t\t<shapes3>\r\n\t\t\t\t\t\t\t\t\t\t<BaseDiamond id=\"idBaseDiamondFinalDue\" shapeId=\"{OrderOperationRowID}\" height=\"{= ${UIModel>/condensedModeActive} ? '15' : '20'}\"\r\n\t\t\t\t\t\t\t\t\t\t\twidth=\"{= ${UIModel>/condensedModeActive} ? '15' : '20'}\" hoverable=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\ttime=\"{path: 'LatestAcceptableCompletionDate', formatter: '.ganttUtils.formatEndTime'}\" showTitle=\"false\"\r\n\t\t\t\t\t\t\t\t\t\t\tvisible=\"{= ${UIModel>/showFinalDueDate} &amp;&amp; ${OrderOperationRowLevel} === 0 }\" stroke=\"@sapNeutralColor\"\r\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth=\"{= ${UIModel>/condensedModeActive} ? 2 : 3}\" fillOpacity=\"1\" fill=\"@sapUiNeutralBG\"\r\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{path: 'LatestAcceptableCompletionDate', formatter: '.getFFDMilestoneTitle'}\"\r\n\t\t\t\t\t\t\t\t\t\t\ttitle=\"{path: 'LatestAcceptableCompletionDate', formatter: '.getFFDMilestoneTitle'}\"/>\r\n\t\t\t\t\t\t\t\t\t</shapes3>\r\n\t\t\t\t\t\t\t\t\t<shapes4>\r\n\t\t\t\t\t\t\t\t\t\t<BaseRectangle shapeId=\"{WorkCenterInternalID}\" countInBirdEye=\"true\" hoverable=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\tvisible=\"{= ${WorkCenterAvailableCapacity} > 0 || ${WorkCenterRequiredCapacity} > 0}\"\r\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['WorkCenterUtilization', 'WorkCenterRequiredCapacity', 'WorkCenterAvailableCapacity'], formatter: '.getTooltipForUtilization'}\"\r\n\t\t\t\t\t\t\t\t\t\t\ttime=\"{path: 'CalendarDate', formatter: '.formatStartTime'}\" endTime=\"{path: 'CalendarDate', formatter: '.ganttUtils.formatEndTime'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tyBias=\"{= ${UIModel>/condensedModeActive} ? -11 : -14}\" height=\"{= ${UIModel>/condensedModeActive} ? '4' : '6'}\" showTitle=\"false\"\r\n\t\t\t\t\t\t\t\t\t\t\tfill=\"{path:'WorkCenterUtilization', formatter: '.getUtilizationColor'}\"/>\r\n\t\t\t\t\t\t\t\t\t</shapes4>\r\n\t\t\t\t\t\t\t\t\t<relationships>\r\n\t\t\t\t\t\t\t\t\t\t<Relationship\r\n\t\t\t\t\t\t\t\t\t\t\tshapeId=\"{parts: ['PredecessorOrderOperationRowID','SuccessorOrderOperationRowID', 'NetworkActivityRelationType'], formatter: '.getShapeId'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tpredecessor=\"{PredecessorOrderOperationRowID}\" successor=\"{SuccessorOrderOperationRowID}\" type=\"{NetworkActivityRelationType}\"\r\n\t\t\t\t\t\t\t\t\t\t\tlShapeForTypeFS=\"false\" lShapeForTypeSF=\"false\"\r\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['NetworkActivityRelationType','PredecessorOrder','PredecessorOrderOperation','SuccessorOrder','SuccessorOrderOperation','RelationshipIsViolated'], formatter:'.getRelationToolTip'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tstroke=\"{parts: ['RelationshipIsExplicit','RelationshipIsViolated'], formatter: '.getStrokeFill'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tenableCurvedEdge=\"{= ${RelationshipIsExplicit} === 'X' ? true : false}\" selectable=\"{= ${RelationshipIsExplicit} === 'X' ? true : false}\"\r\n\t\t\t\t\t\t\t\t\t\t\tstrokeWidth=\"{= ${RelationshipIsExplicit} === 'X' ? 2 : 1}\" strokeDasharray=\"{= ${RelationshipIsExplicit} === 'X' ? '0' : '5 10'}\"\r\n\t\t\t\t\t\t\t\t\t\t\tstrokeOpacity=\"{parts: ['RelationshipIsExplicit', 'UIModel>/showImpRel', 'UIModel>/showExpRel'], formatter: '.getRelVisibility'}\"/>\r\n\t\t\t\t\t\t\t\t\t\t<!--visible=\"{= ${RelationshipIsExplicit} === 'X')? ${UIModel>/showExpRel} : ${UIModel>/showImpRel}}\"/>-->\r\n\t\t\t\t\t\t\t\t\t</relationships>\r\n\t\t\t\t\t\t\t\t</GanttRowSettings>\r\n\t\t\t\t\t\t\t</table:rowSettingsTemplate>\r\n\t\t\t\t\t\t\t<!-- Columns declaration -->\r\n\t\t\t\t\t\t\t<table:columns>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idOrderDescColumn\" label=\"{i18n>treeColumnMaintenanceOrder}\" sortProperty=\"MaintenanceOrder\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{i18n>treeColumnMaintenanceOrder}\" width=\"40%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:HBox id=\"idIconLinkHL\" alignItems=\"Center\">\r\n\t\t\t\t\t\t\t\t\t\t\t<core:Icon id=\"iconid\" busy=\"false\" busyIndicatorDelay=\"1000\" visible=\"true\" alt=\"{MaintenanceOrderDesc}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tsrc=\"{path: 'OrderOperationRowLevel' , formatter: '.formatter.imageOrder'}\" color=\"Neutral\" decorative=\"true\" useIconTooltip=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tnoTabStop=\"false\" class=\"sapUiTinyMarginEnd\" tooltip=\"{path: 'OrderOperationRowLevel' , formatter: '.formatter.imageTooltip'}\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t<m:Link id=\"idOrdOpLink\"\r\n\t\t\t\t\t\t\t\t\t\t\t\ttext=\"{parts:['OrderOperationRowLevel','MaintenanceOrder','MaintenanceOrderDesc','MaintenanceOrderOperation','OperationDescription','MaintenanceOrderSubOperation'], formatter:'.formatOrderOpsLink'}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tpress=\"handleLinkPress\"></m:Link>\r\n\t\t\t\t\t\t\t\t\t\t</m:HBox>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idWCColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MainWorkCenter/@sap:label}\" sortProperty=\"MainWorkCenter\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/MainWorkCenter/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idWCLabel\" text=\"{MainWorkCenter}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPriorityColumn\" label=\"{i18n>treeColumnMainPriority}\" sortProperty=\"MaintPriority\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{i18n>treeColumnMainPriority}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaintPrioLabel\" text=\"{MaintPriorityDesc}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idStatusColumn\" label=\"{i18n>treeColumnProcessingStatus}\" sortProperty=\"ProcessingStatus\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{i18n>treeColumnProcessingStatus}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:ObjectStatus id=\"idProcStatusObjStatus\" text=\"{ProcessingStatusText}\"\r\n\t\t\t\t\t\t\t\t\t\t\tstate=\"{path: 'ProcessingStatus', formatter: '.formatter.statusColor'}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idOrderTypeColumn\" label=\"{/#C_RSHOrdersAndOperationsType/OrderType/@sap:label}\" visible=\"false\" sortProperty=\"OrderType\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/OrderType/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idOrdTypeLabel\" text=\"{OrderType}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaintenanceActivityTypeNameColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintenanceActivityType/@sap:label}\"\r\n\t\t\t\t\t\t\t\t\tvisible=\"false\" sortProperty=\"MaintenanceActivityType\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintenanceActivityType/@sap:quickinfo}\"\r\n\t\t\t\t\t\t\t\t\twidth=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idActTypeLabel\" text=\"{parts: ['MaintenanceActivityType' , 'MaintenanceActivityTypeName'], formatter: '.formatActivityType'}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idBasicStartDateColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintOrdBasicStartDate/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintOrdBasicStartDate\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintOrdBasicStartDate/@sap:quickinfo}\" width=\"20%\"\r\n\t\t\t\t\t\t\t\t\thAlign=\"Right\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOrderBasicStDtText\" text=\"{path: 'MaintOrdBasicStartDate' , type: 'sap.ui.model.type.Date' , formatOptions: {UTC: true}}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idBasicEndDateColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintOrdBasicEndDate/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintOrdBasicEndDate\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintOrdBasicEndDate/@sap:quickinfo}\" width=\"20%\"\r\n\t\t\t\t\t\t\t\t\thAlign=\"Right\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOrdBasicEndDtText\" text=\"{path: 'MaintOrdBasicEndDate' , type: 'sap.ui.model.type.Date' , formatOptions: {UTC: true}}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idControllingAreaColumn\" label=\"{/#C_RSHOrdersAndOperationsType/ControllingArea/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"ControllingArea\" tooltip=\"{/#C_RSHOrdersAndOperationsType/ControllingArea/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idContrAreaLabel\" text=\"{ControllingArea}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idFunctionalLocationColumn\" visible=\"true\" sortProperty=\"FunctionalLocationName\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/FunctionalLocationName/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{i18n>Functional Location}\"/>\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Link id=\"idFuncLocText\" text=\"{parts: ['FunctionalLocation','FunctionalLocationName']}\" press=\"handleFuncLocLinkPress\"\r\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['FunctionalLocation','FunctionalLocationName']}\"\r\n\t\t\t\t\t\t\t\t\t\t\tvisible=\"{= ${FunctionalLocation} || ${FunctionalLocationName} ? true : false}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idEquipmentNameColumn\" visible=\"false\" sortProperty=\"EquipmentName\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/EquipmentName/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{i18n>Equipment}\"/>\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Link id=\"idEquipText\" text=\"{parts: ['Equipment','EquipmentName']}\" press=\"handleEquipmentLinkPress\"\r\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['Equipment','EquipmentName']}\" visible=\"{= ${Equipment} || ${EquipmentName} ? true : false}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idLocationColumn\" label=\"{/#C_RSHOrdersAndOperationsType/AssetLocation/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"AssetLocation\" tooltip=\"{/#C_RSHOrdersAndOperationsType/AssetLocation/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idAssetLocLabel\" text=\"{AssetLocation}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaintenancePlannerColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintenancePlannerGroup/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintenancePlannerGroup\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintenancePlannerGroup/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaintPlannerGrpLabel\" text=\"{MaintenancePlannerGroup}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaintenancePlanColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintenancePlan/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintenancePlan\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintenancePlan/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaintPlanLabel\" text=\"{MaintenancePlan}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaintenancePlantColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintenancePlant/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintenancePlant\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintenancePlant/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaintPlantLabel\" text=\"{MaintenancePlant}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaterialStatusColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaterialStatus/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaterialStatusText\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaterialStatus/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:ObjectStatus id=\"idMatStatusObjStatus\" text=\"{MaterialStatusText}\"\r\n\t\t\t\t\t\t\t\t\t\t\tstate=\"{path: 'MaterialStatus', formatter: '.formatter.materialStatusColor'}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idRespCostCenterColumn\" label=\"{/#C_RSHOrdersAndOperationsType/ResponsibleCostCenter/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"ResponsibleCostCenter\" tooltip=\"{/#C_RSHOrdersAndOperationsType/ResponsibleCostCenter/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idRespCCLabel\" text=\"{ResponsibleCostCenter}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaintRevisionColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintenanceRevision/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintenanceRevision\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintenanceRevision/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaintRevLabel\" text=\"{MaintenanceRevision}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idRoomColumn\" label=\"{/#C_RSHOrdersAndOperationsType/AssetRoom/@sap:label}\" visible=\"false\" sortProperty=\"AssetRoom\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/AssetRoom/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idAssetRoomLabel\" text=\"{AssetRoom}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaintenanceNotification\" label=\"{/#C_RSHOrdersAndOperationsType/MaintenanceNotification/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintenanceNotification\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintenanceNotification/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaintNotifLabel\" text=\"{MaintenanceNotification}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idNetworkColumn\" label=\"{/#C_RSHOrdersAndOperationsType/SuperiorProjectNetwork/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"SuperiorProjectNetwork\" tooltip=\"{/#C_RSHOrdersAndOperationsType/SuperiorProjectNetwork/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idSupProjNwLabel\" text=\"{SuperiorProjectNetwork}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idSystemCondColumn\" visible=\"false\" sortProperty=\"OrderSystemConditionText\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/OrderSystemCondition/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{i18n>treeColumnSystemCondition}\"/>\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idOpSysCondLabel\" text=\"{OrderSystemConditionText}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPlantSecColumn\" label=\"{/#C_RSHOrdersAndOperationsType/PlantSection/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"PlantSection\" tooltip=\"{/#C_RSHOrdersAndOperationsType/PlantSection/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idPlantSectionLabel\" text=\"{PlantSection}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPersonResponsibleColumn\" label=\"{/#C_RSHOrdersAndOperationsType/OperationPersonResponsible/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"OperationPersonResponsible\" tooltip=\"{/#C_RSHOrdersAndOperationsType/OperationPersonResponsible/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<!--<m:Label text=\"{parts:['OrderOperationRowLevel', 'OperationPersonResponsible'], formatter: '.formatter.removeLeadingZeros'}\"/>-->\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idOpPersRespLabel\"\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"{= RegExp('[1-9]').test(${OperationPersonResponsible}) ? ${ parts:['OrderOperationRowLevel', 'OperationPersonResponsible'], formatter: '.formatter.removeLeadingZeros'} : ''}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idInfoIconColumn\" label=\"{/#C_RSHOrdersAndOperationsType/HasError/@sap:label}\" visible=\"false\" hAlign=\"Center\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"HasError\" tooltip=\"{/#C_RSHOrdersAndOperationsType/HasError/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<layout:HorizontalLayout id=\"idIconHL\">\r\n\t\t\t\t\t\t\t\t\t\t\t<core:Icon id=\"idHasErrorIcon\" src=\"{= ${HasError} ? 'sap-icon://message-information' : null}\"\r\n\t\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/HasError/@sap:quickinfo}\"/>\r\n\t\t\t\t\t\t\t\t\t\t</layout:HorizontalLayout>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idNormalDurationColumn\" label=\"{/#C_RSHOrdersAndOperationsType/OperationDuration/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"OperationDuration\" tooltip=\"{/#C_RSHOrdersAndOperationsType/OperationDuration/@sap:quickinfo}\" width=\"20%\" hAlign=\"End\">\r\n\t\t\t\t\t\t\t\t\t<table:template hAlign=\"End\">\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOpDurationText\" text=\"{parts: ['OperationDuration' , 'OperationDurationUnit'], formatter: '.formatWork'}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idworkColumn\" label=\"{/#C_RSHOrdersAndOperationsType/OperationPlannedWork/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"OperationPlannedWork\" tooltip=\"{/#C_RSHOrdersAndOperationsType/OperationPlannedWork/@sap:quickinfo}\" width=\"20%\" hAlign=\"End\">\r\n\t\t\t\t\t\t\t\t\t<table:template hAlign=\"End\">\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOpPlanWrkText\" text=\"{parts: ['OperationPlannedWork' , 'OperationPlannedWorkUnit'], formatter: '.formatWork'}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPlannedStartDateColumn\" label=\"{/#C_RSHOrdersAndOperationsType/PlannedStartDate/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"PlannedStartDate\" tooltip=\"{/#C_RSHOrdersAndOperationsType/PlannedStartDate/@sap:quickinfo}\" width=\"20%\" hAlign=\"Right\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idPlanStDtText\" text=\"{path: 'PlannedStartDate' , type: 'sap.ui.model.type.Date' , formatOptions: {UTC: true}}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPlannedEndDateColumn\" label=\"{/#C_RSHOrdersAndOperationsType/PlannedEndDate/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"PlannedEndDate\" tooltip=\"{/#C_RSHOrdersAndOperationsType/PlannedEndDate/@sap:quickinfo}\" width=\"20%\" hAlign=\"Right\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idPlnEndDtText\" text=\"{path: 'PlannedEndDate' , type: 'sap.ui.model.type.Date' , formatOptions: {UTC: true}}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPlannedStartTimeColumn\" label=\"{/#C_RSHOrdersAndOperationsType/PlannedStartTime/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"PlannedStartTime\" tooltip=\"{/#C_RSHOrdersAndOperationsType/PlannedStartTime/@sap:quickinfo}\" width=\"20%\" hAlign=\"Right\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idPlnStTmText\" text=\"{path: 'PlannedStartTime' ,formatter: '.formatter.formatTime'}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPlannedEndTimeColumn\" label=\"{/#C_RSHOrdersAndOperationsType/PlannedEndTime/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"PlannedEndTime\" tooltip=\"{/#C_RSHOrdersAndOperationsType/PlannedEndTime/@sap:quickinfo}\" width=\"20%\" hAlign=\"Right\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idPlnEndTmText\" text=\"{path: 'PlannedEndTime' ,formatter: '.formatter.formatTime'}\"\r\n\t\t\t\t\t\t\t\t\t\t\twrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idFinalDueDateColumn\" label=\"{/#C_RSHOrdersAndOperationsType/LatestAcceptableCompletionDate/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"LatestAcceptableCompletionDate\" tooltip=\"{/#C_RSHOrdersAndOperationsType/LatestAcceptableCompletionDate/@sap:quickinfo}\"\r\n\t\t\t\t\t\t\t\t\twidth=\"20%\" hAlign=\"Right\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idFinalDueDateText\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"\r\n\t\t\t\t\t\t\t\t\t\t\ttext=\"{path: 'LatestAcceptableCompletionDate' , type: 'sap.ui.model.type.Date' , formatOptions: {UTC: true}}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idExecutionStageColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintOpExecutionStageName/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MaintOpExecutionStageName\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintOpExecutionStageName/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idExecutionStageText\" text=\"{MaintOpExecutionStageName}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idExecutionStageDescColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MaintOpExecStageShortText/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/MaintOpExecStageShortText/@sap:quickinfo}\" width=\"20%\" sortProperty=\"MaintOpExecStageShortText\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idExecutionStageDescText\" text=\"{MaintOpExecStageShortText}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"MainWorkCenterPlantColumn\" label=\"{/#C_RSHOrdersAndOperationsType/MainWorkCenterPlant/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"MainWorkCenterPlant\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MainWorkCenterPlant/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMainWorkCenterPlantLabel\" text=\"{MainWorkCenterPlant}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<!--<table:Column id=\"idOnCriticalPathColumn\" label=\"{/#C_RSHOrdersAndOperationsType/OperationIsOnCriticalPath/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"OperationOnCriticalPathText\" tooltip=\"{/#C_RSHOrdersAndOperationsType/OperationIsOnCriticalPath/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOnCriticalPathText\" text=\"{OperationOnCriticalPathText}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>-->\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idProcessPhase\" sortProperty=\"MaintOrdProcessPhaseCode\" tooltip=\"{i18n>treeColumnProcessPhaseTooltip}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\twidth=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{i18n>treeColumnProcessPhase}\"/>\r\n\t\t\t\t\t\t\t\t\t<table:template >\r\n\t\t\t\t\t\t\t\t\t\t<layout:VerticalLayout id=\"idProcessPhaseVerticalLayout\">\r\n\t\t\t\t\t\t\t\t\t\t\t<m:ObjectStatus id=\"idMaintOrderProcessPhase\" text=\"{MaintOrdProcessPhaseDesc}\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t<m:ObjectStatus id=\"idMaintOrderOperationProcessPhase\" text=\"{MaintOrdOpProcessPhaseDesc}\"/>\r\n\t\t\t\t\t\t\t\t\t\t</layout:VerticalLayout>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idProcessSubPhase\" sortProperty=\"MaintOrdProcessSubPhaseCode\" tooltip=\"{i18n>treeColumnProcessSubPhaseTooltip}\"\r\n\t\t\t\t\t\t\t\t\tvisible=\"false\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{i18n>treeColumnProcessSubPhase}\"/>\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<layout:VerticalLayout id=\"idProcessSubPhaseVerticalLayout\">\r\n\t\t\t\t\t\t\t\t\t\t\t<m:ObjectStatus id=\"idMaintOrderProcessSubPhase\" text=\"{MaintOrdProcessSubPhaseDesc}\"/>\r\n\t\t\t\t\t\t\t\t\t\t\t<m:ObjectStatus id=\"idMaintOrderOperationProcessSubPhase\" text=\"{MaintOrdOpProcessSubPhaseDesc}\"/>\r\n\t\t\t\t\t\t\t\t\t\t</layout:VerticalLayout>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<!-- Operations related columns-->\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idWorkCenterInternalID\" label=\"{/#C_RSHOrdersAndOperationsType/WorkCenterInternalID/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"WorkCenterInternalID\" tooltip=\"{/#C_RSHOrdersAndOperationsType/WorkCenterInternalID/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idWorkCenterInternalIDText\" text=\"{WorkCenterInternalID}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idWorkCenterTypeCode\" label=\"{/#C_RSHOrdersAndOperationsType/WorkCenterTypeCode/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"WorkCenterTypeCode\" tooltip=\"{/#C_RSHOrdersAndOperationsType/WorkCenterTypeCode/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idWorkCenterTypeCodeText\" text=\"{WorkCenterTypeCode}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idPlant\" label=\"{/#C_RSHOrdersAndOperationsType/Plant/@sap:label}\" visible=\"false\" sortProperty=\"Plant\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/Plant/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idPlantText\" text=\"{Plant}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idOperationControlKey\" label=\"{/#C_RSHOrdersAndOperationsType/OperationControlKey/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"OperationControlKey\" tooltip=\"{/#C_RSHOrdersAndOperationsType/OperationControlKey/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOperationControlKeyText\" text=\"{OperationControlKey}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idNumberOfCapacities\" label=\"{/#C_RSHOrdersAndOperationsType/NumberOfCapacities/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"NumberOfCapacities\" tooltip=\"{/#C_RSHOrdersAndOperationsType/NumberOfCapacities/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idNumberOfCapacitiesText\" text=\"{NumberOfCapacities}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idOperationHasLongText\" label=\"{/#C_RSHOrdersAndOperationsType/OperationHasLongText/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"OperationHasLongText\" tooltip=\"{/#C_RSHOrdersAndOperationsType/OperationHasLongText/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOperationHasLongTextText\" text=\"{OperationHasLongText}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idOperationPersonRespName\" label=\"{/#C_RSHOrdersAndOperationsType/OperationPersonRespName/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"OperationPersonRespName\" tooltip=\"{/#C_RSHOrdersAndOperationsType/OperationPersonRespName/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idOperationPersonRespNameText\" text=\"{OperationPersonRespName}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaintenancePhaseControlText\" label=\"{/#C_RSHOrdersAndOperationsType/MaintenancePhaseControlText/@sap:label}\"\r\n\t\t\t\t\t\t\t\t\tvisible=\"false\" tooltip=\"{/#C_RSHOrdersAndOperationsType/MaintenancePhaseControlText/@sap:label}\" sortProperty=\"MaintenancePhaseControlText\"\r\n\t\t\t\t\t\t\t\t\tshowSortMenuEntry=\"false\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaintenancePhaseControlLabel\" text=\"{MaintenancePhaseControlText}\" tooltip=\"{MaintenancePhaseControlText}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idTechnicalObjectColumn\" visible=\"false\" sortProperty=\"TechnicalObjectDescription\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/TechnicalObjectDescription/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{i18n>treeColumnTechnicalObject}\"/>\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Link id=\"idTechObjText\" text=\"{parts: ['TechnicalObjectLabel','TechnicalObjectDescription']}\" press=\"handleTechnicalObjectLinkPress\"\r\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{parts: ['TechnicalObjectLabel','TechnicalObjectDescription']}\"\r\n\t\t\t\t\t\t\t\t\t\t\tvisible=\"{= ${TechnicalObjectLabel} || ${TechnicalObjectDescription} ? true : false}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idTechnicalObjectTypeColumn\" visible=\"false\" sortProperty=\"TechObjIsEquipOrFuncnlLocDesc\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/TechObjIsEquipOrFuncnlLoc/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<m:Text text=\"{i18n>treeColumnTechnicalObjectType}\"/>\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idTechnObjTypeColumn\" text=\"{TechObjIsEquipOrFuncnlLocDesc}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idSchedulingTypeName\" label=\"{/#C_RSHOrdersAndOperationsType/SchedulingType/@sap:label}\" visible=\"false\"\r\n\t\t\t\t\t\t\t\t\tsortProperty=\"SchedulingTypeName\" tooltip=\"{/#C_RSHOrdersAndOperationsType/SchedulingTypeName/@sap:label}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Text id=\"idSchedulingType\" text=\"{SchedulingTypeName}\" wrapping=\"{= ${UIModel>/condensedModeActive} ? false : true }\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idSerialNumberColumn\" label=\"{/#C_RSHOrdersAndOperationsType/SerialNumber/@sap:label}\" visible=\"false\" sortProperty=\"SerialNumber\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/SerialNumber/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idSerialNumberLabel\" text=\"{SerialNumber}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idMaterialColumn\" label=\"{/#C_RSHOrdersAndOperationsType/Material/@sap:label}\" visible=\"false\" sortProperty=\"Material\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/Material/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idMaterialLabel\" text=\"{Material}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idCustomerColumn\" label=\"{/#C_RSHOrdersAndOperationsType/Customer/@sap:label}\" visible=\"false\" sortProperty=\"Customer\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/Customer/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idCustomerLabel\" text=\"{Customer}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t<table:Column id=\"idOpPersRespNameColumn\" label=\"{/#C_RSHOrdersAndOperationsType/OperationPersonRespName/@sap:label}\" visible=\"false\" sortProperty=\"OperationPersonRespName\"\r\n\t\t\t\t\t\t\t\t\ttooltip=\"{/#C_RSHOrdersAndOperationsType/OperationPersonRespName/@sap:quickinfo}\" width=\"20%\">\r\n\t\t\t\t\t\t\t\t\t<table:template>\r\n\t\t\t\t\t\t\t\t\t\t<m:Label id=\"idOpPersRespNameLabel\" text=\"{OperationPersonRespName}\"/>\r\n\t\t\t\t\t\t\t\t\t</table:template>\r\n\t\t\t\t\t\t\t\t</table:Column>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</table:columns>\r\n\t\t\t\t\t\t</table:TreeTable>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t\t<calendarDef>\r\n\t\t\t\t\t\t<gnt-cal:CalendarDefs id=\"idCalDef\">\r\n\t\t\t\t\t\t\t<!--\t<gnt-cal:Calendar key=\"{CalendarID}\" timeIntervals=\"{path:'to_Intervals', templateShareable: 'true'}\"\r\n\t\t\t\t\t\t\t\tbackgroundColor=\"sapUiChartPaletteSemanticNeutralLight3\">\r\n\t\t\t\t\t\t\t\t<gnt-cal:TimeInterval startTime=\"{path: 'MaintAssetBoardShapeStrtDteTme', formatter: '.removeTimeZoneOffset'}\"\r\n\t\t\t\t\t\t\t\t\tendTime=\"{path: 'MaintAssetBoardShapeEndDteTme', formatter: '.removeTimeZoneOffset'}\"/>\r\n\t\t\t\t\t\t\t</gnt-cal:Calendar>-->\r\n\t\t\t\t\t\t</gnt-cal:CalendarDefs>\r\n\t\t\t\t\t</calendarDef>\r\n\t\t\t\t</GanttChartWithTable>\r\n\t\t\t</GanttChartContainer>\r\n\t\t</f:content>\r\n\t\t<f:footer id=\"GanttFooter\" visible=\"{MessagePopoverButtonModel>/visible}\">\r\n\t\t\t<m:Toolbar id=\"GanttFooterToolBar\">\r\n\t\t\t\t<core:InvisibleText id=\"idMessageInvisibleButton\" text=\"{i18n>ViewMessages}\"/>\r\n\t\t\t\t<m:Button id=\"idMainViewMessagePopOver\" icon=\"{MessagePopoverButtonModel>/severityIcon}\" type=\"{MessagePopoverButtonModel>/severityType}\"\r\n\t\t\t\t\ttext=\"{MessagePopoverButtonModel>/severityCount}\" press=\"onMessagePopoverPress\" visible=\"{MessagePopoverButtonModel>/visible}\"\r\n\t\t\t\t\ttooltip=\"{i18n>messagePopoverToolTip}\" ariaLabelledBy=\"idMessageInvisibleButton\"/>\r\n\t\t\t</m:Toolbar>\r\n\t\t</f:footer>\r\n\t</f:DynamicPage>\r\n</mvc:View>",
		"rsh/eam/ordergantts1/controller/App.controller.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"sap/rsh/eam/lib/common/controller/BaseController\",\"sap/ui/model/json/JSONModel\"],function(B,J){\"use strict\";return B.extend(\"rsh.eam.ordergantts1.controller.App\",{onInit:function(){var v,s,o=this.getView().getBusyIndicatorDelay();v=new J({busy:true,delay:0});this.setModel(v,\"appView\");s=function(){v.setProperty(\"/busy\",false);v.setProperty(\"/delay\",o);};this.getOwnerComponent().getModel().metadataLoaded().then(s);this.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());}});});",
		"rsh/eam/ordergantts1/Component-h2-preload.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.predefine('rsh/eam/ordergantts1/Component',[\"sap/ui/core/UIComponent\",\"sap/ui/Device\",\"rsh/eam/ordergantts1/model/models\",\"sap/rsh/eam/lib/common/utils/utils\",\"sap/rsh/eam/lib/common/utils/AppState\",\"sap/rsh/eam/lib/common/utils/AppPersContainer\"],function(U,D,m,u,A,a){\"use strict\";return U.extend(\"rsh.eam.ordergantts1.Component\",{metadata:{manifest:\"json\",config:{fullWidth:true}},init:function(){U.prototype.init.apply(this,arguments);this.setModel(m.createDeviceModel(),\"device\");this.getRouter().initialize();a.createInstance(this);u.setMondayFirstDayOfWeek();A.createInstance(this);this.getModel().setDeferredGroups(this.getModel().getDeferredGroups().concat([\"iDBatchOrderFilterRequest\"]));this.getModel().setChangeGroups({\"C_RSHOrdersAndOperationsType\":{groupId:\"iDBatchOrderFilterRequest\",changeSetId:\"iDBatchOrderFilterRequest\",single:false}});this.getModel().setRefreshAfterChange(false);},destroy:function(){U.prototype.destroy.apply(this,arguments);},getContentDensityClass:function(){if(this._sContentDensityClass===undefined){if(jQuery(document.body).hasClass(\"sapUiSizeCozy\")||jQuery(document.body).hasClass(\"sapUiSizeCompact\")){if(jQuery(document.body).hasClass(\"sapUiSizeCompact\")){this._sContentDensityAdditionalClass=\"sapUiSizeCondensed\";this._sContentDensityClass=\"\";}else{this._sContentDensityClass=\"\";}}else if(!D.support.touch){this._sContentDensityClass=\"sapUiSizeCompact\";}else{this._sContentDensityClass=\"sapUiSizeCozy\";}}return this._sContentDensityClass;},getContentDensityAdditionalClass:function(){if(this._sContentDensityAdditionalClass===undefined){if(jQuery(document.body).hasClass(\"sapUiSizeCompact\")){this._sContentDensityAdditionalClass=\"sapUiSizeCondensed\";}}return this._sContentDensityAdditionalClass;}});});sap.ui.require.preload({\"rsh/eam/ordergantts1/manifest.json\":'{\"_version\":\"1.5.0\",\"sap.app\":{\"id\":\"rsh.eam.ordergantts1\",\"type\":\"application\",\"i18n\":\"i18n/i18n.properties\",\"applicationVersion\":{\"version\":\"9.0.11\"},\"title\":\"{{appTitle}}\",\"description\":\"{{appDescription}}\",\"resources\":\"resources.json\",\"ach\":\"CA-RSH-EAM\",\"sourceTemplate\":{\"id\":\"servicecatalog.connectivityComponentForManifest\",\"version\":\"0.0.0\"},\"dataSources\":{\"RSH_EAM_ORDER_GANTT_SRV\":{\"uri\":\"/sap/opu/odata/sap/RSH_EAM_ORDER_GANTT_SRV/\",\"type\":\"OData\",\"settings\":{\"odataVersion\":\"2.0\",\"localUri\":\"localService/RSH_EAM_ORDER_GANTT_SRV/metadata.xml\",\"annotations\":[\"CATALOGSERVICE\"]}},\"DetailViewAnnotations\":{\"uri\":\"../DetailViewAnnotations.xml\",\"type\":\"ODataAnnotation\",\"settings\":{\"localUri\":\"../DetailViewAnnotations.xml\"}},\"CATALOGSERVICE\":{\"uri\":\"/sap/opu/odata/iwfnd/CATALOGSERVICE;v=0002/Annotations(TechnicalName=\\'RSH_EAM_ORDER_GANTT_ANNO_MDL\\',Version=\\'0001\\')/$value\",\"type\":\"ODataAnnotation\",\"settings\":{\"odataVersion\":\"2.0\",\"localUri\":\"webapp/localService/CATALOGSERVICE/metadata.xml\"}},\"RSH_SB_MAINTENANCE_ORDER\":{\"uri\":\"/sap/opu/odata/sap/RSH_SB_MAINTENANCE_ORDER/\",\"type\":\"OData\",\"settings\":{\"localUri\":\"localService/RSH_SB_MAINTENANCE_ORDER/metadata.xml\"}}}},\"sap.fiori\":{\"registrationIds\":[\"F2603\"],\"archeType\":\"transactional\"},\"sap.ui\":{\"technology\":\"UI5\",\"icons\":{\"icon\":\"\",\"favIcon\":\"\",\"phone\":\"\",\"phone@2\":\"\",\"tablet\":\"\",\"tablet@2\":\"\"},\"deviceTypes\":{\"desktop\":true,\"tablet\":true,\"phone\":true},\"supportedThemes\":[\"sap_hcb\",\"sap_belize\"]},\"sap.ui5\":{\"rootView\":{\"viewName\":\"rsh.eam.ordergantts1.view.App\",\"type\":\"XML\",\"id\":\"app\"},\"dependencies\":{\"minUI5Version\":\"1.30.0\",\"libs\":{\"sap.collaboration\":{\"lazy\":true},\"sap.gantt\":{\"lazy\":false},\"sap.m\":{},\"sap.ui.comp\":{\"lazy\":false},\"sap.ui.core\":{},\"sap.ui.layout\":{\"lazy\":false},\"sap.ui.table\":{\"lazy\":false},\"sap.ushell\":{\"lazy\":false},\"sap.uxap\":{\"lazy\":false},\"sap.rsh.eam.lib.common\":{\"lazy\":false,\"minVersion\":\"1.0.0\"}}},\"contentDensities\":{\"compact\":true,\"cozy\":true},\"models\":{\"i18n\":{\"type\":\"sap.ui.model.resource.ResourceModel\",\"settings\":{\"bundleName\":\"rsh.eam.ordergantts1.i18n.i18n\"}},\"\":{\"dataSource\":\"RSH_EAM_ORDER_GANTT_SRV\",\"preload\":true,\"settings\":{\"defaultBindingMode\":\"TwoWay\",\"defaultCountMode\":\"Inline\",\"metadataUrlParams\":{\"sap-value-list\":\"all\"}}},\"readModel\":{\"dataSource\":\"RSH_EAM_ORDER_GANTT_SRV\",\"preload\":false,\"settings\":{\"defaultBindingMode\":\"TwoWay\",\"defaultCountMode\":\"Inline\",\"metadataUrlParams\":{\"sap-value-list\":\"all\"}}},\"relationshipModel\":{\"type\":\"sap.ui.model.odata.v2.ODataModel\",\"settings\":{\"defaultOperationMode\":\"Server\",\"defaultBindingMode\":\"OneWay\",\"defaultCountMode\":\"Request\"},\"dataSource\":\"RSH_SB_MAINTENANCE_ORDER\",\"preload\":true},\"GanttSettingConfiguration\":{\"type\":\"sap.ui.model.json.JSONModel\",\"settings\":{},\"uri\":\"model/GanttSettingConfiguration.json\",\"preload\":true}},\"routing\":{\"config\":{\"viewPath\":\"rsh.eam.ordergantts1.view\",\"controlId\":\"app\",\"viewType\":\"XML\",\"controlAggregation\":\"pages\",\"bypassed\":{\"target\":[\"notFound\"]},\"async\":true},\"targets\":{\"OrderGantt\":{\"viewType\":\"XML\",\"transition\":\"slide\",\"clearAggregation\":true,\"viewName\":\"OrderGantt\"},\"SchedulingBoard\":{\"viewType\":\"XML\",\"viewName\":\"SchedulingBoard\"}},\"routes\":[{\"name\":\"OrderGantt\",\"pattern\":\"\",\"titleTarget\":\"\",\"greedy\":false,\"target\":[\"SchedulingBoard\"]},{\"pattern\":\":?previousHash:\",\"name\":\"schedulingboard\",\"target\":[\"SchedulingBoard\"]}]}}}'},\"rsh/eam/ordergantts1/Component-h2-preload\");sap.ui.loader.config({depCacheUI5:{\"rsh/eam/ordergantts1/Component.js\":[\"rsh/eam/ordergantts1/model/models.js\",\"sap/rsh/eam/lib/common/utils/AppPersContainer.js\",\"sap/rsh/eam/lib/common/utils/AppState.js\",\"sap/rsh/eam/lib/common/utils/utils.js\",\"sap/ui/Device.js\",\"sap/ui/core/UIComponent.js\"],\"rsh/eam/ordergantts1/controller/App.controller.js\":[\"sap/rsh/eam/lib/common/controller/BaseController.js\",\"sap/ui/model/json/JSONModel.js\"],\"rsh/eam/ordergantts1/controller/SchedulingBoard.controller.js\":[\"sap/gantt/config/SettingItem.js\",\"sap/gantt/def/cal/Calendar.js\",\"sap/gantt/def/cal/CalendarDefs.js\",\"sap/gantt/def/cal/TimeInterval.js\",\"sap/gantt/simple/GanttPrinting.js\",\"sap/gantt/simple/Relationship.js\",\"sap/rsh/eam/lib/common/controller/AssignMyWorkCenters.js\",\"sap/rsh/eam/lib/common/controller/BaseController.js\",\"sap/rsh/eam/lib/common/controller/ChangeOperations.js\",\"sap/rsh/eam/lib/common/controller/EquipmentPopup.js\",\"sap/rsh/eam/lib/common/controller/FunctionalLocationPopup.js\",\"sap/rsh/eam/lib/common/controller/GanttChartSettingsDialog.js\",\"sap/rsh/eam/lib/common/controller/OperationPopup.js\",\"sap/rsh/eam/lib/common/controller/OrderPopup.js\",\"sap/rsh/eam/lib/common/controller/RelationshipActionSheet.js\",\"sap/rsh/eam/lib/common/formatters/formatter.js\",\"sap/rsh/eam/lib/common/utils/AppPersContainer.js\",\"sap/rsh/eam/lib/common/utils/AppState.js\",\"sap/rsh/eam/lib/common/utils/Constants.js\",\"sap/rsh/eam/lib/common/utils/GanttUtils.js\",\"sap/rsh/eam/lib/common/utils/ItemHashMap.js\",\"sap/rsh/eam/lib/common/utils/StatusCommon.js\",\"sap/rsh/eam/lib/common/utils/utils.js\",\"sap/ui/core/Fragment.js\",\"sap/ui/model/Filter.js\",\"sap/ui/model/FilterOperator.js\",\"sap/ui/model/json/JSONModel.js\"],\"rsh/eam/ordergantts1/model/models.js\":[\"sap/ui/Device.js\",\"sap/ui/model/json/JSONModel.js\"],\"rsh/eam/ordergantts1/view/App.view.xml\":[\"rsh/eam/ordergantts1/controller/App.controller.js\",\"sap/m/App.js\",\"sap/ui/core/mvc/XMLView.js\"],\"rsh/eam/ordergantts1/view/OperationActionSheet.fragment.xml\":[\"sap/m/ActionSheet.js\",\"sap/m/Button.js\",\"sap/ui/core/Fragment.js\"],\"rsh/eam/ordergantts1/view/SchedulingBoard.view.xml\":[\"rsh/eam/ordergantts1/controller/SchedulingBoard.controller.js\",\"sap/f/DynamicPage.js\",\"sap/f/DynamicPageHeader.js\",\"sap/f/DynamicPageTitle.js\",\"sap/gantt/def/cal/CalendarDefs.js\",\"sap/gantt/simple/BaseCalendar.js\",\"sap/gantt/simple/BaseChevron.js\",\"sap/gantt/simple/BaseConditionalShape.js\",\"sap/gantt/simple/BaseDiamond.js\",\"sap/gantt/simple/BaseGroup.js\",\"sap/gantt/simple/BaseRectangle.js\",\"sap/gantt/simple/ContainerToolbar.js\",\"sap/gantt/simple/ContainerToolbarPlaceholder.js\",\"sap/gantt/simple/GanttChartContainer.js\",\"sap/gantt/simple/GanttChartWithTable.js\",\"sap/gantt/simple/GanttRowSettings.js\",\"sap/gantt/simple/LegendContainer.js\",\"sap/gantt/simple/ListLegend.js\",\"sap/gantt/simple/ListLegendItem.js\",\"sap/gantt/simple/Relationship.js\",\"sap/m/Button.js\",\"sap/m/HBox.js\",\"sap/m/Label.js\",\"sap/m/Link.js\",\"sap/m/ObjectStatus.js\",\"sap/m/Text.js\",\"sap/m/Title.js\",\"sap/m/Toolbar.js\",\"sap/m/ToolbarLayoutData.js\",\"sap/m/ToolbarSpacer.js\",\"sap/ui/comp/smartfilterbar/ControlConfiguration.js\",\"sap/ui/comp/smartfilterbar/SmartFilterBar.js\",\"sap/ui/comp/smartvariants/SmartVariantManagement.js\",\"sap/ui/core/Icon.js\",\"sap/ui/core/InvisibleText.js\",\"sap/ui/core/mvc/XMLView.js\",\"sap/ui/layout/HorizontalLayout.js\",\"sap/ui/layout/VerticalLayout.js\",\"sap/ui/table/Column.js\",\"sap/ui/table/TreeTable.js\"]}});",
		"rsh/eam/ordergantts1/view/OperationActionSheet.fragment.xml": "<!--\r\n\r\n    Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n\r\n-->\r\n<core:FragmentDefinition id=\"idFragOpContextMenu\" xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n\t<ActionSheet id=\"idOpActionSheet\" placement=\"PreferredBottomOrFlip\">\r\n\t\t<Button id=\"idButtonChangeAction\" text=\"{i18n>ChangeOperationButtonText}\" press=\"pressChangeOperationsButton\" type=\"Transparent\"/>\r\n\t\t<Button id=\"idButtonDispatchAction\" text=\"{i18n>DispatchButtonText}\" press=\"pressDispatchButton\" type=\"Transparent\"/>\r\n\t\t<Button id=\"idButtonCancDispatchAction\" text=\"{i18n>CancelDispatchButtonText}\" press=\"pressCancDispatchButton\" type=\"Transparent\"/>\r\n\t\t<Button id=\"idButtonRemoveConstraintsAction\" text=\"{i18n>RemoveConstraintsButtonText}\" press=\"pressRemoveConstraintsButton\"\r\n\t\t\ttype=\"Transparent\"/>\r\n\t</ActionSheet>\r\n</core:FragmentDefinition>",
		"rsh/eam/ordergantts1/view/App.view.xml": "<!--\r\n\r\n    Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n\r\n-->\r\n<mvc:View id=\"idOrderGanttAppView\"\r\n\txmlns:mvc=\"sap.ui.core.mvc\"\r\n\tcontrollerName=\"rsh.eam.ordergantts1.controller.App\"\r\n\tdisplayBlock=\"true\"\r\n\txmlns=\"sap.m\">\r\n\r\n\t<App id=\"app\"\r\n\t\t busy=\"{appView>/busy}\"\r\n\t\t busyIndicatorDelay=\"{appView>/delay}\"/>\r\n\r\n</mvc:View>",
		"rsh/eam/ordergantts1/model/models-dbg.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\r\n\t\"sap/ui/model/json/JSONModel\",\r\n\t\"sap/ui/Device\"\r\n], function(JSONModel, Device) {\r\n\t\"use strict\";\r\n\r\n\treturn {\r\n\r\n\t\tcreateDeviceModel: function() {\r\n\t\t\tvar oModel = new JSONModel(Device);\r\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\r\n\t\t\treturn oModel;\r\n\t\t}\r\n\r\n\t};\r\n});",
		"rsh/eam/ordergantts1/Component-h2-preload-dbg.js": "//@ui5-bundle rsh/eam/ordergantts1/Component-h2-preload.js\r\n/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.predefine('rsh/eam/ordergantts1/Component',[\"sap/ui/core/UIComponent\",\"sap/ui/Device\",\"rsh/eam/ordergantts1/model/models\",\"sap/rsh/eam/lib/common/utils/utils\",\"sap/rsh/eam/lib/common/utils/AppState\",\"sap/rsh/eam/lib/common/utils/AppPersContainer\"],function(U,D,m,u,A,a){\"use strict\";return U.extend(\"rsh.eam.ordergantts1.Component\",{metadata:{manifest:\"json\",config:{fullWidth:true}},init:function(){U.prototype.init.apply(this,arguments);this.setModel(m.createDeviceModel(),\"device\");this.getRouter().initialize();a.createInstance(this);u.setMondayFirstDayOfWeek();A.createInstance(this);this.getModel().setDeferredGroups(this.getModel().getDeferredGroups().concat([\"iDBatchOrderFilterRequest\"]));this.getModel().setChangeGroups({\"C_RSHOrdersAndOperationsType\":{groupId:\"iDBatchOrderFilterRequest\",changeSetId:\"iDBatchOrderFilterRequest\",single:false}});this.getModel().setRefreshAfterChange(false);},destroy:function(){U.prototype.destroy.apply(this,arguments);},getContentDensityClass:function(){if(this._sContentDensityClass===undefined){if(jQuery(document.body).hasClass(\"sapUiSizeCozy\")||jQuery(document.body).hasClass(\"sapUiSizeCompact\")){if(jQuery(document.body).hasClass(\"sapUiSizeCompact\")){this._sContentDensityAdditionalClass=\"sapUiSizeCondensed\";this._sContentDensityClass=\"\";}else{this._sContentDensityClass=\"\";}}else if(!D.support.touch){this._sContentDensityClass=\"sapUiSizeCompact\";}else{this._sContentDensityClass=\"sapUiSizeCozy\";}}return this._sContentDensityClass;},getContentDensityAdditionalClass:function(){if(this._sContentDensityAdditionalClass===undefined){if(jQuery(document.body).hasClass(\"sapUiSizeCompact\")){this._sContentDensityAdditionalClass=\"sapUiSizeCondensed\";}}return this._sContentDensityAdditionalClass;}});});\r\nsap.ui.require.preload({\r\n\t\"rsh/eam/ordergantts1/manifest.json\":'{\"_version\":\"1.5.0\",\"sap.app\":{\"id\":\"rsh.eam.ordergantts1\",\"type\":\"application\",\"i18n\":\"i18n/i18n.properties\",\"applicationVersion\":{\"version\":\"9.0.11\"},\"title\":\"{{appTitle}}\",\"description\":\"{{appDescription}}\",\"resources\":\"resources.json\",\"ach\":\"CA-RSH-EAM\",\"sourceTemplate\":{\"id\":\"servicecatalog.connectivityComponentForManifest\",\"version\":\"0.0.0\"},\"dataSources\":{\"RSH_EAM_ORDER_GANTT_SRV\":{\"uri\":\"/sap/opu/odata/sap/RSH_EAM_ORDER_GANTT_SRV/\",\"type\":\"OData\",\"settings\":{\"odataVersion\":\"2.0\",\"localUri\":\"localService/RSH_EAM_ORDER_GANTT_SRV/metadata.xml\",\"annotations\":[\"CATALOGSERVICE\"]}},\"DetailViewAnnotations\":{\"uri\":\"../DetailViewAnnotations.xml\",\"type\":\"ODataAnnotation\",\"settings\":{\"localUri\":\"../DetailViewAnnotations.xml\"}},\"CATALOGSERVICE\":{\"uri\":\"/sap/opu/odata/iwfnd/CATALOGSERVICE;v=0002/Annotations(TechnicalName=\\'RSH_EAM_ORDER_GANTT_ANNO_MDL\\',Version=\\'0001\\')/$value\",\"type\":\"ODataAnnotation\",\"settings\":{\"odataVersion\":\"2.0\",\"localUri\":\"webapp/localService/CATALOGSERVICE/metadata.xml\"}},\"RSH_SB_MAINTENANCE_ORDER\":{\"uri\":\"/sap/opu/odata/sap/RSH_SB_MAINTENANCE_ORDER/\",\"type\":\"OData\",\"settings\":{\"localUri\":\"localService/RSH_SB_MAINTENANCE_ORDER/metadata.xml\"}}}},\"sap.fiori\":{\"registrationIds\":[\"F2603\"],\"archeType\":\"transactional\"},\"sap.ui\":{\"technology\":\"UI5\",\"icons\":{\"icon\":\"\",\"favIcon\":\"\",\"phone\":\"\",\"phone@2\":\"\",\"tablet\":\"\",\"tablet@2\":\"\"},\"deviceTypes\":{\"desktop\":true,\"tablet\":true,\"phone\":true},\"supportedThemes\":[\"sap_hcb\",\"sap_belize\"]},\"sap.ui5\":{\"rootView\":{\"viewName\":\"rsh.eam.ordergantts1.view.App\",\"type\":\"XML\",\"id\":\"app\"},\"dependencies\":{\"minUI5Version\":\"1.30.0\",\"libs\":{\"sap.collaboration\":{\"lazy\":true},\"sap.gantt\":{\"lazy\":false},\"sap.m\":{},\"sap.ui.comp\":{\"lazy\":false},\"sap.ui.core\":{},\"sap.ui.layout\":{\"lazy\":false},\"sap.ui.table\":{\"lazy\":false},\"sap.ushell\":{\"lazy\":false},\"sap.uxap\":{\"lazy\":false},\"sap.rsh.eam.lib.common\":{\"lazy\":false,\"minVersion\":\"1.0.0\"}}},\"contentDensities\":{\"compact\":true,\"cozy\":true},\"models\":{\"i18n\":{\"type\":\"sap.ui.model.resource.ResourceModel\",\"settings\":{\"bundleName\":\"rsh.eam.ordergantts1.i18n.i18n\"}},\"\":{\"dataSource\":\"RSH_EAM_ORDER_GANTT_SRV\",\"preload\":true,\"settings\":{\"defaultBindingMode\":\"TwoWay\",\"defaultCountMode\":\"Inline\",\"metadataUrlParams\":{\"sap-value-list\":\"all\"}}},\"readModel\":{\"dataSource\":\"RSH_EAM_ORDER_GANTT_SRV\",\"preload\":false,\"settings\":{\"defaultBindingMode\":\"TwoWay\",\"defaultCountMode\":\"Inline\",\"metadataUrlParams\":{\"sap-value-list\":\"all\"}}},\"relationshipModel\":{\"type\":\"sap.ui.model.odata.v2.ODataModel\",\"settings\":{\"defaultOperationMode\":\"Server\",\"defaultBindingMode\":\"OneWay\",\"defaultCountMode\":\"Request\"},\"dataSource\":\"RSH_SB_MAINTENANCE_ORDER\",\"preload\":true},\"GanttSettingConfiguration\":{\"type\":\"sap.ui.model.json.JSONModel\",\"settings\":{},\"uri\":\"model/GanttSettingConfiguration.json\",\"preload\":true}},\"routing\":{\"config\":{\"viewPath\":\"rsh.eam.ordergantts1.view\",\"controlId\":\"app\",\"viewType\":\"XML\",\"controlAggregation\":\"pages\",\"bypassed\":{\"target\":[\"notFound\"]},\"async\":true},\"targets\":{\"OrderGantt\":{\"viewType\":\"XML\",\"transition\":\"slide\",\"clearAggregation\":true,\"viewName\":\"OrderGantt\"},\"SchedulingBoard\":{\"viewType\":\"XML\",\"viewName\":\"SchedulingBoard\"}},\"routes\":[{\"name\":\"OrderGantt\",\"pattern\":\"\",\"titleTarget\":\"\",\"greedy\":false,\"target\":[\"SchedulingBoard\"]},{\"pattern\":\":?previousHash:\",\"name\":\"schedulingboard\",\"target\":[\"SchedulingBoard\"]}]}}}'\r\n},\"rsh/eam/ordergantts1/Component-h2-preload\"\r\n);\r\nsap.ui.loader.config({depCacheUI5:{\r\n\"rsh/eam/ordergantts1/Component.js\":[\"rsh/eam/ordergantts1/model/models.js\",\"sap/rsh/eam/lib/common/utils/AppPersContainer.js\",\"sap/rsh/eam/lib/common/utils/AppState.js\",\"sap/rsh/eam/lib/common/utils/utils.js\",\"sap/ui/Device.js\",\"sap/ui/core/UIComponent.js\"],\r\n\"rsh/eam/ordergantts1/controller/App.controller.js\":[\"sap/rsh/eam/lib/common/controller/BaseController.js\",\"sap/ui/model/json/JSONModel.js\"],\r\n\"rsh/eam/ordergantts1/controller/SchedulingBoard.controller.js\":[\"sap/gantt/config/SettingItem.js\",\"sap/gantt/def/cal/Calendar.js\",\"sap/gantt/def/cal/CalendarDefs.js\",\"sap/gantt/def/cal/TimeInterval.js\",\"sap/gantt/simple/GanttPrinting.js\",\"sap/gantt/simple/Relationship.js\",\"sap/rsh/eam/lib/common/controller/AssignMyWorkCenters.js\",\"sap/rsh/eam/lib/common/controller/BaseController.js\",\"sap/rsh/eam/lib/common/controller/ChangeOperations.js\",\"sap/rsh/eam/lib/common/controller/EquipmentPopup.js\",\"sap/rsh/eam/lib/common/controller/FunctionalLocationPopup.js\",\"sap/rsh/eam/lib/common/controller/GanttChartSettingsDialog.js\",\"sap/rsh/eam/lib/common/controller/OperationPopup.js\",\"sap/rsh/eam/lib/common/controller/OrderPopup.js\",\"sap/rsh/eam/lib/common/controller/RelationshipActionSheet.js\",\"sap/rsh/eam/lib/common/formatters/formatter.js\",\"sap/rsh/eam/lib/common/utils/AppPersContainer.js\",\"sap/rsh/eam/lib/common/utils/AppState.js\",\"sap/rsh/eam/lib/common/utils/Constants.js\",\"sap/rsh/eam/lib/common/utils/GanttUtils.js\",\"sap/rsh/eam/lib/common/utils/ItemHashMap.js\",\"sap/rsh/eam/lib/common/utils/StatusCommon.js\",\"sap/rsh/eam/lib/common/utils/utils.js\",\"sap/ui/core/Fragment.js\",\"sap/ui/model/Filter.js\",\"sap/ui/model/FilterOperator.js\",\"sap/ui/model/json/JSONModel.js\"],\r\n\"rsh/eam/ordergantts1/model/models.js\":[\"sap/ui/Device.js\",\"sap/ui/model/json/JSONModel.js\"],\r\n\"rsh/eam/ordergantts1/view/App.view.xml\":[\"rsh/eam/ordergantts1/controller/App.controller.js\",\"sap/m/App.js\",\"sap/ui/core/mvc/XMLView.js\"],\r\n\"rsh/eam/ordergantts1/view/OperationActionSheet.fragment.xml\":[\"sap/m/ActionSheet.js\",\"sap/m/Button.js\",\"sap/ui/core/Fragment.js\"],\r\n\"rsh/eam/ordergantts1/view/SchedulingBoard.view.xml\":[\"rsh/eam/ordergantts1/controller/SchedulingBoard.controller.js\",\"sap/f/DynamicPage.js\",\"sap/f/DynamicPageHeader.js\",\"sap/f/DynamicPageTitle.js\",\"sap/gantt/def/cal/CalendarDefs.js\",\"sap/gantt/simple/BaseCalendar.js\",\"sap/gantt/simple/BaseChevron.js\",\"sap/gantt/simple/BaseConditionalShape.js\",\"sap/gantt/simple/BaseDiamond.js\",\"sap/gantt/simple/BaseGroup.js\",\"sap/gantt/simple/BaseRectangle.js\",\"sap/gantt/simple/ContainerToolbar.js\",\"sap/gantt/simple/ContainerToolbarPlaceholder.js\",\"sap/gantt/simple/GanttChartContainer.js\",\"sap/gantt/simple/GanttChartWithTable.js\",\"sap/gantt/simple/GanttRowSettings.js\",\"sap/gantt/simple/LegendContainer.js\",\"sap/gantt/simple/ListLegend.js\",\"sap/gantt/simple/ListLegendItem.js\",\"sap/gantt/simple/Relationship.js\",\"sap/m/Button.js\",\"sap/m/HBox.js\",\"sap/m/Label.js\",\"sap/m/Link.js\",\"sap/m/ObjectStatus.js\",\"sap/m/Text.js\",\"sap/m/Title.js\",\"sap/m/Toolbar.js\",\"sap/m/ToolbarLayoutData.js\",\"sap/m/ToolbarSpacer.js\",\"sap/ui/comp/smartfilterbar/ControlConfiguration.js\",\"sap/ui/comp/smartfilterbar/SmartFilterBar.js\",\"sap/ui/comp/smartvariants/SmartVariantManagement.js\",\"sap/ui/core/Icon.js\",\"sap/ui/core/InvisibleText.js\",\"sap/ui/core/mvc/XMLView.js\",\"sap/ui/layout/HorizontalLayout.js\",\"sap/ui/layout/VerticalLayout.js\",\"sap/ui/table/Column.js\",\"sap/ui/table/TreeTable.js\"]\r\n}});",
		"rsh/eam/ordergantts1/localService/mockserver.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"sap/ui/core/util/MockServer\",\"rsh/eam/ordergantts1/localService/customMockRequests\",\"rsh/eam/ordergantts1/localService/customMockRequestsForMaintenanceOrder\"],function(M,C,c){\"use strict\";var m,o,_=\"rsh/eam/ordergantts1/\",a=_+\"localService/mockdata\",b=_+\"localService/mockdataMaintenanceOrder\";return{init:function(){var u=jQuery.sap.getUriParameters(),j=jQuery.sap.getModulePath(a),s=jQuery.sap.getModulePath(_+\"manifest\",\".json\"),e=\"C_RSHOrdersAndOperations\",E=u.get(\"errorType\"),i=E===\"badRequest\"?400:500,d=jQuery.sap.syncGetJSON(s).data,f=d[\"sap.app\"].dataSources.RSH_EAM_ORDER_GANTT_SRV,g=jQuery.sap.getModulePath(_+f.settings.localUri.replace(\".xml\",\"\"),\".xml\"),h=/.*\\/$/.test(f.uri)?f.uri:f.uri+\"/\";m=new M({rootUri:h});M.config({autoRespond:true,autoRespondAfter:(u.get(\"serverDelay\")||1000)});if(u.get(\"journey\")===\"relationshipJourney\"){a=_+\"localService/mockdataRelationship\";j=jQuery.sap.getModulePath(a);}m.simulate(g,{sMockdataBaseUrl:j,bGenerateMissingMockData:true});var k=C.getRequests(m.getRequests(),m);m.setProperty(\"requests\",k);var r=k,R=function(q,t,v){v.response=function(x){x.respond(q,{\"Content-Type\":\"text/plain;charset=utf-8\"},t);};};if(u.get(\"metadataError\")){r.forEach(function(q){if(q.path.toString().indexOf(\"$metadata\")>-1){R(500,\"metadata Error\",q);}});}if(E){r.forEach(function(q){if(q.path.toString().indexOf(e)>-1){R(i,E,q);}});}if(u.get(\"journey\")===\"relationshipJourney\"){var J=jQuery.sap.getModulePath(b),l=jQuery.sap.getModulePath(_+\"localService/RSH_SB_MAINTENANCE_ORDER/metadata\",\".xml\"),n=\"/sap/opu/odata/sap/RSH_SB_MAINTENANCE_ORDER/\";o=new M({rootUri:n});o.simulate(l,{sMockdataBaseUrl:J,bGenerateMissingMockData:true});var p=c.getRequests(o.getRequests(),o);o.setProperty(\"requests\",p);o.start();}m.start();jQuery.sap.log.info(\"Running the app with mock data\");},getMockServer:function(){return m;}};});",
		"rsh/eam/ordergantts1/localService/customMockRequests.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"jquery.sap.global\"],function(q){\"use strict\";var m={_aRequestedKeys:null,_sEntryFound:null,_aKeys:null,_oEntitySet:null,convertDueToDispatch:function(){return{method:\"POST\",path:new RegExp(\"I_MaintOrderOperationTPSetdispatch(\\\\?(.*))?\"),response:function(x,u){var t=this;var r=m._getAllMockEntriesforEntitySet.call(t,\"C_RSHOrdersAndOperations\");if(!r.success||!r.data.d.results[1]){x.respond(404);}var s=decodeURIComponent(u);s=s.substring(1);var d={};var k=s.split(\"&\");k.forEach(function(c){var f=c.split(\"=\");d[f[0]]=f[1];});var a=d.MaintenanceOrder.replace(\"'\",\"\");a=a.slice(0,-1);var b=d.MaintenanceOrderOperation.replace(\"'\",\"\");b=b.slice(0,-1);var e;if(a===\"4018843\"&&b===\"0011\"){e=r.data.d.results[1];}else if(a===\"4018843\"&&b===\"0020\"){e=r.data.d.results[2];}else if(a===\"4018843\"&&b===\"0050\"){e=r.data.d.results[5];}else if(a===\"4018843\"&&b===\"0060\"){e=r.data.d.results[6];}else if(a===\"4018843\"&&b===\"0070\"){e=r.data.d.results[7];}else if(a===\"4018843\"&&b===\"0080\"){e=r.data.d.results[8];}else{x.respond(404);}var K=\"ID='\"+e.ID+\"'\";var M=m._getSingleEntity.call(this,\"C_RSHOrdersAndOperations\",K);if(M.entry.ProcessingStatus!==40){M.entry.ProcessingStatus=30;M.entry.ProcessingStatusText=\"Dispatched\";}x.respondJSON(200,{},JSON.stringify({d:M}));return true;}};},convertDispatchToDue:function(){return{method:\"POST\",path:new RegExp(\"I_MaintOrderOperationTPUnsetdispatch(\\\\?(.*))?\"),response:function(x,u){var t=this;var r=m._getAllMockEntriesforEntitySet.call(t,\"C_RSHOrdersAndOperations\",x,u);if(!r.success||!r.data.d.results[0]){x.respond(404);}var s=decodeURIComponent(u);s=s.substring(1);var d={};var k=s.split(\"&\");k.forEach(function(c){var f=c.split(\"=\");d[f[0]]=f[1];});var a=d.MaintenanceOrder.replace(\"'\",\"\");a=a.slice(0,-1);var b=d.MaintenanceOrderOperation.replace(\"'\",\"\");b=b.slice(0,-1);var e;if(a===\"4018843\"&&b===\"0011\"){e=r.data.d.results[1];}else if(a===\"4018843\"&&b===\"0020\"){e=r.data.d.results[2];}else if(a===\"4018843\"&&b===\"0060\"){e=r.data.d.results[6];}else if(a===\"4018843\"&&b===\"0090\"){e=r.data.d.results[9];}else{x.respond(404);}var K=\"ID='\"+e.ID+\"'\";var M=m._getSingleEntity.call(this,\"C_RSHOrdersAndOperations\",K);if(M.entry.ProcessingStatus!==40){M.entry.ProcessingStatus=20;M.entry.ProcessingStatusText=\"Due\";}x.respondJSON(200,{},JSON.stringify({d:M}));return true;}};},triggerWorkCenterOperationMassChange:function(){return{method:\"POST\",path:new RegExp(\"I_MaintOrderOperationTPChangeassgmt(\\\\?(.*))?\"),response:function(x,u){var t=this;var r=m._getAllMockEntriesforEntitySet.call(t,\"C_RSHOrdersAndOperations\",x,u);if(!r.success||!r.data.d.results[1]){x.respond(404);}var s=decodeURIComponent(u);s=s.substring(1);var d={};var k=s.split(\"&\");k.forEach(function(c){var f=c.split(\"=\");d[f[0]]=f[1];});var a=d.MaintenanceOrder.replace(\"'\",\"\");a=a.slice(0,-1);var b=d.MaintenanceOrderOperation.replace(\"'\",\"\");b=b.slice(0,-1);var e;if(a===\"4018843\"&&b===\"0011\"){e=r.data.d.results[1];}else if(a===\"4018843\"&&b===\"0020\"){e=r.data.d.results[2];}else{x.respond(404);}var K=\"ID='\"+e.ID+\"'\";var M=m._getSingleEntity.call(this,\"C_RSHOrdersAndOperations\",K);M.entry.MainWorkCenter=\"WorkCenter 2\";x.respondJSON(200,{},JSON.stringify({d:M}));return true;}};},triggerChangeScheduling:function(){return{method:\"POST\",path:new RegExp(\"I_MaintOrderOperationTPChangescheduling(\\\\?(.*))?\"),response:function(x,u){var t=this;var h={};var r=m._getAllMockEntriesforEntitySet.call(t,\"C_RSHOrdersAndOperations\",x,u);if(!r.success||!r.data.d.results[1]){x.respond(404);}if(u.includes(\"Schedulingstartconstraint='%20'\")){var s=decodeURIComponent(u);s=s.substring(1);var d={};var k=s.split(\"&\");k.forEach(function(c){var f=c.split(\"=\");d[f[0]]=f[1];});var a=d.MaintenanceOrder.replace(\"'\",\"\");a=a.slice(0,-1);var b=d.MaintenanceOrderOperation.replace(\"'\",\"\");b=b.slice(0,-1);var e;if(a===\"4018843\"&&b===\"0070\"){e=r.data.d.results[7];}else if(a===\"4018843\"&&b===\"0090\"){e=r.data.d.results[9];}else{x.respond(404);}var K=\"ID='\"+e.ID+\"'\";var M=m._getSingleEntity.call(this,\"C_RSHOrdersAndOperations\",K);if(M.entry.OpBscStartDateConstraintType===\"1\"){M.entry.OpBscStartDateConstraintType=\"\";M.entry.OrderOpStartConstraintDateTime=null;}}else{e=r.data.d.results[1];K=\"ID='\"+e.ID+\"'\";M=m._getSingleEntity.call(this,\"C_RSHOrdersAndOperations\",K);M.entry.PlannedStartDate=m._convertToJSONDate(new Date());if(!this.bMessageReturned){var o={\"code\":\"RSH_LVLING_CONFLICTS/\"+Math.floor(Math.random()*100)+1,\"message\":\"Test message to check message manager\",\"severity\":\"success\",\"target\":\"/#TRANSIENT#\",\"details\":[]};h={\"sap-message\":JSON.stringify(o)};this.bMessageReturned=true;}}x.respondJSON(200,h,JSON.stringify({d:M}));return true;}};},_convertToJSONDate:function(d){var n=new Date(Date.UTC(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours(),d.getMinutes(),d.getSeconds(),d.getMilliseconds()));return\"/Date(\"+n.getTime()+\")/\";},_getAllMockEntriesforEntitySet:function(E){var r={success:false,data:{d:{results:[]}}};try{var d=this._oMockdata[E];var f={results:q.extend(true,[],d)};r.success=true;r.data.d=f;}catch(e){r.success=false;}return r;},_getSingleEntity:function(e,_){this._aRequestedKeys=null;this._sEntryFound=null;this._aKeys=null;this._oEntitySet=null;var t=this;var k=_;k=decodeURIComponent(k);this._oEntitySet=t._mEntitySets[e];this._aKeys=this._oEntitySet.keys;this._aRequestedKeys=k.split(\",\");if(this._aRequestedKeys.length!==this._aKeys.length){t._logAndThrowMockServerCustomError(400,t._oErrorMessages.INVALID_KEY_PREDICATE_QUANTITY);}t._isRequestedKeysValid(this._oEntitySet,this._aRequestedKeys);if(this._aRequestedKeys.length===1&&!this._aRequestedKeys[0].split(\"=\")[1]){this._aRequestedKeys=[this._aKeys[0]+\"=\"+this._aRequestedKeys[0]];}return m._getEntitySetByKeys(t._oMockdata[e],this._aRequestedKeys,this._aKeys,this._oEntitySet,t._trim,t);},_getEntitySetByKeys:function(M,r,k,e,t){var a=this;for(var j=0;j<M.length;j++){for(var i=0;i<r.length;i++){var K=r[i].split(\"=\");var s=t(K[0]);if(q.inArray(s,k)===-1){return true;}var n=t(K[1]);var o=M[j][s];switch(e.keysType[s]){case\"Edm.String\":n=n.replace(/^\\'|\\'$/g,\"\");break;case\"Edm.DateTime\":o=a._getDateTime(o);break;case\"Edm.SByte\":if(!a._isValidNumber(n)){return false;}n=parseFloat(n);break;case\"Edm.Guid\":n=n.replace(/^guid\\'|\\'$/g,\"\");break;case\"Edm.Boolean\":if([\"true\",\"false\"].indexOf(n)===-1){a._logAndThrowMockServerCustomError(400,a._oErrorMessages.INVALID_KEY_TYPE,s);}n=n===\"true\";break;default:n=n;}if(o===n){this._sEntryFound=true;break;}else{this._sEntryFound=false;}}if(this._sEntryFound===true){break;}}if(this._sEntryFound){this._oFoundEntry={index:j,entry:M[j]};return this._oFoundEntry;}else{return false;}},createRelationships:function(){return{method:\"POST\",path:new RegExp(\"(C_RSHOperationRelationships)(\\\\(([^/\\\\?#]+)\\\\)/?(.*)?)?\"),response:function(x,e){var t=this;var r=JSON.parse(x.requestBody);var R=m._createNewRelationshipEntry(r,e,t);x.respondJSON(R.iResult,R.oRespondHeader,R.sResponseText);return true;}};},_createNewRelationshipEntry:function(r,e,c){var R={};var _={};R.__metadata={};_.id=\"C_RSHOperationRelationships(PredecessorOrder='\"+r.MaintenanceOrder+\"',PredecessorOrderOperation='\"+r.MaintenanceOrderOperation+\"',SuccessorOrder='\"+r.RelatedMaintenanceOrder+\"',SuccessorOrderOperation='\"+r.RelatedMaintOrderOperation+\"')\";_.uri=_.id;_.type=\"RSH_EAM_ORDER_GANTT_SRV.C_RSHOperationRelationshipsType\";R.__metadata=_;R.NetworkActivityRelationType=m._getExternalRelationshipType(r.OrderOpRelationshipIntType);var d=m._isRelationshipPresent(c._oMockdata[e],R.__metadata.id,R.NetworkActivityRelationType);var o={};o.oRespondHeader={};o.sResponseText={};var M={};if(d){o.iResult=400;M={\"error\":{\"code\":\"CN/824\",\"message\":\"Relationship from \"+r.MaintenanceOrder+\" \"+r.MaintenanceOrderOperation+\" to \"+r.RelatedMaintenanceOrder+\" \"+r.RelatedMaintOrderOperation+\" already exists\",\"target\":\"\",\"severity\":\"error\",\"transition\":true,\"details\":[]}};o.oRespondHeader={\"Content-Type\":\"application/json;charset=utf-8\"};o.sResponseText=JSON.stringify(M);return o;}M={\"code\":\"IW/080\",\"message\":\"Order saved with number \"+r.MaintenanceOrder,\"target\":\"\",\"severity\":\"success\",\"transition\":true,\"details\":[]};o.iResult=201;o.oRespondHeader={\"Content-Type\":\"application/json;charset=utf-8\",\"sap-message\":JSON.stringify(M)};R.PredecessorOrder=r.MaintenanceOrder;R.PredecessorOrderOperation=r.MaintenanceOrderOperation;R.SuccessorOrder=r.RelatedMaintenanceOrder;R.SuccessorOrderOperation=r.RelatedMaintOrderOperation;R.RelationshipIsExplicit=\"X\";R.PredecessorOrderOperationRowID=\"00000\"+r.MaintenanceOrder+r.MaintenanceOrderOperation;R.SuccessorOrderOperationRowID=\"00000\"+r.RelatedMaintenanceOrder+r.RelatedMaintOrderOperation;c._oMockdata[e]=c._oMockdata[e].concat(R);o.sResponseText=JSON.stringify({d:R});return o;},_isRelationshipPresent:function(M,s,r){for(var i=0;i<M.length;i++){if(M[i].__metadata.id.indexOf(s)!==-1&&M[i].NetworkActivityRelationType===r){return true;}}return false;},_getExternalRelationshipType:function(r){switch(r){case\"NF\":return\"FinishToStart\";case\"AF\":return\"StartToStart\";case\"EF\":return\"FinishToFinish\";case\"SF\":return\"StartToFinish\";default:return\" \";}},getRequests:function(r,t){this.addRequest(r,this.convertDueToDispatch(),t);this.addRequest(r,this.convertDispatchToDue(),t);this.addRequest(r,this.triggerWorkCenterOperationMassChange(),t);this.addRequest(r,this.triggerChangeScheduling(),t);this.addRequest(r,this.createRelationships(),t);return r;},addRequest:function(r,c,t){var R=r.find(function(i){return i.path.toString()===c.path.toString();});if(R){R.response=c.response.bind(t);}else{R=c;R.response=c.response.bind(t);r.push(R);}}};return m;},true);",
		"rsh/eam/ordergantts1/localService/customMockRequestsForMaintenanceOrder-dbg.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"jquery.sap.global\"],\r\n\tfunction (jQuery) {\r\n\t\t\"use strict\";\r\n\r\n\t\tvar mockRequests = {\r\n\r\n\t\t\t_aRequestedKeys: null,\r\n\t\t\t_sEntryFound: null,\r\n\t\t\t_aKeys: null,\r\n\t\t\t_oEntitySet: null,\r\n\r\n\t\t\t/**\r\n\t\t\t * MockServer \r\n\t\t\t * @public\r\n\t\t\t * @returns {Object} MockServer Handler \r\n\t\t\t * */\r\n\t\t\tconnectTwoOperations: function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\tpath: new RegExp(\"(C_RSHMaintenanceOrdOperationTP)(\\\\(([^/\\\\?#]+)\\\\)/?(.*)?)?\"),\r\n\t\t\t\t\tresponse: function (oXhr, sUrlParams) {\r\n\t\t\t\t\t\tvar oRequest = new XMLHttpRequest();\r\n\r\n\t\t\t\t\t\toRequest.onload = (function (oResponse) {\r\n\t\t\t\t\t\t\tvar oMessageContent = {};\r\n\t\t\t\t\t\t\toMessageContent = oResponse.target.responseHeaders[\"sap-message\"];\r\n\t\t\t\t\t\t\tvar oHeader = {\r\n\t\t\t\t\t\t\t\t\"sap-message\": oMessageContent\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\toXhr.respondJSON(oResponse.target.status, oHeader, oResponse.target.responseText);\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//Communicate the change to Gantt service\r\n\t\t\t\t\t\toRequest.open(\"POST\", \"/sap/opu/odata/sap/RSH_EAM_ORDER_GANTT_SRV/\" + \"C_RSHOperationRelationships\", false);\r\n\t\t\t\t\t\toRequest.send(oXhr.requestBody);\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns an updated array of handlers for the mockserver, containing the default auto generated handlers \r\n\t\t\t * and addicional custom developed handlers.\r\n\t\t\t * @param {array} aRequests auto generated handlers of the mockserver\r\n\t\t\t * @param {object} thisArg mockserver instance object\r\n\t\t\t * @returns {array} array of handlers\r\n\t\t\t * @public\r\n\t\t\t * */\r\n\t\t\tgetRequests: function (aRequests, thisArg) {\r\n\t\t\t\tthis.addRequest(aRequests, this.connectTwoOperations(), thisArg);\r\n\t\t\t\treturn aRequests;\r\n\t\t\t},\r\n\r\n\t\t\taddRequest: function (aRequests, customRequest, thisArg) {\r\n\t\t\t\tvar oRequest = aRequests.find(function (oItem) {\r\n\t\t\t\t\treturn oItem.path.toString() === customRequest.path.toString();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (oRequest) { //override existing request\r\n\t\t\t\t\toRequest.response = customRequest.response.bind(thisArg);\r\n\t\t\t\t} else { //add new request\r\n\t\t\t\t\toRequest = customRequest;\r\n\t\t\t\t\toRequest.response = customRequest.response.bind(thisArg);\r\n\t\t\t\t\taRequests.push(oRequest);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn mockRequests;\r\n\t},\r\n\ttrue);",
		"rsh/eam/ordergantts1/localService/customMockRequests-dbg.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"jquery.sap.global\"],\r\n\tfunction (jQuery) {\r\n\t\t\"use strict\";\r\n\r\n\t\tvar mockRequests = {\r\n\r\n\t\t\t_aRequestedKeys: null,\r\n\t\t\t_sEntryFound: null,\r\n\t\t\t_aKeys: null,\r\n\t\t\t_oEntitySet: null,\r\n\r\n\t\t\t/**\r\n\t\t\t * MockServer handler for the I_MaintOrderOperationTPSetdispatch FunctionImport\r\n\t\t\t * @public\r\n\t\t\t * @returns {Object} MockServer Handler \r\n\t\t\t * */\r\n\t\t\tconvertDueToDispatch: function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\tpath: new RegExp(\"I_MaintOrderOperationTPSetdispatch(\\\\?(.*))?\"),\r\n\t\t\t\t\tresponse: function (oXhr, sUrlParams) {\r\n\t\t\t\t\t\tvar that = this;\r\n\r\n\t\t\t\t\t\t//First fetch all existing entries for the C_RSHOrdersAndOperations entity\r\n\t\t\t\t\t\tvar oResponse = mockRequests._getAllMockEntriesforEntitySet.call(that, \"C_RSHOrdersAndOperations\");\r\n\r\n\t\t\t\t\t\tif (!oResponse.success || !oResponse.data.d.results[1]) {\r\n\t\t\t\t\t\t\t// respond negative - no entity found\r\n\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar str = decodeURIComponent(sUrlParams);\r\n\t\t\t\t\t\tstr = str.substring(1);\r\n\t\t\t\t\t\tvar data = {};\r\n\r\n\t\t\t\t\t\tvar keyValArray = str.split(\"&\");\r\n\t\t\t\t\t\tkeyValArray.forEach(function (row) {\r\n\t\t\t\t\t\t\tvar rowArr = row.split(\"=\");\r\n\t\t\t\t\t\t\tdata[rowArr[0]] = rowArr[1];\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tvar maintenanceOrder = data.MaintenanceOrder.replace(\"'\", \"\");\r\n\t\t\t\t\t\tmaintenanceOrder = maintenanceOrder.slice(0, -1);\r\n\t\t\t\t\t\tvar maintenanceOrderOperation = data.MaintenanceOrderOperation.replace(\"'\", \"\");\r\n\t\t\t\t\t\tmaintenanceOrderOperation = maintenanceOrderOperation.slice(0, -1);\r\n\t\t\t\t\t\tvar oEntry;\r\n\t\t\t\t\t\tif (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0011\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[1];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0020\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[2];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0050\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[5];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0060\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[6];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0070\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[7];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0080\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[8];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//take its key\r\n\t\t\t\t\t\tvar sKeys = \"ID='\" + oEntry.ID + \"'\";\r\n\t\t\t\t\t\t//fetch the corresponding entry by key from the mock server\r\n\t\t\t\t\t\tvar oMockEntry = mockRequests._getSingleEntity.call(this, \"C_RSHOrdersAndOperations\", sKeys);\r\n\t\t\t\t\t\t//change its status\r\n\t\t\t\t\t\tif (oMockEntry.entry.ProcessingStatus !== 40) {\r\n\t\t\t\t\t\t\toMockEntry.entry.ProcessingStatus = 30;\r\n\t\t\t\t\t\t\toMockEntry.entry.ProcessingStatusText = \"Dispatched\";\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Respond with one found and modified entry\r\n\t\t\t\t\t\t// !!!!!Important!!!\r\n\t\t\t\t\t\t// Sending the response with modified status is not enough to see the changes in Gantt \r\n\t\t\t\t\t\t// It is expected after Function Import batch call one more refresh batch is called to update the Gantt\r\n\t\t\t\t\t\t// only after second batch the changes will be visible in the Gantt\r\n\t\t\t\t\t\t//such refresh is triggered by the productive set dispatch code \r\n\t\t\t\t\t\toXhr.respondJSON(200, {}, JSON.stringify({\r\n\t\t\t\t\t\t\td: oMockEntry\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * MockServer handler for the I_MaintOrderOperationTPUnsetdispatch FunctionImport\r\n\t\t\t * @public\r\n\t\t\t * @returns {Object} MockServer Handler \r\n\t\t\t * */\r\n\t\t\tconvertDispatchToDue: function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\tpath: new RegExp(\"I_MaintOrderOperationTPUnsetdispatch(\\\\?(.*))?\"),\r\n\t\t\t\t\tresponse: function (oXhr, sUrlParams) {\r\n\r\n\t\t\t\t\t\tvar that = this;\r\n\t\t\t\t\t\t//First fetch all existing entries for the C_RSHOrdersAndOperations entity\r\n\t\t\t\t\t\tvar oResponse = mockRequests._getAllMockEntriesforEntitySet.call(that, \"C_RSHOrdersAndOperations\", oXhr, sUrlParams);\r\n\r\n\t\t\t\t\t\tif (!oResponse.success || !oResponse.data.d.results[0]) {\r\n\t\t\t\t\t\t\t// respond negative - no entity found\r\n\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar str = decodeURIComponent(sUrlParams);\r\n\t\t\t\t\t\tstr = str.substring(1);\r\n\t\t\t\t\t\tvar data = {};\r\n\r\n\t\t\t\t\t\tvar keyValArray = str.split(\"&\");\r\n\t\t\t\t\t\tkeyValArray.forEach(function (row) {\r\n\t\t\t\t\t\t\tvar rowArr = row.split(\"=\");\r\n\t\t\t\t\t\t\tdata[rowArr[0]] = rowArr[1];\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tvar maintenanceOrder = data.MaintenanceOrder.replace(\"'\", \"\");\r\n\t\t\t\t\t\tmaintenanceOrder = maintenanceOrder.slice(0, -1);\r\n\t\t\t\t\t\tvar maintenanceOrderOperation = data.MaintenanceOrderOperation.replace(\"'\", \"\");\r\n\t\t\t\t\t\tmaintenanceOrderOperation = maintenanceOrderOperation.slice(0, -1);\r\n\t\t\t\t\t\tvar oEntry;\r\n\t\t\t\t\t\tif (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0011\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[1];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0020\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[2];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0060\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[6];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0090\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[9];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar sKeys = \"ID='\" + oEntry.ID + \"'\";\r\n\t\t\t\t\t\t//fetch the corresponding entry by key from the mock server\r\n\t\t\t\t\t\tvar oMockEntry = mockRequests._getSingleEntity.call(this, \"C_RSHOrdersAndOperations\", sKeys);\r\n\t\t\t\t\t\t//change its status\r\n\t\t\t\t\t\tif (oMockEntry.entry.ProcessingStatus !== 40) {\r\n\t\t\t\t\t\t\toMockEntry.entry.ProcessingStatus = 20;\r\n\t\t\t\t\t\t\toMockEntry.entry.ProcessingStatusText = \"Due\";\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Respond with one found and modified entry\r\n\t\t\t\t\t\t// !!!!!Important!!!\r\n\t\t\t\t\t\t// Sending the response with modified status is not enough to see the changes in Gantt \r\n\t\t\t\t\t\t// It is expected after Function Import batch call one more refresh batch is called to update the Gantt\r\n\t\t\t\t\t\t// only after second batch the changes will be visible in the Gantt\r\n\t\t\t\t\t\t//such refresh is triggered by the prductive cancel dispatch code \r\n\t\t\t\t\t\toXhr.respondJSON(200, {}, JSON.stringify({\r\n\t\t\t\t\t\t\td: oMockEntry\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * MockServer handler for the I_MaintOrderOperationTPChangeassgmt FunctionImport\r\n\t\t\t * @public\r\n\t\t\t * @returns {Object} MockServer Handler \r\n\t\t\t * */\r\n\t\t\ttriggerWorkCenterOperationMassChange: function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\tpath: new RegExp(\"I_MaintOrderOperationTPChangeassgmt(\\\\?(.*))?\"),\r\n\t\t\t\t\tresponse: function (oXhr, sUrlParams) {\r\n\r\n\t\t\t\t\t\tvar that = this;\r\n\r\n\t\t\t\t\t\tvar oResponse = mockRequests._getAllMockEntriesforEntitySet.call(that, \"C_RSHOrdersAndOperations\", oXhr, sUrlParams);\r\n\r\n\t\t\t\t\t\tif (!oResponse.success || !oResponse.data.d.results[1]) {\r\n\t\t\t\t\t\t\t// respond negative - no entity found\r\n\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//var oEntry = oResponse.data.d.results[1]; \r\n\r\n\t\t\t\t\t\tvar str = decodeURIComponent(sUrlParams);\r\n\t\t\t\t\t\tstr = str.substring(1);\r\n\t\t\t\t\t\tvar data = {};\r\n\r\n\t\t\t\t\t\tvar keyValArray = str.split(\"&\");\r\n\t\t\t\t\t\tkeyValArray.forEach(function (row) {\r\n\t\t\t\t\t\t\tvar rowArr = row.split(\"=\");\r\n\t\t\t\t\t\t\tdata[rowArr[0]] = rowArr[1];\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tvar maintenanceOrder = data.MaintenanceOrder.replace(\"'\", \"\");\r\n\t\t\t\t\t\tmaintenanceOrder = maintenanceOrder.slice(0, -1);\r\n\t\t\t\t\t\tvar maintenanceOrderOperation = data.MaintenanceOrderOperation.replace(\"'\", \"\");\r\n\t\t\t\t\t\tmaintenanceOrderOperation = maintenanceOrderOperation.slice(0, -1);\r\n\t\t\t\t\t\tvar oEntry;\r\n\t\t\t\t\t\tif (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0011\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[1];\r\n\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0020\") {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[2];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar sKeys = \"ID='\" + oEntry.ID + \"'\";\r\n\t\t\t\t\t\tvar oMockEntry = mockRequests._getSingleEntity.call(this, \"C_RSHOrdersAndOperations\", sKeys);\r\n\r\n\t\t\t\t\t\t//\toMockEntry.entry.WorkCenter = \"WorkCenter 2\";\r\n\t\t\t\t\t\toMockEntry.entry.MainWorkCenter = \"WorkCenter 2\";\r\n\r\n\t\t\t\t\t\toXhr.respondJSON(200, {}, JSON.stringify({\r\n\t\t\t\t\t\t\td: oMockEntry\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * MockServer handler for I_MaintOrderOperationTPChangescheduling FunctionImport\r\n\t\t\t * Handles Rescheduling calls during Remove Constraints and Chenge Date\r\n\t\t\t * @public\r\n\t\t\t * @returns {Object} MockServer Handler \r\n\t\t\t * */\r\n\t\t\ttriggerChangeScheduling: function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\tpath: new RegExp(\"I_MaintOrderOperationTPChangescheduling(\\\\?(.*))?\"),\r\n\t\t\t\t\tresponse: function (oXhr, sUrlParams) {\r\n\t\t\t\t\t\tvar that = this;\r\n\t\t\t\t\t\tvar oHeader = {};\r\n\t\t\t\t\t\t//First fetch all existing entries for the C_RSHOrdersAndOperations entity\r\n\t\t\t\t\t\tvar oResponse = mockRequests._getAllMockEntriesforEntitySet.call(that, \"C_RSHOrdersAndOperations\", oXhr, sUrlParams);\r\n\r\n\t\t\t\t\t\tif (!oResponse.success || !oResponse.data.d.results[1]) {\r\n\t\t\t\t\t\t\t// respond negative - no entity found\r\n\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (sUrlParams.includes(\"Schedulingstartconstraint='%20'\")) {\r\n\t\t\t\t\t\t\tvar str = decodeURIComponent(sUrlParams);\r\n\t\t\t\t\t\t\tstr = str.substring(1);\r\n\t\t\t\t\t\t\tvar data = {};\r\n\r\n\t\t\t\t\t\t\tvar keyValArray = str.split(\"&\");\r\n\t\t\t\t\t\t\tkeyValArray.forEach(function (row) {\r\n\t\t\t\t\t\t\t\tvar rowArr = row.split(\"=\");\r\n\t\t\t\t\t\t\t\tdata[rowArr[0]] = rowArr[1];\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tvar maintenanceOrder = data.MaintenanceOrder.replace(\"'\", \"\");\r\n\t\t\t\t\t\t\tmaintenanceOrder = maintenanceOrder.slice(0, -1);\r\n\t\t\t\t\t\t\tvar maintenanceOrderOperation = data.MaintenanceOrderOperation.replace(\"'\", \"\");\r\n\t\t\t\t\t\t\tmaintenanceOrderOperation = maintenanceOrderOperation.slice(0, -1);\r\n\t\t\t\t\t\t\tvar oEntry;\r\n\t\t\t\t\t\t\tif (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0070\") {\r\n\t\t\t\t\t\t\t\toEntry = oResponse.data.d.results[7];\r\n\t\t\t\t\t\t\t} else if (maintenanceOrder === \"4018843\" && maintenanceOrderOperation === \"0090\") {\r\n\t\t\t\t\t\t\t\toEntry = oResponse.data.d.results[9];\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//take its key\r\n\t\t\t\t\t\t\tvar sKeys = \"ID='\" + oEntry.ID + \"'\";\r\n\t\t\t\t\t\t\t//fetch the corresponding entry by key from the mock server\r\n\t\t\t\t\t\t\tvar oMockEntry = mockRequests._getSingleEntity.call(this, \"C_RSHOrdersAndOperations\", sKeys);\r\n\t\t\t\t\t\t\t//change its status\r\n\t\t\t\t\t\t\tif (oMockEntry.entry.OpBscStartDateConstraintType === \"1\") {\r\n\t\t\t\t\t\t\t\toMockEntry.entry.OpBscStartDateConstraintType = \"\";\r\n\t\t\t\t\t\t\t\toMockEntry.entry.OrderOpStartConstraintDateTime = null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\toEntry = oResponse.data.d.results[1];\r\n\t\t\t\t\t\t\tsKeys = \"ID='\" + oEntry.ID + \"'\";\r\n\t\t\t\t\t\t\toMockEntry = mockRequests._getSingleEntity.call(this, \"C_RSHOrdersAndOperations\", sKeys);\r\n\t\t\t\t\t\t\toMockEntry.entry.PlannedStartDate = mockRequests._convertToJSONDate(new Date());\r\n\t\t\t\t\t\t\tif (!this.bMessageReturned) {\r\n\t\t\t\t\t\t\t\tvar oMessageContent = {\r\n\t\t\t\t\t\t\t\t\t\"code\": \"RSH_LVLING_CONFLICTS/\" + Math.floor(Math.random() * 100) + 1, // Random code :)\r\n\t\t\t\t\t\t\t\t\t\"message\": \"Test message to check message manager\",\r\n\t\t\t\t\t\t\t\t\t\"severity\": \"success\",\r\n\t\t\t\t\t\t\t\t\t\"target\": \"/#TRANSIENT#\",\r\n\t\t\t\t\t\t\t\t\t\"details\": []\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\toHeader = {\r\n\t\t\t\t\t\t\t\t\t\"sap-message\": JSON.stringify(oMessageContent)\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\tthis.bMessageReturned = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\toXhr.respondJSON(200, oHeader, JSON.stringify({\r\n\t\t\t\t\t\t\td: oMockEntry\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t_convertToJSONDate: function (dt) {\r\n\t\t\t\t// var dt = new Date(strDate);\r\n\t\t\t\tvar newDate = new Date(Date.UTC(dt.getFullYear(), dt.getMonth(), dt.getDate(), dt.getHours(), dt.getMinutes(), dt.getSeconds(),\r\n\t\t\t\t\tdt.getMilliseconds()));\r\n\t\t\t\treturn \"/Date(\" + newDate.getTime() + \")/\";\r\n\t\t\t},\r\n\r\n\t\t\t/*\t\t\t\t\t\tgetOrderlist: function() {\r\n\t\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\t\tmethod: \"GET\",\r\n\t\t\t\t\t\t\t\t\t\t\tpath: new RegExp(\"(C_RSHOrdersAndOperations)/?(\\\\?(.*))?\"),\r\n\t\t\t\t\t\t\t\t\t\t\t//(C_RSHOrdersAndOperations)\\/?(\\?(.*))?\r\n\t\t\t\t\t\t\t\t\t\t\t//(C_RSHOrdersAndOperations)\\(([^\\/\\?#]+)\\)\\/?(\\?(.*))?\r\n\t\t\t\t\t\t\t\t\t\t\tresponse: function(oXhr, sEntityName, sKeys, sNavProperty, sUrlParams) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar that = this;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t//Replacement for the sjax call due to checkmarx error, gets activeAssignment\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar oResponse = mockRequests._readMockEntry.call(that, sEntityName, oXhr, \"?$skip=0\");\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (!oResponse.success || !oResponse.data.d.results[0]) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// respond negative - no entity found\r\n\t\t\t\t\t\t\t\t\t\t\t\t\toXhr.respond(404);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t// mockRequests.fnGetEntitySetEntry.call(this, \"C_Rshresourcelist\", sKeys);//, \"guid'\" + oDraftEntry.ResourceDemandUUID +\r\n\t\t\t\t\t\t\t\t\t\t\t\t// \"'\");\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar oEntry = oResponse.data.d; //.results;\r\n\t\t\t\t\t\t\t\t\t\t\t\toXhr.respondJSON(200, {}, JSON.stringify({\r\n\t\t\t\t\t\t\t\t\t\t\t\t\td: oEntry\r\n\t\t\t\t\t\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t},*/\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns Mockdata for the given EntitySetName with Query operations aplied\r\n\t\t\t * @private\r\n\t\t\t * @param {string} sEntitySetName EntitySet Name\r\n\t\t\t * @returns {Object} result object\r\n\t\t\t * */\r\n\t\t\t_getAllMockEntriesforEntitySet: function (sEntitySetName) {\r\n\r\n\t\t\t\tvar oResponse = {\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tdata: {\r\n\t\t\t\t\t\td: {\r\n\t\t\t\t\t\t\tresults: []\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tvar aData = this._oMockdata[sEntitySetName];\r\n\r\n\t\t\t\t\tvar oFilteredData = {\r\n\t\t\t\t\t\tresults: jQuery.extend(true, [], aData)\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\toResponse.success = true;\r\n\t\t\t\t\toResponse.data.d = oFilteredData;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\toResponse.success = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn oResponse;\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Gets a single entity matching the given keys\r\n\t\t\t * @private\r\n\t\t\t * @param {string} sEntitySetName entitySet name\r\n\t\t\t * @param {string} _sKeys entity keys\r\n\t\t\t * @returns {Object} entity data matching the given keys\r\n\t\t\t * */\r\n\t\t\t_getSingleEntity: function (sEntitySetName, _sKeys) {\r\n\r\n\t\t\t\tthis._aRequestedKeys = null;\r\n\t\t\t\tthis._sEntryFound = null;\r\n\t\t\t\tthis._aKeys = null;\r\n\t\t\t\tthis._oEntitySet = null;\r\n\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tvar sKeys = _sKeys;\r\n\r\n\t\t\t\tsKeys = decodeURIComponent(sKeys);\r\n\t\t\t\tthis._oEntitySet = that._mEntitySets[sEntitySetName];\r\n\t\t\t\tthis._aKeys = this._oEntitySet.keys;\r\n\t\t\t\t// split keys\r\n\t\t\t\tthis._aRequestedKeys = sKeys.split(\",\");\r\n\r\n\t\t\t\t// check number of keys to be equal to the entity keys and validates keys type for quotations\r\n\t\t\t\tif (this._aRequestedKeys.length !== this._aKeys.length) {\r\n\t\t\t\t\tthat._logAndThrowMockServerCustomError(400, that._oErrorMessages.INVALID_KEY_PREDICATE_QUANTITY);\r\n\t\t\t\t}\r\n\t\t\t\tthat._isRequestedKeysValid(this._oEntitySet, this._aRequestedKeys);\r\n\t\t\t\tif (this._aRequestedKeys.length === 1 && !this._aRequestedKeys[0].split(\"=\")[1]) {\r\n\t\t\t\t\tthis._aRequestedKeys = [this._aKeys[0] + \"=\" + this._aRequestedKeys[0]];\r\n\t\t\t\t}\r\n\t\t\t\treturn mockRequests._getEntitySetByKeys(that._oMockdata[sEntitySetName], this._aRequestedKeys, this._aKeys, this._oEntitySet,\r\n\t\t\t\t\tthat._trim,\r\n\t\t\t\t\tthat);\r\n\t\t\t},\r\n\r\n\t\t\t_getEntitySetByKeys: function (aMockDataAll, aRequestedKeys, aKeys, oEntitySet, fTream) {\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t// check each key for existence and value\r\n\t\t\t\tfor (var j = 0; j < aMockDataAll.length; j++) {\r\n\t\t\t\t\tfor (var i = 0; i < aRequestedKeys.length; i++) {\r\n\t\t\t\t\t\tvar aKeyVal = aRequestedKeys[i].split(\"=\");\r\n\t\t\t\t\t\tvar sKey = fTream(aKeyVal[0]);\r\n\t\t\t\t\t\t//key doesn't match, continue to next entry\r\n\t\t\t\t\t\tif (jQuery.inArray(sKey, aKeys) === -1) {\r\n\t\t\t\t\t\t\treturn true; // = continue\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar sNewValue = fTream(aKeyVal[1]);\r\n\t\t\t\t\t\tvar sOrigiValue = aMockDataAll[j][sKey];\r\n\r\n\t\t\t\t\t\tswitch (oEntitySet.keysType[sKey]) {\r\n\t\t\t\t\t\tcase \"Edm.String\":\r\n\t\t\t\t\t\t\tsNewValue = sNewValue.replace(/^\\'|\\'$/g, \"\");\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"Edm.DateTime\":\r\n\t\t\t\t\t\t\tsOrigiValue = that._getDateTime(sOrigiValue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"Edm.SByte\":\r\n\t\t\t\t\t\t\tif (!that._isValidNumber(sNewValue)) {\r\n\t\t\t\t\t\t\t\treturn false; // = break\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsNewValue = parseFloat(sNewValue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"Edm.Guid\":\r\n\t\t\t\t\t\t\tsNewValue = sNewValue.replace(/^guid\\'|\\'$/g, \"\");\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"Edm.Boolean\":\r\n\t\t\t\t\t\t\tif ([\"true\", \"false\"].indexOf(sNewValue) === -1) {\r\n\t\t\t\t\t\t\t\tthat._logAndThrowMockServerCustomError(400, that._oErrorMessages.INVALID_KEY_TYPE, sKey);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsNewValue = sNewValue === \"true\";\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tsNewValue = sNewValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//compare the current entity resord value with the requested value\r\n\t\t\t\t\t\tif (sOrigiValue === sNewValue) {\r\n\t\t\t\t\t\t\t//if entry found stop looping\r\n\t\t\t\t\t\t\tthis._sEntryFound = true;\r\n\t\t\t\t\t\t\tbreak; // = continue\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//if not found, continue looping\r\n\t\t\t\t\t\t\tthis._sEntryFound = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//if entry found stop looping\r\n\t\t\t\t\tif (this._sEntryFound === true) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this._sEntryFound) {\r\n\t\t\t\t\tthis._oFoundEntry = {\r\n\t\t\t\t\t\tindex: j,\r\n\t\t\t\t\t\tentry: aMockDataAll[j]\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn this._oFoundEntry; // = break\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tcreateRelationships: function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmethod: \"POST\",\r\n\t\t\t\t\tpath: new RegExp(\"(C_RSHOperationRelationships)(\\\\(([^/\\\\?#]+)\\\\)/?(.*)?)?\"),\r\n\t\t\t\t\tresponse: function (oXhr, sEntityName) {\r\n\t\t\t\t\t\tvar that = this;\r\n\t\t\t\t\t\tvar oRequestBody = JSON.parse(oXhr.requestBody);\r\n\t\t\t\t\t\tvar oResponse = mockRequests._createNewRelationshipEntry(oRequestBody, sEntityName, that);\r\n\t\t\t\t\t\toXhr.respondJSON(oResponse.iResult, oResponse.oRespondHeader, oResponse.sResponseText);\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t_createNewRelationshipEntry: function (oRequestBody, sEntityName, oContext) {\r\n\t\t\t\tvar oRelationshipEntity = {};\r\n\t\t\t\tvar __metadata = {};\r\n\r\n\t\t\t\toRelationshipEntity.__metadata = {};\r\n\r\n\t\t\t\t__metadata.id = \"C_RSHOperationRelationships(PredecessorOrder='\" + oRequestBody.MaintenanceOrder + \"',PredecessorOrderOperation='\" +\r\n\t\t\t\t\toRequestBody.MaintenanceOrderOperation + \"',SuccessorOrder='\" + oRequestBody.RelatedMaintenanceOrder +\r\n\t\t\t\t\t\"',SuccessorOrderOperation='\" +\r\n\t\t\t\t\toRequestBody.RelatedMaintOrderOperation +\r\n\t\t\t\t\t\"')\";\r\n\t\t\t\t__metadata.uri = __metadata.id;\r\n\t\t\t\t__metadata.type = \"RSH_EAM_ORDER_GANTT_SRV.C_RSHOperationRelationshipsType\";\r\n\t\t\t\toRelationshipEntity.__metadata = __metadata;\r\n\t\t\t\toRelationshipEntity.NetworkActivityRelationType = mockRequests._getExternalRelationshipType(oRequestBody.OrderOpRelationshipIntType);\r\n\r\n\t\t\t\tvar bDoesRelationshipExist = mockRequests._isRelationshipPresent(oContext._oMockdata[sEntityName], oRelationshipEntity.__metadata.id,\r\n\t\t\t\t\toRelationshipEntity.NetworkActivityRelationType);\r\n\r\n\t\t\t\tvar oResponse = {};\r\n\t\t\t\toResponse.oRespondHeader = {};\r\n\t\t\t\toResponse.sResponseText = {};\r\n\r\n\t\t\t\tvar oMessageContent = {};\r\n\r\n\t\t\t\tif (bDoesRelationshipExist) {\r\n\r\n\t\t\t\t\toResponse.iResult = 400;\r\n\r\n\t\t\t\t\toMessageContent = {\r\n\t\t\t\t\t\t\"error\": {\r\n\t\t\t\t\t\t\t\"code\": \"CN/824\",\r\n\t\t\t\t\t\t\t\"message\": \"Relationship from \" + oRequestBody.MaintenanceOrder + \" \" + oRequestBody.MaintenanceOrderOperation +\r\n\t\t\t\t\t\t\t\t\" to \" + oRequestBody.RelatedMaintenanceOrder + \" \" + oRequestBody.RelatedMaintOrderOperation + \" already exists\",\r\n\t\t\t\t\t\t\t\"target\": \"\",\r\n\t\t\t\t\t\t\t\"severity\": \"error\",\r\n\t\t\t\t\t\t\t\"transition\": true,\r\n\t\t\t\t\t\t\t\"details\": []\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\toResponse.oRespondHeader = {\r\n\t\t\t\t\t\t\"Content-Type\": \"application/json;charset=utf-8\"\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\toResponse.sResponseText = JSON.stringify(oMessageContent);\r\n\t\t\t\t\treturn oResponse;\r\n\t\t\t\t}\r\n\r\n\t\t\t\toMessageContent = {\r\n\t\t\t\t\t\"code\": \"IW/080\",\r\n\t\t\t\t\t\"message\": \"Order saved with number \" + oRequestBody.MaintenanceOrder,\r\n\t\t\t\t\t\"target\": \"\",\r\n\t\t\t\t\t\"severity\": \"success\",\r\n\t\t\t\t\t\"transition\": true,\r\n\t\t\t\t\t\"details\": []\r\n\t\t\t\t};\r\n\t\t\t\toResponse.iResult = 201;\r\n\t\t\t\toResponse.oRespondHeader = {\r\n\t\t\t\t\t\"Content-Type\": \"application/json;charset=utf-8\",\r\n\t\t\t\t\t\"sap-message\": JSON.stringify(oMessageContent)\r\n\t\t\t\t};\r\n\t\t\t\toRelationshipEntity.PredecessorOrder = oRequestBody.MaintenanceOrder;\r\n\t\t\t\toRelationshipEntity.PredecessorOrderOperation = oRequestBody.MaintenanceOrderOperation;\r\n\t\t\t\toRelationshipEntity.SuccessorOrder = oRequestBody.RelatedMaintenanceOrder;\r\n\t\t\t\toRelationshipEntity.SuccessorOrderOperation = oRequestBody.RelatedMaintOrderOperation;\r\n\t\t\t\toRelationshipEntity.RelationshipIsExplicit = \"X\";\r\n\t\t\t\toRelationshipEntity.PredecessorOrderOperationRowID = \"00000\" + oRequestBody.MaintenanceOrder + oRequestBody.MaintenanceOrderOperation;\r\n\t\t\t\toRelationshipEntity.SuccessorOrderOperationRowID = \"00000\" + oRequestBody.RelatedMaintenanceOrder + oRequestBody.RelatedMaintOrderOperation;\r\n\t\t\t\toContext._oMockdata[sEntityName] = oContext._oMockdata[sEntityName].concat(oRelationshipEntity);\r\n\r\n\t\t\t\toResponse.sResponseText = JSON.stringify({\r\n\t\t\t\t\td: oRelationshipEntity\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn oResponse;\r\n\t\t\t},\r\n\r\n\t\t\t_isRelationshipPresent: function (aMockdata, sMetadataId, sRelationshipType) {\r\n\t\t\t\tfor (var i = 0; i < aMockdata.length; i++) {\r\n\t\t\t\t\tif (aMockdata[i].__metadata.id.indexOf(sMetadataId) !== -1 && aMockdata[i].NetworkActivityRelationType === sRelationshipType) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t_getExternalRelationshipType: function (sRelationshipType) {\r\n\t\t\t\tswitch (sRelationshipType) {\r\n\t\t\t\tcase \"NF\":\r\n\t\t\t\t\treturn \"FinishToStart\";\r\n\t\t\t\tcase \"AF\":\r\n\t\t\t\t\treturn \"StartToStart\";\r\n\t\t\t\tcase \"EF\":\r\n\t\t\t\t\treturn \"FinishToFinish\";\r\n\t\t\t\tcase \"SF\":\r\n\t\t\t\t\treturn \"StartToFinish\";\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn \" \";\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t/**\r\n\t\t\t * Returns an updated array of handlers for the mockserver, containing the default auto generated handlers \r\n\t\t\t * and addicional custom developed handlers.\r\n\t\t\t * @param {array} aRequests auto generated handlers of the mockserver\r\n\t\t\t * @param {object} thisArg mockserver instance object\r\n\t\t\t * @returns {array} array of handlers\r\n\t\t\t * @public\r\n\t\t\t * */\r\n\t\t\tgetRequests: function (aRequests, thisArg) {\r\n\r\n\t\t\t\t//this.addRequest(aRequests, this.getOrderlist(), thisArg);\r\n\t\t\t\tthis.addRequest(aRequests, this.convertDueToDispatch(), thisArg);\r\n\t\t\t\tthis.addRequest(aRequests, this.convertDispatchToDue(), thisArg);\r\n\t\t\t\t// I_MaintOrderOperationTPChangeassgmt\r\n\t\t\t\tthis.addRequest(aRequests, this.triggerWorkCenterOperationMassChange(), thisArg);\r\n\t\t\t\t// I_MaintOrderOperationTPChangescheduling\r\n\t\t\t\tthis.addRequest(aRequests, this.triggerChangeScheduling(), thisArg);\r\n\r\n\t\t\t\tthis.addRequest(aRequests, this.createRelationships(), thisArg);\r\n\t\t\t\treturn aRequests;\r\n\t\t\t},\r\n\r\n\t\t\taddRequest: function (aRequests, customRequest, thisArg) {\r\n\t\t\t\tvar oRequest = aRequests.find(function (oItem) {\r\n\t\t\t\t\treturn oItem.path.toString() === customRequest.path.toString();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (oRequest) { //override existing request\r\n\t\t\t\t\toRequest.response = customRequest.response.bind(thisArg);\r\n\t\t\t\t} else { //add new request\r\n\t\t\t\t\toRequest = customRequest;\r\n\t\t\t\t\toRequest.response = customRequest.response.bind(thisArg);\r\n\t\t\t\t\taRequests.push(oRequest);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn mockRequests;\r\n\t},\r\n\ttrue);",
		"rsh/eam/ordergantts1/localService/mockserver-dbg.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\r\n\t\"sap/ui/core/util/MockServer\",\r\n\t\"rsh/eam/ordergantts1/localService/customMockRequests\",\r\n\t\"rsh/eam/ordergantts1/localService/customMockRequestsForMaintenanceOrder\"\r\n], function (MockServer, CustomizedMockRequests, customMockReqMaintOrd) {\r\n\t\"use strict\";\r\n\tvar oMockServer,\r\n\t\toMockServerMaintenanceOrder,\r\n\t\t_sAppModulePath = \"rsh/eam/ordergantts1/\",\r\n\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\",\r\n\t\t_sJsonFilesModulePathMaintenanceOrder = _sAppModulePath + \"localService/mockdataMaintenanceOrder\";\r\n\r\n\treturn {\r\n\r\n\t\t/**\r\n\t\t * Initializes the mock server.\r\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\r\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\r\n\t\t * @public\r\n\t\t */\r\n\t\tinit: function () {\r\n\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\r\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\r\n\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\r\n\t\t\t\tsEntity = \"C_RSHOrdersAndOperations\",\r\n\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\r\n\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\r\n\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\r\n\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.RSH_EAM_ORDER_GANTT_SRV,\r\n\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\r\n\t\t\t\t// ensure there is a trailing slash\r\n\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\r\n\r\n\t\t\toMockServer = new MockServer({\r\n\t\t\t\trootUri: sMockServerUrl\r\n\t\t\t});\r\n\r\n\t\t\t// configure mock server with a delay of 1s\r\n\t\t\tMockServer.config({\r\n\t\t\t\tautoRespond: true,\r\n\t\t\t\tautoRespondAfter: (oUriParameters.get(\"serverDelay\") || 1000)\r\n\t\t\t});\r\n\r\n\t\t\t//Check the uri parameter in order to switch mockdata folder\r\n\t\t\tif (oUriParameters.get(\"journey\") === \"relationshipJourney\") {\r\n\t\t\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdataRelationship\";\r\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath);\r\n\t\t\t}\r\n\r\n\t\t\t// load local mock data\r\n\t\t\toMockServer.simulate(sMetadataUrl, {\r\n\t\t\t\tsMockdataBaseUrl: sJsonFilesUrl,\r\n\t\t\t\tbGenerateMissingMockData: true //,\r\n\t\t\t\t\t//aEntitySetsNames: [\"C_RSHOrdersAndOperations\"]\r\n\t\t\t});\r\n\r\n\t\t\t// Add custom handlers used for the FunctionImports.\r\n\t\t\tvar aMyRequests = CustomizedMockRequests.getRequests(oMockServer.getRequests(), oMockServer);\r\n\t\t\toMockServer.setProperty(\"requests\", aMyRequests);\r\n\r\n\t\t\tvar aRequests = aMyRequests,\r\n\t\t\t\tfnResponse = function (iErrCode, sMessage, aRequest) {\r\n\t\t\t\t\taRequest.response = function (oXhr) {\r\n\t\t\t\t\t\toXhr.respond(iErrCode, {\r\n\t\t\t\t\t\t\t\"Content-Type\": \"text/plain;charset=utf-8\"\r\n\t\t\t\t\t\t}, sMessage);\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t// handling the metadata error test\r\n\t\t\tif (oUriParameters.get(\"metadataError\")) {\r\n\t\t\t\taRequests.forEach(function (aEntry) {\r\n\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\r\n\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Handling request errors\r\n\t\t\tif (sErrorParam) {\r\n\t\t\t\taRequests.forEach(function (aEntry) {\r\n\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\r\n\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t//To test create relationship journey, we need to start maintenance order service\r\n\t\t\tif (oUriParameters.get(\"journey\") === \"relationshipJourney\") {\r\n\t\t\t\tvar sJsonFilesUrlMaintenanceOrder = jQuery.sap.getModulePath(_sJsonFilesModulePathMaintenanceOrder),\r\n\t\t\t\t\tsMetadataUrlMaintenanceOrder = jQuery.sap.getModulePath(_sAppModulePath + \"localService/RSH_SB_MAINTENANCE_ORDER/metadata\", \".xml\"),\r\n\t\t\t\t\tsMockServerUrlMaintenanceOrder = \"/sap/opu/odata/sap/RSH_SB_MAINTENANCE_ORDER/\";\r\n\t\t\t\toMockServerMaintenanceOrder = new MockServer({\r\n\t\t\t\t\trootUri: sMockServerUrlMaintenanceOrder\r\n\t\t\t\t});\r\n\r\n\t\t\t\toMockServerMaintenanceOrder.simulate(sMetadataUrlMaintenanceOrder, {\r\n\t\t\t\t\tsMockdataBaseUrl: sJsonFilesUrlMaintenanceOrder,\r\n\t\t\t\t\tbGenerateMissingMockData: true\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar aMyMaintOrdRequests = customMockReqMaintOrd.getRequests(oMockServerMaintenanceOrder.getRequests(), oMockServerMaintenanceOrder);\r\n\t\t\t\toMockServerMaintenanceOrder.setProperty(\"requests\", aMyMaintOrdRequests);\r\n\t\t\t\toMockServerMaintenanceOrder.start();\r\n\r\n\t\t\t}\r\n\r\n\t\t\toMockServer.start();\r\n\r\n\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * @public returns the mockserver of the app, should be used in integration tests\r\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\r\n\t\t */\r\n\t\tgetMockServer: function () {\r\n\t\t\treturn oMockServer;\r\n\t\t}\r\n\t};\r\n\r\n});",
		"rsh/eam/ordergantts1/localService/customMockRequestsForMaintenanceOrder.js": "/*\r\n * Copyright (C) 2009-2021 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\nsap.ui.define([\"jquery.sap.global\"],function(q){\"use strict\";var m={_aRequestedKeys:null,_sEntryFound:null,_aKeys:null,_oEntitySet:null,connectTwoOperations:function(){return{method:\"POST\",path:new RegExp(\"(C_RSHMaintenanceOrdOperationTP)(\\\\(([^/\\\\?#]+)\\\\)/?(.*)?)?\"),response:function(x,u){var r=new XMLHttpRequest();r.onload=(function(R){var M={};M=R.target.responseHeaders[\"sap-message\"];var h={\"sap-message\":M};x.respondJSON(R.target.status,h,R.target.responseText);return true;});r.open(\"POST\",\"/sap/opu/odata/sap/RSH_EAM_ORDER_GANTT_SRV/\"+\"C_RSHOperationRelationships\",false);r.send(x.requestBody);return true;}};},getRequests:function(r,t){this.addRequest(r,this.connectTwoOperations(),t);return r;},addRequest:function(r,c,t){var R=r.find(function(i){return i.path.toString()===c.path.toString();});if(R){R.response=c.response.bind(t);}else{R=c;R.response=c.response.bind(t);r.push(R);}}};return m;},true);"
	}
});